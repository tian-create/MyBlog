{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/zhaoo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/js/color-mode.js","path":"js/color-mode.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/apple-touch-icon.png","path":"images/icons/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-128x128.png","path":"images/icons/favicon-128x128.png","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-144x144.png","path":"images/icons/favicon-144x144.png","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/zhaoo-logo.png","path":"images/icons/zhaoo-logo.png","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/cloud.png","path":"images/theme/cloud.png","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/loading.gif","path":"images/theme/loading.gif","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image.jpg","path":"images/theme/post-image.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/daovoice/daovoice.js","path":"lib/daovoice/daovoice.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.css","path":"lib/fancybox/fancybox.css","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.js","path":"lib/fancybox/fancybox.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.css","path":"lib/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.js","path":"lib/gitalk/gitalk.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/highlight/a11y-dark.css","path":"lib/highlight/a11y-dark.css","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/highlight/highlight.js","path":"lib/highlight/highlight.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/jquery/jquery.js","path":"lib/jquery/jquery.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/lazyload/lazyload.js","path":"lib/lazyload/lazyload.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/lottie/lottie.js","path":"lib/lottie/lottie.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/pjax/pjax.js","path":"lib/pjax/pjax.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/lib/qrcode/qrcode.js","path":"lib/qrcode/qrcode.js","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-0f4fa7b40ca783ef823c5636ef1da4b8_r.jpg","path":"images/theme/img/v2-0f4fa7b40ca783ef823c5636ef1da4b8_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-240f2e71c37b622d4de5c41db2cb5e5c_r.jpg","path":"images/theme/img/v2-240f2e71c37b622d4de5c41db2cb5e5c_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-28a6bdd69aa23938639cdd44caeaa5e7_r.jpg","path":"images/theme/img/v2-28a6bdd69aa23938639cdd44caeaa5e7_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-2d757602df79fb323c615c85298e25b3_r.jpg","path":"images/theme/img/v2-2d757602df79fb323c615c85298e25b3_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-39f5c94ab44e795a12d294b5dfd73315_r.jpg","path":"images/theme/img/v2-39f5c94ab44e795a12d294b5dfd73315_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-4ce31ce804e18089a463534fb58657de_r.jpg","path":"images/theme/img/v2-4ce31ce804e18089a463534fb58657de_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-5030587bac1b856d09e0a119ff6d7c04_r.jpg","path":"images/theme/img/v2-5030587bac1b856d09e0a119ff6d7c04_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-56164ef0695767475935c9e019c594ae_r.jpg","path":"images/theme/img/v2-56164ef0695767475935c9e019c594ae_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-563cb95e76e6b83e7f5b482f1ca3b5fe_r.jpg","path":"images/theme/img/v2-563cb95e76e6b83e7f5b482f1ca3b5fe_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-6b2c132618806166903732e218dd7d3f_r.jpg","path":"images/theme/img/v2-6b2c132618806166903732e218dd7d3f_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-75d460ab7530079a33c5ac39ddc80b2f_r.jpg","path":"images/theme/img/v2-75d460ab7530079a33c5ac39ddc80b2f_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-780e46650ff30bdbc695ad6419726975_r.jpg","path":"images/theme/img/v2-780e46650ff30bdbc695ad6419726975_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-7899b38ce0f87c5f36e8936b43921fb3_r.jpg","path":"images/theme/img/v2-7899b38ce0f87c5f36e8936b43921fb3_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-8d6aaa767ec5f0dad922bb3cf11b3847_r.jpg","path":"images/theme/img/v2-8d6aaa767ec5f0dad922bb3cf11b3847_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-900b181177291edc0037fcd67ec0c3b5_r.jpg","path":"images/theme/img/v2-900b181177291edc0037fcd67ec0c3b5_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-9825cc425a12847d5d4b629e2c4aae63_r.jpg","path":"images/theme/img/v2-9825cc425a12847d5d4b629e2c4aae63_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-9d2182c838803c99785ee0f2b4ba9a49_r.jpg","path":"images/theme/img/v2-9d2182c838803c99785ee0f2b4ba9a49_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-9db7bf3b825f2db103a534ca59c75481_r.jpg","path":"images/theme/img/v2-9db7bf3b825f2db103a534ca59c75481_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-a64d2a1cb3824d7778e2c92c21a94f0f_r.jpg","path":"images/theme/img/v2-a64d2a1cb3824d7778e2c92c21a94f0f_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-aa65a52ba49b9ba47a6bc055a2b89119_r.jpg","path":"images/theme/img/v2-aa65a52ba49b9ba47a6bc055a2b89119_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-ac396e3a473741f0c0fe5b7c8a9fb892_r.jpg","path":"images/theme/img/v2-ac396e3a473741f0c0fe5b7c8a9fb892_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-acf8a38f633ebdcf1c4dc5b9b7add24a_b.jpg","path":"images/theme/img/v2-acf8a38f633ebdcf1c4dc5b9b7add24a_b.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-b4282dc1e2525f842061e77d9dd0c7b9_r.jpg","path":"images/theme/img/v2-b4282dc1e2525f842061e77d9dd0c7b9_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-b575517441b44bb1b035f775e58da0f0_r.jpg","path":"images/theme/img/v2-b575517441b44bb1b035f775e58da0f0_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-bf7c3845bc95b2f6248d5ec8638ca4db_r.jpg","path":"images/theme/img/v2-bf7c3845bc95b2f6248d5ec8638ca4db_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-cd3734a8e6ad5dbdaca116a9c590defd_b.jpg","path":"images/theme/img/v2-cd3734a8e6ad5dbdaca116a9c590defd_b.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img/v2-d8b282ded29d1a9562e79ed12c0f308e_r.jpg","path":"images/theme/img/v2-d8b282ded29d1a9562e79ed12c0f308e_r.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-image-bak.jpg","path":"images/theme/welcome-image-bak.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img2.jpg","path":"images/theme/img2.jpg","modified":1,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/img1.jpg","path":"images/theme/img1.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover10.jpg","path":"images/cover10.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover11.jpg","path":"images/cover11.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover8.jpg","path":"images/cover8.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover9.jpg","path":"images/cover9.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme—bak.png","path":"images/forkme—bak.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/gitee.png","path":"images/gitee.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","path":"images/hexo-tag-chart.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo.png","path":"images/hexo.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/tx.jpg","path":"images/tx.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/tx2.jpg","path":"images/tx2.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/v2-e0015a8502764bd488ef7aac671cf11d_r.jpg","path":"images/v2-e0015a8502764bd488ef7aac671cf11d_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.css","path":"css/fonts/remixicon.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","path":"css/fonts/remixicon.eot","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","path":"css/fonts/remixicon.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","path":"css/fonts/remixicon.ttf","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","path":"css/fonts/remixicon.woff","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","path":"css/fonts/remixicon.woff2","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-0f4fa7b40ca783ef823c5636ef1da4b8_r.jpg","path":"images/img/v2-0f4fa7b40ca783ef823c5636ef1da4b8_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-240f2e71c37b622d4de5c41db2cb5e5c_r.jpg","path":"images/img/v2-240f2e71c37b622d4de5c41db2cb5e5c_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-28a6bdd69aa23938639cdd44caeaa5e7_r.jpg","path":"images/img/v2-28a6bdd69aa23938639cdd44caeaa5e7_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-2d757602df79fb323c615c85298e25b3_r.jpg","path":"images/img/v2-2d757602df79fb323c615c85298e25b3_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-39f5c94ab44e795a12d294b5dfd73315_r.jpg","path":"images/img/v2-39f5c94ab44e795a12d294b5dfd73315_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-4ce31ce804e18089a463534fb58657de_r.jpg","path":"images/img/v2-4ce31ce804e18089a463534fb58657de_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-5030587bac1b856d09e0a119ff6d7c04_r.jpg","path":"images/img/v2-5030587bac1b856d09e0a119ff6d7c04_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-56164ef0695767475935c9e019c594ae_r.jpg","path":"images/img/v2-56164ef0695767475935c9e019c594ae_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-563cb95e76e6b83e7f5b482f1ca3b5fe_r.jpg","path":"images/img/v2-563cb95e76e6b83e7f5b482f1ca3b5fe_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-6b2c132618806166903732e218dd7d3f_r.jpg","path":"images/img/v2-6b2c132618806166903732e218dd7d3f_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-75d460ab7530079a33c5ac39ddc80b2f_r.jpg","path":"images/img/v2-75d460ab7530079a33c5ac39ddc80b2f_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-780e46650ff30bdbc695ad6419726975_r.jpg","path":"images/img/v2-780e46650ff30bdbc695ad6419726975_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-7899b38ce0f87c5f36e8936b43921fb3_r.jpg","path":"images/img/v2-7899b38ce0f87c5f36e8936b43921fb3_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-8d6aaa767ec5f0dad922bb3cf11b3847_r.jpg","path":"images/img/v2-8d6aaa767ec5f0dad922bb3cf11b3847_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-900b181177291edc0037fcd67ec0c3b5_r.jpg","path":"images/img/v2-900b181177291edc0037fcd67ec0c3b5_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-9825cc425a12847d5d4b629e2c4aae63_r.jpg","path":"images/img/v2-9825cc425a12847d5d4b629e2c4aae63_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-9d2182c838803c99785ee0f2b4ba9a49_r.jpg","path":"images/img/v2-9d2182c838803c99785ee0f2b4ba9a49_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-9db7bf3b825f2db103a534ca59c75481_r.jpg","path":"images/img/v2-9db7bf3b825f2db103a534ca59c75481_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-a64d2a1cb3824d7778e2c92c21a94f0f_r.jpg","path":"images/img/v2-a64d2a1cb3824d7778e2c92c21a94f0f_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-aa65a52ba49b9ba47a6bc055a2b89119_r.jpg","path":"images/img/v2-aa65a52ba49b9ba47a6bc055a2b89119_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-ac396e3a473741f0c0fe5b7c8a9fb892_r.jpg","path":"images/img/v2-ac396e3a473741f0c0fe5b7c8a9fb892_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-acf8a38f633ebdcf1c4dc5b9b7add24a_b.jpg","path":"images/img/v2-acf8a38f633ebdcf1c4dc5b9b7add24a_b.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-b4282dc1e2525f842061e77d9dd0c7b9_r.jpg","path":"images/img/v2-b4282dc1e2525f842061e77d9dd0c7b9_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-b575517441b44bb1b035f775e58da0f0_r.jpg","path":"images/img/v2-b575517441b44bb1b035f775e58da0f0_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-bf7c3845bc95b2f6248d5ec8638ca4db_r.jpg","path":"images/img/v2-bf7c3845bc95b2f6248d5ec8638ca4db_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-cd3734a8e6ad5dbdaca116a9c590defd_b.jpg","path":"images/img/v2-cd3734a8e6ad5dbdaca116a9c590defd_b.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/img/v2-d8b282ded29d1a9562e79ed12c0f308e_r.jpg","path":"images/img/v2-d8b282ded29d1a9562e79ed12c0f308e_r.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover12.jpg","path":"images/cover12.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover13.jpg","path":"images/cover13.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/term-statement.md","hash":"95bcbd79ab788bce0ddee7e9de942c094d9b5207","modified":1656489552560},{"_id":"source/_posts/function.md","hash":"be0cca7d556ce7fb0db00c6621c6bc72b3a966dc","modified":1656489413116},{"_id":"themes/zhaoo/LICENSE","hash":"74f4b502cb5e62d3c947bc4fd16bed695d8bf65b","modified":1656487982717},{"_id":"themes/zhaoo/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1656487982717},{"_id":"themes/zhaoo/package.json","hash":"e116101e90a6eefdbbf423f7a4d0edd72221cf17","modified":1656487982733},{"_id":"themes/zhaoo/languages/default.yml","hash":"1b2b75ca9ff3bfeddb596239889b584cdfcecc32","modified":1656487982721},{"_id":"themes/zhaoo/_config.yml","hash":"522bf8752094b0ef0ec9fec4776df67a46a7b3e7","modified":1656487982718},{"_id":"themes/zhaoo/README_EN.md","hash":"987c0601db2a6313372072b70ee1848f9001cdf2","modified":1656487982717},{"_id":"themes/zhaoo/languages/it.yml","hash":"6ae71000ed039f56572143ffe90da17b95d1a66f","modified":1656487982721},{"_id":"themes/zhaoo/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1656487982722},{"_id":"themes/zhaoo/README.md","hash":"2a10c672fac2cdc89c077a16757ef8589b3e9f20","modified":1656487982717},{"_id":"themes/zhaoo/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1656487982721},{"_id":"themes/zhaoo/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1656487982722},{"_id":"themes/zhaoo/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1656487982722},{"_id":"themes/zhaoo/languages/zh-CN.yml","hash":"ccbba6315760755926f5abfe1b98c225a6650581","modified":1656487982722},{"_id":"themes/zhaoo/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1656487982722},{"_id":"themes/zhaoo/layout/archive.ejs","hash":"438069ea52e71a9fd8c96ff58007ec6c91e352a7","modified":1656487982731},{"_id":"themes/zhaoo/layout/categories.ejs","hash":"e7ed9fa6a6abd02af212a8bf04fc600d008f4abd","modified":1656487982731},{"_id":"themes/zhaoo/layout/category.ejs","hash":"ca4af3683e3d3daf9282c76b0749c2b1a89399ac","modified":1656487982732},{"_id":"themes/zhaoo/layout/gallery.ejs","hash":"a379c8607ae2fdd450198e437ba8125ac1435654","modified":1656487982732},{"_id":"themes/zhaoo/layout/layout.ejs","hash":"4b559e7859d72d3e962b18198cbb30ec126c84b5","modified":1656487982732},{"_id":"themes/zhaoo/layout/galleries.ejs","hash":"65f1bad4c0410c92087f72e2d9298f30f23e4d18","modified":1656487982732},{"_id":"themes/zhaoo/layout/index.ejs","hash":"0e6282054062e1391be29bb473487a808f13828c","modified":1656487982732},{"_id":"themes/zhaoo/layout/tag.ejs","hash":"91a8ffd62866427d6e04884fc4fc806b8c261770","modified":1656487982733},{"_id":"themes/zhaoo/layout/tags.ejs","hash":"937f6400f7b47baa4aca025786dcd67151355cc1","modified":1656487982733},{"_id":"themes/zhaoo/layout/post.ejs","hash":"747038a8b2d33bce35b2f68d3e50bdfa28c4f36c","modified":1656487982732},{"_id":"themes/zhaoo/layout/pure.ejs","hash":"1ffc46cb8d2a976a329bd6e8292ca8114467f833","modified":1656487982732},{"_id":"themes/zhaoo/scripts/carrier.js","hash":"10c3cde9ec17e1ced6ad871e7f5af409cbc51e6e","modified":1656487982768},{"_id":"themes/zhaoo/scripts/entry.js","hash":"c0c69f1c184c7a2e29dbaaa45a93b8948c241932","modified":1656487982768},{"_id":"themes/zhaoo/scripts/lazyload.js","hash":"ccf0c3d84fc2edf085c43e204410cf4d3c6b2baa","modified":1656487982768},{"_id":"themes/zhaoo/scripts/merge-config.js","hash":"35aac2f51a883d4d7bbe2b3b273b47f4db670952","modified":1656487982769},{"_id":"themes/zhaoo/scripts/post-image.js","hash":"82f5d9d5d9fe9d7de886d87fe20cea360d0df8d9","modified":1656487982770},{"_id":"themes/zhaoo/scripts/title.js","hash":"b62b21cd09717564ef883c901deb5451b3000dbd","modified":1656487982770},{"_id":"themes/zhaoo/scripts/caption.js","hash":"651928cc462943be90036c33262d3d25aa3e7ea0","modified":1656487982768},{"_id":"themes/zhaoo/layout/_partial/script.ejs","hash":"b3d7c42d6ee99dfeed081cb5f788c58263c1eff0","modified":1656487982731},{"_id":"themes/zhaoo/source/js/color-mode.js","hash":"33cd307624e32035ea4544c9a6a4676ef9f70beb","modified":1656487982786},{"_id":"themes/zhaoo/source/js/utils.js","hash":"359461693c5a1c8f9fb159c2dfb78051d0b351e1","modified":1656487982786},{"_id":"themes/zhaoo/_example/source/_data/galleries.json","hash":"2b8bd59e5dbda5512b6a7458b2d3936e7ae23c5a","modified":1656487982718},{"_id":"themes/zhaoo/_example/source/_data/local_images.json","hash":"9a5ba1814709361cd141121e803f8953ef32d7fb","modified":1656487982718},{"_id":"themes/zhaoo/_example/source/_posts/hexo-theme-zhaoo-doc.md","hash":"6855f6440f4cdac0540afbd4900f9ab2175a0d5a","modified":1656487982719},{"_id":"themes/zhaoo/_example/source/_posts/hexo-theme-zhaoo.md","hash":"b52814eaf58dca925001beb2f911bb5e377e69a9","modified":1656487982719},{"_id":"themes/zhaoo/_example/source/about/index.md","hash":"e9cf4e1b773da337befbacca42eeffc5f76e2ad5","modified":1656487982719},{"_id":"themes/zhaoo/_example/source/categories/index.md","hash":"108d69d9b70c1b66531b8de5e89d809f9fad26a6","modified":1656487982720},{"_id":"themes/zhaoo/_example/source/galleries/index.md","hash":"83876d965236601bc871f6619f7d1f6e1357c945","modified":1656487982720},{"_id":"themes/zhaoo/_example/source/tags/index.md","hash":"176a9920c6ed25f1f2d12940b7733da45b0966d4","modified":1656487982721},{"_id":"themes/zhaoo/layout/_partial/comments/changyan.ejs","hash":"d762068b8c036ae7e83a2df9d36cd43dca46d5a4","modified":1656487982723},{"_id":"themes/zhaoo/layout/_partial/comments/gitalk.ejs","hash":"8748a63003dc954df1b0a47f3d45ff191e714f3d","modified":1656487982723},{"_id":"themes/zhaoo/layout/_partial/comments/valine.ejs","hash":"8f6ce8eb608f0c7c9ce482fd1f8aad7efa175f8c","modified":1656487982723},{"_id":"themes/zhaoo/layout/_partial/components/fab.ejs","hash":"f6c0ed0c4a5b3a435605c7e956da143e66993e00","modified":1656487982723},{"_id":"themes/zhaoo/layout/_partial/components/footer.ejs","hash":"59dab61fa47add0fa174e49507659eb2e18d4de8","modified":1656487982723},{"_id":"themes/zhaoo/layout/_partial/components/header.ejs","hash":"62ae2fac8dc5d6cba29ebe777b9d06e6d954a45b","modified":1656487982723},{"_id":"themes/zhaoo/layout/_partial/components/loading.ejs","hash":"1e1d68be27d3120864daf2d7305ac7a62bca1d84","modified":1656487982723},{"_id":"themes/zhaoo/layout/_partial/components/menu.ejs","hash":"c4106f65b24355895399ebae328bc8bb8f622d6a","modified":1656487982724},{"_id":"themes/zhaoo/layout/_partial/components/navbar.ejs","hash":"d6886ca04c922bd32068ae3540a75463bdf42a99","modified":1656487982726},{"_id":"themes/zhaoo/layout/_partial/components/paginator.ejs","hash":"174723904a7a0b6088c411233266a5d35b8affe7","modified":1656487982726},{"_id":"themes/zhaoo/layout/_partial/components/scrollbar.ejs","hash":"dabbb31935dd1e67bf735665b35d41db8eee67c6","modified":1656487982727},{"_id":"themes/zhaoo/layout/_partial/components/search.ejs","hash":"3e2f18d6b785cee85667655f1d27e9858447a3d8","modified":1656487982727},{"_id":"themes/zhaoo/layout/_partial/index/item.ejs","hash":"af1e72bc4e9216783e924c94b626ed32dad7616c","modified":1656487982729},{"_id":"themes/zhaoo/layout/_partial/index/post.ejs","hash":"4de44a27558cf1058a5fe2bb65fb2e27f593af76","modified":1656487982729},{"_id":"themes/zhaoo/layout/_partial/index/preview.ejs","hash":"fc78346e7a00d1584fe8b0dc1b229a481c7a056a","modified":1656487982729},{"_id":"themes/zhaoo/layout/_partial/plugins/analytics.ejs","hash":"367d6fb80be4ce480c78bf63f2fbd2d28dedd0a3","modified":1656487982729},{"_id":"themes/zhaoo/layout/_partial/plugins/daovoice.ejs","hash":"f49d99f040979c44b7abad5136786c2535a8db46","modified":1656487982729},{"_id":"themes/zhaoo/layout/_partial/plugins/leancloud.ejs","hash":"535708a3276ed989f63321e13d889863d1bd6d8f","modified":1656487982730},{"_id":"themes/zhaoo/layout/_partial/plugins/seo.ejs","hash":"7aa361277db60df8195b651fdfbc95ec5f5a4daa","modified":1656487982730},{"_id":"themes/zhaoo/layout/_partial/post/comments.ejs","hash":"505e0724ccf8aa467e219e9f1fc86ca62479ec18","modified":1656487982730},{"_id":"themes/zhaoo/layout/_partial/post/copyright.ejs","hash":"3c16a6499867c7fb773505ea2d877b3bbfdf81b0","modified":1656487982730},{"_id":"themes/zhaoo/layout/_partial/post/donate.ejs","hash":"e64e1a6e537ea56888baf9be98324baa9c39b49f","modified":1656487982730},{"_id":"themes/zhaoo/layout/_partial/post/head.ejs","hash":"9ab6fe00a2b1a03cfcbe3125cf91c52908afb528","modified":1656487982731},{"_id":"themes/zhaoo/layout/_partial/post/nav.ejs","hash":"9a59b60fdba3100d91c9f527bae75ac0e9cb8bd5","modified":1656487982731},{"_id":"themes/zhaoo/layout/_partial/post/tag.ejs","hash":"6b94a9ccb03624e6ce7cbbc827e45bc4bfca8a4a","modified":1656487982731},{"_id":"themes/zhaoo/layout/_partial/post/toc.ejs","hash":"bbb947334a5275cee6b834b5c216ddc6699d68c7","modified":1656487982731},{"_id":"themes/zhaoo/source/css/_base/color-mode.styl","hash":"be52bfac7dd56ce6c76039ea1522cc30c9e815a2","modified":1656487982770},{"_id":"themes/zhaoo/source/css/_base/reset.styl","hash":"be64ad3469e427e9b7000e763034fb94984a8eeb","modified":1656487982771},{"_id":"themes/zhaoo/source/css/_base/zui.styl","hash":"84c080d668427a3a64b8c930333c714783730414","modified":1656487982771},{"_id":"themes/zhaoo/source/css/_components/common.styl","hash":"dc725d10a7a161654e498875d3a507ffe18dba7e","modified":1656487982771},{"_id":"themes/zhaoo/source/css/_components/fab.styl","hash":"184933f6ee13a7a7f40b2592fc35ba0a9c2a5825","modified":1656487982771},{"_id":"themes/zhaoo/source/css/_components/footer.styl","hash":"06a0f3acc8947842889e06986025169063c72eac","modified":1656487982771},{"_id":"themes/zhaoo/source/css/_components/header.styl","hash":"d9286ca8729e35d3b29ca6cb27ec2ccae562c040","modified":1656487982771},{"_id":"themes/zhaoo/source/css/_components/menu.styl","hash":"46f897c3cb3fea7c409d179cdcca7a63dd82bcd4","modified":1656487982772},{"_id":"themes/zhaoo/source/css/_components/navbar.styl","hash":"4e7fbb1c5fd25b280d88a70eec465de8ac0a4ab4","modified":1656487982772},{"_id":"themes/zhaoo/source/css/_components/paginator.styl","hash":"bafe156fce40a01f2fa38bc2bbb38dc92239cabd","modified":1656487982772},{"_id":"themes/zhaoo/source/css/_components/preview.styl","hash":"b5427785cfee20fcc400e55e964dab3312584726","modified":1656487982772},{"_id":"themes/zhaoo/source/css/_components/scrollbar.styl","hash":"aca6a15c54cf34ddbf99075d0c13d458cfc11828","modified":1656487982772},{"_id":"themes/zhaoo/source/css/_components/search.styl","hash":"e9f96afd0947d83deda8cf6bfb938125a203b3d3","modified":1656487982772},{"_id":"themes/zhaoo/source/css/_pages/pages.styl","hash":"c4e4af922ee697c44295ab1072e350d4587b120f","modified":1656487982774},{"_id":"themes/zhaoo/source/css/_variables/variables.styl","hash":"e4fd51e16ba970994ebcc0b6dacdd82d22dbe6d7","modified":1656487982774},{"_id":"themes/zhaoo/source/images/icons/apple-touch-icon.png","hash":"c1d16404a57db24e985204e7b2b97fa45d5fea0b","modified":1656487982775},{"_id":"themes/zhaoo/source/images/icons/favicon-128x128.png","hash":"c92b96941e92baf607a75887b3e187c9517ae807","modified":1656487982775},{"_id":"themes/zhaoo/source/images/icons/favicon-144x144.png","hash":"e54f440ff564f1235f9c399e2cd435dd502ceb84","modified":1656487982775},{"_id":"themes/zhaoo/source/images/icons/favicon-16x16.png","hash":"86cc7a07ccf09deff3de7b0ef2f82daa282a8b8e","modified":1656487982776},{"_id":"themes/zhaoo/source/images/icons/favicon-32x32.png","hash":"7b095984bd7d07e10fa9b0df8347a933eba8537c","modified":1656487982776},{"_id":"themes/zhaoo/source/images/icons/zhaoo-logo.png","hash":"50f9f5de4207847bba6aecc4c21d21d79f0001fb","modified":1656487982779},{"_id":"themes/zhaoo/source/js/script.js","hash":"a36c745bdb1fcb58bcb4774159bba7653a0499ba","modified":1656487982786},{"_id":"themes/zhaoo/layout/_partial/head.ejs","hash":"b81bbde79d21adaef2023e9e1f0807c9ffb5b59b","modified":1656487982728},{"_id":"themes/zhaoo/source/css/style.styl","hash":"91077c8a71c5827bdc5875309e3837e48a290ffd","modified":1656487982775},{"_id":"themes/zhaoo/source/images/theme/loading.gif","hash":"db91090dd60098086993953f88c37a332eea70d7","modified":1656487982782},{"_id":"themes/zhaoo/layout/_partial/post/article.ejs","hash":"21cb86efd40a44f9c63c496cfaa7c3b973d29254","modified":1656487982730},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1656487982790},{"_id":"themes/zhaoo/source/lib/gitalk/.DS_Store","hash":"d0c74f5f99535ad14eaec93484abb4ff8dbca277","modified":1656487982792},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.css","hash":"99f6725b386bdb0f52d15b0dd7877eaf1ad4c918","modified":1656487982792},{"_id":"themes/zhaoo/source/lib/highlight/a11y-dark.css","hash":"9f0c935216015dd88251a6c366bdd00abfe65982","modified":1656487982794},{"_id":"themes/zhaoo/source/lib/highlight/highlight.js","hash":"a52ef27b8a21963326b05ef06f6ee104b8b94e7e","modified":1656487982794},{"_id":"themes/zhaoo/source/lib/lazyload/lazyload.js","hash":"338318e930487b2791a7bcf53ad4601630cc41e2","modified":1656487982796},{"_id":"themes/zhaoo/source/lib/pjax/pjax.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1656487982797},{"_id":"themes/zhaoo/_example/source/galleries/深圳日记/index.md","hash":"ed9640b8192a9a9ce4771a33a8c2671d408fbb80","modified":1656487982721},{"_id":"themes/zhaoo/source/css/_pages/_archive/archive.styl","hash":"9a680e104a6418997e093303bb93f9097553d049","modified":1656487982773},{"_id":"themes/zhaoo/source/css/_pages/_category/categories.styl","hash":"66f983e15ebca02d95342d00234981fa6c04825d","modified":1656487982773},{"_id":"themes/zhaoo/source/lib/qrcode/qrcode.js","hash":"f424bd339870510d1160d1c5da5d698aedbb452e","modified":1656487982797},{"_id":"themes/zhaoo/source/css/_pages/_gallery/gallery.styl","hash":"4f1975a81247e226d63c50b9500278d969e6257a","modified":1656487982773},{"_id":"themes/zhaoo/source/css/_pages/_index/index.styl","hash":"3a69a450ec352b480a691521f85011659d136487","modified":1656487982773},{"_id":"themes/zhaoo/source/css/_pages/_post/article.styl","hash":"1a155390dc8f332dd324a7a0b057055d9d63ff33","modified":1656487982774},{"_id":"themes/zhaoo/source/css/_pages/_post/toc.styl","hash":"fc0c97ec7d9e98b79493cdd26452f4bb5defab08","modified":1656487982774},{"_id":"themes/zhaoo/source/css/_pages/_tag/tags.styl","hash":"0ca5f9f71dab35247cf3b1318b2995a7e9058426","modified":1656487982774},{"_id":"themes/zhaoo/source/css/_pages/_gallery/galleries.styl","hash":"4d520006b28d419732314eeefe13201562089a9a","modified":1656487982773},{"_id":"themes/zhaoo/_example/source/galleries/colorful/index.md","hash":"d825ba0a41ff7ef253356a14bac6bfaf02135435","modified":1656487982720},{"_id":"themes/zhaoo/_example/source/galleries/记事/index.md","hash":"487e5b5267f2a83fd35ce179a57e3d54e8e2b870","modified":1656487982721},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1656487982791},{"_id":"themes/zhaoo/source/lib/jquery/jquery.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1656487982795},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-4ce31ce804e18089a463534fb58657de_r.jpg","hash":"d93f233cd5f0d026411bdc0b5b8e29b55603b0ce","modified":1656486898688},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-75d460ab7530079a33c5ac39ddc80b2f_r.jpg","hash":"3a27d876c55f7dd96673b54cf64ccb26f8bd3da9","modified":1656486947628},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-aa65a52ba49b9ba47a6bc055a2b89119_r.jpg","hash":"67397d636e9f8394fc37dd3189e157be5c88071b","modified":1656487369068},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-acf8a38f633ebdcf1c4dc5b9b7add24a_b.jpg","hash":"1db861d93e2cfd162ef53e8dbbe998f59e350056","modified":1656414164970},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-bf7c3845bc95b2f6248d5ec8638ca4db_r.jpg","hash":"965975e25a2347fad8f6a293742292f37d22d255","modified":1656487324265},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-cd3734a8e6ad5dbdaca116a9c590defd_b.jpg","hash":"752ad73516599b50ed4a54a7cfa7f7ce8963fdb7","modified":1656413589427},{"_id":"themes/zhaoo/source/images/theme/cloud.png","hash":"fdf44a91026ad999dca2f0a42213aabebd783c98","modified":1656487982781},{"_id":"themes/zhaoo/source/images/theme/post-image.jpg","hash":"7fb1947508a411177829cedac8d5922671cac2b0","modified":1656487982782},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.js","hash":"266500948447c95aeea95ef6760f192afc96fd5e","modified":1656487982794},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-56164ef0695767475935c9e019c594ae_r.jpg","hash":"d09e5ed433580cfdb29f5acca9cfc93614c6640e","modified":1656412700082},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-9d2182c838803c99785ee0f2b4ba9a49_r.jpg","hash":"83853de49fc4e0d7f17cd5fc95fa6641149f4735","modified":1656413062439},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-240f2e71c37b622d4de5c41db2cb5e5c_r.jpg","hash":"9c58a68d3b5fa9f7fa706355e456dbfeaf520b15","modified":1656487335138},{"_id":"themes/zhaoo/screenshots/menu.png","hash":"0f4220734a52953636a5273d64a03c8b01ec6098","modified":1656487982757},{"_id":"themes/zhaoo/source/lib/lottie/lottie.js","hash":"35a3798d0f059f95c5d790eec56798ac10e07319","modified":1656487982797},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-8d6aaa767ec5f0dad922bb3cf11b3847_r.jpg","hash":"88281968a96d44ef574af4e14a109638aba10d72","modified":1656486910804},{"_id":"themes/zhaoo/source/images/theme/welcome-image.jpg","hash":"79e9c9e83a6d8a0bb627e645b770dd2628cd546e","modified":1656487982785},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-563cb95e76e6b83e7f5b482f1ca3b5fe_r.jpg","hash":"4950e7ef9412f8ce5dc9270e4865267158ea75c3","modified":1656412766615},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-ac396e3a473741f0c0fe5b7c8a9fb892_r.jpg","hash":"1c3edc640efe28bf8ef69cbad1dd20fc583e55ac","modified":1656412913543},{"_id":"themes/zhaoo/screenshots/galleries.png","hash":"8ba5a26c7932d5ef456cc799bbc00c5f468e54cc","modified":1656487982746},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-28a6bdd69aa23938639cdd44caeaa5e7_r.jpg","hash":"70fed67725498fc6a90fdde9350c5065e73b09f0","modified":1656412798594},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-5030587bac1b856d09e0a119ff6d7c04_r.jpg","hash":"2f754ebb3725a00900ec79ddb821d7dabb2d58d4","modified":1656412753266},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-6b2c132618806166903732e218dd7d3f_r.jpg","hash":"24eb750aeaa36a96456b93eacaa009352bfe7071","modified":1656486862896},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-7899b38ce0f87c5f36e8936b43921fb3_r.jpg","hash":"120a589c956102c8bac9cf183d1b135e0f0ee9f2","modified":1656412941683},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-a64d2a1cb3824d7778e2c92c21a94f0f_r.jpg","hash":"131eb144a5e9ec7ec9a21e65f514d4e1ab7aea0b","modified":1656487155567},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-0f4fa7b40ca783ef823c5636ef1da4b8_r.jpg","hash":"d9ac617adb31e5468787118545597f27f9652170","modified":1656486884493},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-d8b282ded29d1a9562e79ed12c0f308e_r.jpg","hash":"bc267b079033f2a2efa8b4997954bd2b9d8e06bf","modified":1656412923019},{"_id":"themes/zhaoo/source/lib/daovoice/daovoice.js","hash":"180375e6fc5a5a71810b5e83109c0ce1533bbc5a","modified":1656487982790},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-39f5c94ab44e795a12d294b5dfd73315_r.jpg","hash":"d67dcbd37c5796fe78909a22f2c08c5e6a449aa1","modified":1652172513058},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-9825cc425a12847d5d4b629e2c4aae63_r.jpg","hash":"f208578fe31557c28adda453dbbb2fc0319e4478","modified":1656487061016},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-900b181177291edc0037fcd67ec0c3b5_r.jpg","hash":"ae1a63d822815fa30831048cb4491b8031c4363a","modified":1656412959213},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-9db7bf3b825f2db103a534ca59c75481_r.jpg","hash":"bc429175802a6c46dda54f531892032806eaa69f","modified":1656486872907},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-b575517441b44bb1b035f775e58da0f0_r.jpg","hash":"990cc584819412ab48bcb4d5b5cd8898bdc0627e","modified":1656486878732},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-b4282dc1e2525f842061e77d9dd0c7b9_r.jpg","hash":"bd33271b053d3fa83c6ef17e5b9be1a83f1c85d1","modified":1656487069311},{"_id":"themes/zhaoo/screenshots/article.png","hash":"74706d28c479a20f77c1bd4454879cabf8784ca6","modified":1656487982742},{"_id":"themes/zhaoo/screenshots/index.png","hash":"a95df16106c813b92f14071bac3d38bc53a1bc00","modified":1656487982754},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-780e46650ff30bdbc695ad6419726975_r.jpg","hash":"ebf4992d0fd50697cec72f6b88329470160a48e8","modified":1656486890527},{"_id":"themes/zhaoo/screenshots/preview.png","hash":"2b4271a275b9ff8318d00ab04504a109ec931fe7","modified":1656487982767},{"_id":"themes/zhaoo/source/images/theme/壁纸/v2-2d757602df79fb323c615c85298e25b3_r.jpg","hash":"875a9671fac1d508bf4ce9c43beca22a62b90cd4","modified":1652172533249},{"_id":"themes/zhaoo/source/images/theme/img/v2-4ce31ce804e18089a463534fb58657de_r.jpg","hash":"d93f233cd5f0d026411bdc0b5b8e29b55603b0ce","modified":1656486898688},{"_id":"themes/zhaoo/source/images/theme/img/v2-75d460ab7530079a33c5ac39ddc80b2f_r.jpg","hash":"3a27d876c55f7dd96673b54cf64ccb26f8bd3da9","modified":1656486947628},{"_id":"themes/zhaoo/source/images/theme/img/v2-aa65a52ba49b9ba47a6bc055a2b89119_r.jpg","hash":"67397d636e9f8394fc37dd3189e157be5c88071b","modified":1656487369068},{"_id":"themes/zhaoo/source/images/theme/img/v2-acf8a38f633ebdcf1c4dc5b9b7add24a_b.jpg","hash":"1db861d93e2cfd162ef53e8dbbe998f59e350056","modified":1656414164970},{"_id":"themes/zhaoo/source/images/theme/img/v2-bf7c3845bc95b2f6248d5ec8638ca4db_r.jpg","hash":"965975e25a2347fad8f6a293742292f37d22d255","modified":1656487324265},{"_id":"themes/zhaoo/source/images/theme/img/v2-cd3734a8e6ad5dbdaca116a9c590defd_b.jpg","hash":"752ad73516599b50ed4a54a7cfa7f7ce8963fdb7","modified":1656413589427},{"_id":"themes/zhaoo/source/images/theme/img/v2-56164ef0695767475935c9e019c594ae_r.jpg","hash":"d09e5ed433580cfdb29f5acca9cfc93614c6640e","modified":1656412700082},{"_id":"themes/zhaoo/source/images/theme/img/v2-9d2182c838803c99785ee0f2b4ba9a49_r.jpg","hash":"83853de49fc4e0d7f17cd5fc95fa6641149f4735","modified":1656413062439},{"_id":"themes/zhaoo/source/images/theme/img/v2-240f2e71c37b622d4de5c41db2cb5e5c_r.jpg","hash":"9c58a68d3b5fa9f7fa706355e456dbfeaf520b15","modified":1656487335138},{"_id":"themes/zhaoo/source/images/theme/img/v2-8d6aaa767ec5f0dad922bb3cf11b3847_r.jpg","hash":"88281968a96d44ef574af4e14a109638aba10d72","modified":1656486910804},{"_id":"themes/zhaoo/source/images/theme/img/v2-563cb95e76e6b83e7f5b482f1ca3b5fe_r.jpg","hash":"4950e7ef9412f8ce5dc9270e4865267158ea75c3","modified":1656412766615},{"_id":"themes/zhaoo/source/images/theme/img/v2-ac396e3a473741f0c0fe5b7c8a9fb892_r.jpg","hash":"1c3edc640efe28bf8ef69cbad1dd20fc583e55ac","modified":1656412913543},{"_id":"themes/zhaoo/source/images/theme/img/v2-5030587bac1b856d09e0a119ff6d7c04_r.jpg","hash":"2f754ebb3725a00900ec79ddb821d7dabb2d58d4","modified":1656412753266},{"_id":"themes/zhaoo/source/images/theme/img/v2-6b2c132618806166903732e218dd7d3f_r.jpg","hash":"24eb750aeaa36a96456b93eacaa009352bfe7071","modified":1656486862896},{"_id":"themes/zhaoo/source/images/theme/img/v2-28a6bdd69aa23938639cdd44caeaa5e7_r.jpg","hash":"70fed67725498fc6a90fdde9350c5065e73b09f0","modified":1656412798594},{"_id":"themes/zhaoo/source/images/theme/img/v2-7899b38ce0f87c5f36e8936b43921fb3_r.jpg","hash":"120a589c956102c8bac9cf183d1b135e0f0ee9f2","modified":1656412941683},{"_id":"themes/zhaoo/source/images/theme/img/v2-a64d2a1cb3824d7778e2c92c21a94f0f_r.jpg","hash":"131eb144a5e9ec7ec9a21e65f514d4e1ab7aea0b","modified":1656487155567},{"_id":"themes/zhaoo/source/images/theme/img/v2-0f4fa7b40ca783ef823c5636ef1da4b8_r.jpg","hash":"d9ac617adb31e5468787118545597f27f9652170","modified":1656486884493},{"_id":"themes/zhaoo/source/images/theme/img/v2-d8b282ded29d1a9562e79ed12c0f308e_r.jpg","hash":"bc267b079033f2a2efa8b4997954bd2b9d8e06bf","modified":1656412923019},{"_id":"themes/zhaoo/source/images/theme/img/v2-900b181177291edc0037fcd67ec0c3b5_r.jpg","hash":"ae1a63d822815fa30831048cb4491b8031c4363a","modified":1656412959213},{"_id":"themes/zhaoo/source/images/theme/img/v2-9db7bf3b825f2db103a534ca59c75481_r.jpg","hash":"bc429175802a6c46dda54f531892032806eaa69f","modified":1656486872907},{"_id":"themes/zhaoo/source/images/theme/img/v2-9825cc425a12847d5d4b629e2c4aae63_r.jpg","hash":"f208578fe31557c28adda453dbbb2fc0319e4478","modified":1656487061016},{"_id":"themes/zhaoo/source/images/theme/img/v2-39f5c94ab44e795a12d294b5dfd73315_r.jpg","hash":"d67dcbd37c5796fe78909a22f2c08c5e6a449aa1","modified":1652172513058},{"_id":"themes/zhaoo/source/images/theme/img/v2-b575517441b44bb1b035f775e58da0f0_r.jpg","hash":"990cc584819412ab48bcb4d5b5cd8898bdc0627e","modified":1656486878732},{"_id":"themes/zhaoo/source/images/theme/img/v2-b4282dc1e2525f842061e77d9dd0c7b9_r.jpg","hash":"bd33271b053d3fa83c6ef17e5b9be1a83f1c85d1","modified":1656487069311},{"_id":"themes/zhaoo/source/images/theme/img/v2-780e46650ff30bdbc695ad6419726975_r.jpg","hash":"ebf4992d0fd50697cec72f6b88329470160a48e8","modified":1656486890527},{"_id":"themes/zhaoo/source/images/theme/img/v2-2d757602df79fb323c615c85298e25b3_r.jpg","hash":"875a9671fac1d508bf4ce9c43beca22a62b90cd4","modified":1652172533249},{"_id":"themes/ayer/.gitattributes","hash":"0a06233e35936dfb7efe1472917805056a159fa2","modified":1656411623704},{"_id":"themes/ayer/.gitignore","hash":"b18b650c857471724778c1450c446b93192d8b0e","modified":1656411623706},{"_id":"themes/ayer/.npmignore","hash":"1744752b89ad4271612ff0a03232ed56484e592c","modified":1656411623706},{"_id":"themes/ayer/.stylintrc","hash":"557d72b4dcd86e66fc5c688595288cf06b12ce6c","modified":1656411623706},{"_id":"themes/ayer/.travis.yml","hash":"e8e8c5607528fd55ac11dde00b6186d3ea52fdef","modified":1656411623706},{"_id":"themes/ayer/LICENSE","hash":"e39066a824465f4d6ad5ce7903b4d683d38d2b6c","modified":1656411623706},{"_id":"themes/ayer/README.md","hash":"4e515889ec444939e9a06947fae120503a3fa7b2","modified":1656411623706},{"_id":"themes/ayer/_config.yml","hash":"0f38c378bf326b2ea197b806c5df974a3faf0b34","modified":1656489490707},{"_id":"themes/ayer/index.js","hash":"19292aa9df268dbab8ac51a2a3aa7a20ac1eb00a","modified":1656411623707},{"_id":"themes/ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1656411623718},{"_id":"themes/ayer/move_config.js","hash":"e310bdb9a8738e506e53a40bd3cd895008d4cd61","modified":1656411623718},{"_id":"themes/ayer/package.json","hash":"5424c8abe79bf3dde54dfbf64f6814b31379f97b","modified":1656411623719},{"_id":"themes/ayer/rollup.config.js","hash":"13b61821acd9fc27131a34853037184b94ae8577","modified":1656411623719},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"186f05c1b9509a4ad957490004ff37462aedd984","modified":1656411623704},{"_id":"themes/ayer/.github/config.yml","hash":"0300d3458011582f8158a3588912dac4cb3ec21a","modified":1656411623705},{"_id":"themes/ayer/languages/de.yml","hash":"cdeed93d1eb4e65195aaf97d8c517e97106ddfd5","modified":1656411623707},{"_id":"themes/ayer/languages/default.yml","hash":"7e16c460c2c3d953c3bdebdef471ea747812b7a1","modified":1656411623707},{"_id":"themes/ayer/languages/en.yml","hash":"7e16c460c2c3d953c3bdebdef471ea747812b7a1","modified":1656411623707},{"_id":"themes/ayer/languages/es.yml","hash":"a3e8d81b99f62f86b3f34708253070b8806b31c8","modified":1656411623707},{"_id":"themes/ayer/languages/ja.yml","hash":"d2ccb7ac8c9ff2ee721843741bb30b019d0a8083","modified":1656411623708},{"_id":"themes/ayer/languages/fr.yml","hash":"4a3cb84884988624943c6b0f8c1754da34943092","modified":1656411623707},{"_id":"themes/ayer/languages/ko.yml","hash":"7dc54c2db864e5b725b55e201030e92acc1c422e","modified":1656411623708},{"_id":"themes/ayer/languages/nl.yml","hash":"2c289e97000c0c67636d96895aaa801c8abec0d4","modified":1656411623708},{"_id":"themes/ayer/languages/no.yml","hash":"f8d7294f0d73ec35c37c050462cb725ea25a0fcc","modified":1656411623708},{"_id":"themes/ayer/languages/pt.yml","hash":"b137b9aead0dc4e2c2d9217ceb270460e41f5cb3","modified":1656411623708},{"_id":"themes/ayer/languages/ru.yml","hash":"cdce73598db1aefb17b1c91658cfa4c906b98e24","modified":1656411623708},{"_id":"themes/ayer/languages/vi.yml","hash":"7d019ee795816a6a030a039d8238b71be04098fd","modified":1656411623708},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"68400b1859e58cba03b05020ac8f47b807933027","modified":1656411623708},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"edb2654bdb684fe0f21e8d6c841496c3506006ed","modified":1656411623709},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1656411623715},{"_id":"themes/ayer/layout/categories.ejs","hash":"c40f84aacdf7d33cfcb4eb9f78f331dad699abff","modified":1656411623715},{"_id":"themes/ayer/layout/friends.ejs","hash":"18382cd4429588e58bf046beacaed06704832fe3","modified":1656411623716},{"_id":"themes/ayer/layout/index.ejs","hash":"77347cbb8635611d8b1fb84bde75f9dedaf8632d","modified":1656411623716},{"_id":"themes/ayer/layout/layout.ejs","hash":"84864bd6b4fc92bdd0a8ccba491fe490a8ecbf9b","modified":1656411623716},{"_id":"themes/ayer/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1656411623716},{"_id":"themes/ayer/layout/plain-page.ejs","hash":"39cce1936f5f0e2feb924a7af2f52a631d81b84f","modified":1656411623716},{"_id":"themes/ayer/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1656411623717},{"_id":"themes/ayer/layout/tags.ejs","hash":"88b34dd8d7b1e64fa27aa6ed72af996cf6700809","modified":1656411623717},{"_id":"themes/ayer/.DS_Store","hash":"581e48e96ee871c6fae1be5d707eee8c6a1b65b7","modified":1656488143953},{"_id":"themes/ayer/scripts/default_config.js","hash":"70d6ee032d75410d540b6789b5949739a47f0125","modified":1656411623721},{"_id":"themes/ayer/source/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1656411623729},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1656411623743},{"_id":"themes/ayer/source-src/main.js","hash":"13c57a2cec878217a5a3ee9afb6705d4c3cc0d3c","modified":1656411623729},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/bug-report.md","hash":"4be6c40d386582293bcabf96321277238db57a51","modified":1656411623705},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/feature-request.md","hash":"d8d4951f5f3f08660dc4ba6d1a44eb56d3b094b4","modified":1656411623705},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/other.md","hash":"94ee4baf54bfa786228aafc0f2f8c17076a99a0b","modified":1656411623705},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/question.md","hash":"6cb78a96b83ed228fb3c956f2dbc654220335ec0","modified":1656411623705},{"_id":"themes/ayer/source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1656413314718},{"_id":"themes/ayer/.github/workflows/npmpublish.yml","hash":"3ff1b124e532465ba14475f3ea8f4ec5d8856028","modified":1656411623705},{"_id":"themes/ayer/layout/_partial/ads.ejs","hash":"d36962c66e3653aa94cc428731dd43a7ea4f979d","modified":1656411623709},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"17ccda6fb61f1b6df94d23db936665c00a29a85b","modified":1656411623709},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"9be7173badcca6582c1136204adb3aa432aada21","modified":1656411623709},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"a56c8905987fa86657a9f081a89c12e5a5a5df54","modified":1656411623709},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"41a2f132410c77891cc8117062a0700d8ed64bb9","modified":1656411623710},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"01ca257dde90dcadf1288a641401f6cf21a0ad43","modified":1656411623710},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1656411623710},{"_id":"themes/ayer/layout/_partial/broadcast.ejs","hash":"c228fa93bcf2f8403729342854211ea976df9a9f","modified":1656411623710},{"_id":"themes/ayer/layout/_partial/float-btns.ejs","hash":"43ba0cd1f9e898bcbd873b1e9a2d47249d6aaf77","modified":1656411623710},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"1407c1043fdb628642de9d2990921d92a3c2f078","modified":1656411623710},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"ca81abe75c80ab32d6b6c4fe65de8e74df07bef3","modified":1656411623711},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"61100fe248a744fab5dc71fb610992cbeff27e54","modified":1656411623711},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"752666b28d5caed5e7d82d697d7546461e451d6f","modified":1656411623711},{"_id":"themes/ayer/layout/_partial/lock.ejs","hash":"bbb00715c204197e7790d08be9a29afe5976146e","modified":1656411623711},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"d38a59e2316b8a9c233c2f41edc2a03eab2c0a2e","modified":1656411623711},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"cf441365eff1f8143e3c9ae54954d0ebe0a358e5","modified":1656411623711},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"cde5caf73f120b1300ec7539bbf675597688c734","modified":1656411623712},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"e3b411aef6e5f25f6c5c66b93d653ef70da8d4af","modified":1656411623715},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"7bcde0d6384819fd4c975a6e6e24e0919fbb1593","modified":1656411623715},{"_id":"themes/ayer/scripts/events/index.js","hash":"2c84d99e881f5cd1ee8a406b595a4365f3aea41e","modified":1656411623721},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e435b782178da75656f9616c7af564fb9ff0de50","modified":1656411623722},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"58f4c93d22e4eb9743915223444335fb6fe06d21","modified":1656411623722},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"7b3df58faaa875d17afbf74ddef5601116f2ce3d","modified":1656411623722},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"f9c8fceb2130929b8f11e22b1c3476c99d1574a8","modified":1656411623722},{"_id":"themes/ayer/scripts/lib/core.js","hash":"7908a82a86d63f35c6f785cacb1cfaf99ae7e0f9","modified":1656411623722},{"_id":"themes/ayer/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1656411623723},{"_id":"themes/ayer/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1656411623723},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"017f9b628806eeb199da2e77485cd9ac8e2117b3","modified":1656411623729},{"_id":"themes/ayer/source/css/custom.styl","hash":"56276abe6cd7cbf49fbf4fd4c986733188374160","modified":1656411623730},{"_id":"themes/ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1656411623742},{"_id":"themes/ayer/source/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1656411623742},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1656411623744},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1656411623745},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1656411623746},{"_id":"themes/ayer/source/images/.DS_Store","hash":"ef6c72b74c62be9e7b293b70bd98fd9dee827846","modified":1656488149886},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1656411623746},{"_id":"themes/ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1656411623746},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1656411623761},{"_id":"themes/ayer/source/images/forkme.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1656411623762},{"_id":"themes/ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1656411623761},{"_id":"themes/ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1656411623762},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1656411623762},{"_id":"themes/ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1656411623762},{"_id":"themes/ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1656411623762},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1656411623762},{"_id":"themes/ayer/source/images/forkme—bak.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1656411623761},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1656411623763},{"_id":"themes/ayer/source/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1656411623763},{"_id":"themes/ayer/source/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1656411623763},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1656411623764},{"_id":"themes/ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1656411623764},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1656411623765},{"_id":"themes/ayer/source/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1656411623765},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1656411623765},{"_id":"themes/ayer/source-src/css/_darkmode.styl","hash":"219753a5cf40cfbd557fbde01a71f589e6de4327","modified":1656411623723},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"8dedef428b6ac7d629e1d1f6039b0f60dacc4c5e","modified":1656411623723},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"6959409df2dd0a1ca05be0c0e9b2a884efdfb82d","modified":1656411623723},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"630e719b9e805a26182a37152435d4787c0f1734","modified":1656411623723},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"ce395318edf69766fe11161c4587a97f84521d85","modified":1656411623728},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"910dd0682971a616e1610daec23e7ff5a556df98","modified":1656411623728},{"_id":"themes/ayer/source-src/css/style.styl","hash":"3941939bdb95297488d19e3e3716d5925b6eed44","modified":1656411623728},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"538d48e89c9908155f16ff82aaf4c2b1122b11f4","modified":1656411623729},{"_id":"themes/ayer/source-src/js/share.js","hash":"7edce2efe23e75e29765201dc8b00fd2a5b5c9d2","modified":1656411623729},{"_id":"themes/ayer/scripts/events/lib/hello.js","hash":"2ed130e5e1c2bc021be8d755f34c4fcf61a60121","modified":1656411623721},{"_id":"themes/ayer/scripts/events/lib/merge-configs.js","hash":"54836a1b41ebb32acc41839f53e1892779f66bb2","modified":1656411623722},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"cfb16c9dda7a609776a28702e0c3854a52e422a7","modified":1656411623712},{"_id":"themes/ayer/layout/_partial/post/author.ejs","hash":"57738b222e00bbd110be65d300d8bed34d73b3ea","modified":1656411623712},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"4647234e5c4529d754c9d0fc53ca9e9205f21443","modified":1656411623712},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1656411623712},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"9f86e3d222555181a3e631a09bcdabdd44507cb8","modified":1656411623712},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1656411623713},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"5f8487fe7bed9a09001c6655244ff35f583cf1eb","modified":1656411623713},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"bc540478d35780e142b069ba2adafd5d5ce8a7b0","modified":1656411623713},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"4a21fd3d7335ffcd0661036fee81a927c125e2e2","modified":1656411623713},{"_id":"themes/ayer/layout/_partial/post/minivaline.ejs","hash":"41de9084eedcbba1403897c4aa01ced0cb6b9ba5","modified":1656411623713},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"e59198918e92ef92156aeefbf6023584ac1cae64","modified":1656411623714},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1656411623714},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"0a364766931f48df60b7c92fec8fde1067a93e00","modified":1656411623714},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1656411623714},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"3b076a65b9847cd6e0d424f5c2874046ef51d4d9","modified":1656411623714},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"9898b0dd9237e21908ba40292a8a9f947bed44d2","modified":1656411623714},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"fea793e132f627a8148059a9aee8bc33550506d1","modified":1656411623715},{"_id":"themes/ayer/layout/_partial/post/twikoo.ejs","hash":"63bc5c056b2db2aca479705fc94eaa7fd26a7976","modified":1656411623715},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"369396d0c5b669df7a26df95f7a1b8a52f4eea65","modified":1656411623715},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"4b8e8455709debd73fba6bf3aad63378c4156dc1","modified":1656411623715},{"_id":"themes/ayer/source-src/css/_partial/ads.styl","hash":"d4be39f60a81dd0e5bdd49671e7308deddc572de","modified":1656411623724},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1656411623724},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"e06dce604cc58ec39d677e4e59910c2725684901","modified":1656411623724},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"3044bf059522e79a726265c9a2f603ec8dc4222d","modified":1656411623724},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"94342884feac98e5ef58c9bd2781fc8f35220c1c","modified":1656411623724},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"39a0bc6c5cf85f0527d6ee81f6feebce8550c1dd","modified":1656411623724},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"712cb4d8f3cef18dc33281bd8e9b6879efdb1687","modified":1656411623724},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"3b11d0c6c4439b0856ba81c50bd8867d5bb081da","modified":1656411623725},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1656411623725},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"1a4576c38ef19834a4d0a8ac887e7b55d21f2f13","modified":1656411623725},{"_id":"themes/ayer/source-src/css/_partial/friends.styl","hash":"9dd116846c92daee1c8f80b79cab231613b164b2","modified":1656411623725},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1656411623725},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1656411623725},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"e894b3a1aff76e84137e1e6db59a75afd0a53f52","modified":1656411623725},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"f2f43ae9831c3df017b35c68caa94f5eb911f697","modified":1656411623726},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"b81d13334cf39941792dff0e3af393fb7b8cc214","modified":1656411623726},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"da8a82a48852411c10e279dfee43038d46f4f273","modified":1656411623726},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1656411623726},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"da34b6125de01938d11de6ad3c0fed2c75faf40a","modified":1656411623726},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bde7bf3577c66a3ac829410d52fa2144212282ef","modified":1656411623726},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"a8a069ea34a0fd043832890db5341405e9f462cd","modified":1656411623727},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"f81076fc6d4a83be3371bcb79ab54d88e2605714","modified":1656411623727},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"9ce2dd3ffdc4e170dfcb975a7158f913bc40b8d8","modified":1656411623727},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1656411623727},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"87df748185edfba222c3f9a4b9ef8eee0e8e5ad3","modified":1656411623728},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"007bca390ec685349add74e033ff2cb90a1701bc","modified":1656411623728},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"9e9d8dc167ed2c332e4520cbf41244c34c1ebf64","modified":1656411623728},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1656411623745},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1656411623749},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1656411623763},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1656411623764},{"_id":"themes/ayer/source/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1656411623730},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1656411623740},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1656411623741},{"_id":"themes/ayer/source/images/img/v2-75d460ab7530079a33c5ac39ddc80b2f_r.jpg","hash":"3a27d876c55f7dd96673b54cf64ccb26f8bd3da9","modified":1656488787676},{"_id":"themes/ayer/source/images/img/v2-aa65a52ba49b9ba47a6bc055a2b89119_r.jpg","hash":"67397d636e9f8394fc37dd3189e157be5c88071b","modified":1656488787711},{"_id":"themes/ayer/source/images/img/v2-acf8a38f633ebdcf1c4dc5b9b7add24a_b.jpg","hash":"1db861d93e2cfd162ef53e8dbbe998f59e350056","modified":1656488787715},{"_id":"themes/ayer/source/images/img/v2-bf7c3845bc95b2f6248d5ec8638ca4db_r.jpg","hash":"965975e25a2347fad8f6a293742292f37d22d255","modified":1656488787728},{"_id":"themes/ayer/source/images/img/v2-cd3734a8e6ad5dbdaca116a9c590defd_b.jpg","hash":"752ad73516599b50ed4a54a7cfa7f7ce8963fdb7","modified":1656488787729},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1656411623761},{"_id":"themes/ayer/source/images/img/v2-4ce31ce804e18089a463534fb58657de_r.jpg","hash":"d93f233cd5f0d026411bdc0b5b8e29b55603b0ce","modified":1656488787658},{"_id":"themes/ayer/source/images/tx.jpg","hash":"752ad73516599b50ed4a54a7cfa7f7ce8963fdb7","modified":1656413589427},{"_id":"themes/ayer/source/images/tx2.jpg","hash":"1db861d93e2cfd162ef53e8dbbe998f59e350056","modified":1656414164970},{"_id":"themes/ayer/source/images/img/v2-56164ef0695767475935c9e019c594ae_r.jpg","hash":"d09e5ed433580cfdb29f5acca9cfc93614c6640e","modified":1656488787668},{"_id":"themes/ayer/source/images/img/v2-9d2182c838803c99785ee0f2b4ba9a49_r.jpg","hash":"83853de49fc4e0d7f17cd5fc95fa6641149f4735","modified":1656488787698},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1656411623721},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1656411623748},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1656411623750},{"_id":"themes/ayer/source/images/img/v2-240f2e71c37b622d4de5c41db2cb5e5c_r.jpg","hash":"9c58a68d3b5fa9f7fa706355e456dbfeaf520b15","modified":1656488787637},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1656411623740},{"_id":"themes/ayer/source/images/img/v2-8d6aaa767ec5f0dad922bb3cf11b3847_r.jpg","hash":"88281968a96d44ef574af4e14a109638aba10d72","modified":1656488787689},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1656411623733},{"_id":"themes/ayer/source/images/cover10.jpg","hash":"1c3edc640efe28bf8ef69cbad1dd20fc583e55ac","modified":1656412913543},{"_id":"themes/ayer/source/images/img/v2-563cb95e76e6b83e7f5b482f1ca3b5fe_r.jpg","hash":"4950e7ef9412f8ce5dc9270e4865267158ea75c3","modified":1656488787673},{"_id":"themes/ayer/source/images/img/v2-ac396e3a473741f0c0fe5b7c8a9fb892_r.jpg","hash":"1c3edc640efe28bf8ef69cbad1dd20fc583e55ac","modified":1656488787712},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1656411623755},{"_id":"themes/ayer/source/images/cover9.jpg","hash":"120a589c956102c8bac9cf183d1b135e0f0ee9f2","modified":1656412941683},{"_id":"themes/ayer/source/images/img/v2-28a6bdd69aa23938639cdd44caeaa5e7_r.jpg","hash":"70fed67725498fc6a90fdde9350c5065e73b09f0","modified":1656488787642},{"_id":"themes/ayer/source/images/img/v2-6b2c132618806166903732e218dd7d3f_r.jpg","hash":"24eb750aeaa36a96456b93eacaa009352bfe7071","modified":1656488787675},{"_id":"themes/ayer/source/images/img/v2-7899b38ce0f87c5f36e8936b43921fb3_r.jpg","hash":"120a589c956102c8bac9cf183d1b135e0f0ee9f2","modified":1656488787688},{"_id":"themes/ayer/source/images/img/v2-5030587bac1b856d09e0a119ff6d7c04_r.jpg","hash":"2f754ebb3725a00900ec79ddb821d7dabb2d58d4","modified":1656488787663},{"_id":"themes/ayer/source/images/img/v2-a64d2a1cb3824d7778e2c92c21a94f0f_r.jpg","hash":"131eb144a5e9ec7ec9a21e65f514d4e1ab7aea0b","modified":1656488787710},{"_id":"themes/ayer/source/images/cover11.jpg","hash":"bc267b079033f2a2efa8b4997954bd2b9d8e06bf","modified":1656412923019},{"_id":"themes/ayer/source/images/img/v2-d8b282ded29d1a9562e79ed12c0f308e_r.jpg","hash":"bc267b079033f2a2efa8b4997954bd2b9d8e06bf","modified":1656488787734},{"_id":"themes/ayer/source/images/img/v2-900b181177291edc0037fcd67ec0c3b5_r.jpg","hash":"ae1a63d822815fa30831048cb4491b8031c4363a","modified":1656488787695},{"_id":"themes/ayer/source/images/img/v2-9825cc425a12847d5d4b629e2c4aae63_r.jpg","hash":"f208578fe31557c28adda453dbbb2fc0319e4478","modified":1656488787697},{"_id":"themes/ayer/source/images/img/v2-9db7bf3b825f2db103a534ca59c75481_r.jpg","hash":"bc429175802a6c46dda54f531892032806eaa69f","modified":1656488787704},{"_id":"themes/ayer/source/images/img/v2-b575517441b44bb1b035f775e58da0f0_r.jpg","hash":"990cc584819412ab48bcb4d5b5cd8898bdc0627e","modified":1656488787725},{"_id":"themes/ayer/source/images/img/v2-39f5c94ab44e795a12d294b5dfd73315_r.jpg","hash":"d67dcbd37c5796fe78909a22f2c08c5e6a449aa1","modified":1656488787656},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1656411623760},{"_id":"themes/ayer/source/images/img/v2-b4282dc1e2525f842061e77d9dd0c7b9_r.jpg","hash":"bd33271b053d3fa83c6ef17e5b9be1a83f1c85d1","modified":1656488787721},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1656411623738},{"_id":"themes/ayer/source/images/img/v2-780e46650ff30bdbc695ad6419726975_r.jpg","hash":"ebf4992d0fd50697cec72f6b88329470160a48e8","modified":1656488787682},{"_id":"themes/ayer/source/images/img/v2-0f4fa7b40ca783ef823c5636ef1da4b8_r.jpg","hash":"d9ac617adb31e5468787118545597f27f9652170","modified":1656488787635},{"_id":"themes/ayer/source/images/v2-e0015a8502764bd488ef7aac671cf11d_r.jpg","hash":"69589126908a91fd43610d50c0a9db09f63db04a","modified":1656487195703},{"_id":"themes/ayer/source/images/cover8.jpg","hash":"9064f5e27b731920eb9304bd04acb98f02f0b494","modified":1656413076439},{"_id":"themes/ayer/source/images/img/v2-2d757602df79fb323c615c85298e25b3_r.jpg","hash":"875a9671fac1d508bf4ce9c43beca22a62b90cd4","modified":1656488787649},{"_id":"themes/ayer/source/images/cover13.jpg","hash":"67397d636e9f8394fc37dd3189e157be5c88071b","modified":1656489012095},{"_id":"themes/ayer/source/images/cover12.jpg","hash":"9c58a68d3b5fa9f7fa706355e456dbfeaf520b15","modified":1656488916655},{"_id":"source/_posts/js.md","hash":"48db871cf74a3fdc256f751c22c79786b05d1f18","modified":1656490658170}],"Category":[{"name":"js","_id":"cl4zd66ag0003d3x64anyftru"}],"Data":[],"Page":[],"Post":[{"title":"JavaScript -函数","_content":"\n## 函数\n\n**概念**：\n\n将任意多条代码组装在一起，可以在任何地方经过任意多次的**调用执行**，多次组装在一起的代码需要通过 关键字**function**来定义\n<!--more-->\n```javascript\n- 变量是通过 var 来定义的\n- 函数是通过 function 拉定义的\n程序是通过一行一行的语句来组成的，语句是组成代码最基本的单位，同时这些基本单位，我们也可以把它组合在一起分成一个一个的小模块，将这些语句分成一个一个小模块的功能，我们叫方法\n```\n\n---\n\n#### 定义函数的方式\n\n##### 通过关键字 function 定义\n\n函数定义需要通过关键字 function，定义的语法格式如下：\n```javascript\nfunction 方法名(参数1，参数2....){\n    // 代码体\n}\nfunction a(参数1，参数2){\n    // 代码体\n}\n//----------------------\n通过上面的语法格式，我们可以自己尝试着去定义一个方法\n\nfunction sayHello(a,b){\n    console.log('世界，你好');\n}\ntypeof sayHello; // 类型结果为“function”\n\n```\n\n代码分析：\n1. function 是定义方法的关键字\n2. sayHello 则是这个方法的名字\n3. a 和 b 是方法的参数\n4. 花括号里面的东西就是代码体\n\n##### 通过函数表达式来定义\n\n我们知道所有变量的定义都使用关键字 var 来进行， var 定义的变量后面跟什么数据，这个变量就是什么数据类型，比如：\n```javascript\nvar a=\"hello\";   //string类型\nvar b=123;  \t //number类型\nvar c=true;      //Boolean\nvar d=null;      //object\nvar f=undefined; //undefined;\n//我们给什么样的值，它就是一个什么类型\n\n//---------------------------\n如果给一个变量赋值成一个function，是什么样子？\n\nvar sayHello = function(参数1,参数2...){\n    // 代码体\n}\ntypeof sayHello; // function\n```\n\n代码分析：\n1. 所有变量的定义，我们都可以使用 var 来进行，变量后面跟什么数据 ，它就是什么类型\n2. sayHello 后面根的是一个 function，所以 sayHello 它应该是一个 方法\n\n##### 通过 Function 来进行定义\n\n> 小写的 function 是关键字，大字的 Function 是系统自已定义了方法\n```javascript\nvar sayHello = new Function();\ntypeof sayHello;   //function\n\n// 这一种方式不建议大家去使用，它的使用场景是在后期方法动态创建里面\n```\n\n_三种定义函数的方式我们都要接触了解，但是在日常工作当中，你们所经常使用的方式就是第一种与第二种情况_\n\n**思考**：既然我们在工作当中经常会使用到第一种与第二种的情况，那么请各位同学注意，第一种情况的定义与第二种情况的定义有啥区别？\n```javascript\nsayHello2();    //这一句代码它不会报\nsayHello1();    //这一句代码会报错\n\nvar sayHello1=function(){\n    console.log(\"hello world\");\n}\nfunction sayHello2(){\n    console.log(\"吃了没，世界\");\n}\n\n1.function 关键字定义的方法可以在调用之前调用（任何地方，前后都行）\n2.var 定义的方法只能在定义的代码之后去调用（执行上下文）\n\n// 建议大家前期先用第一种，也就是function定义的方式\n```\n\n---\n\n#### 函数的代码体，会形成作用域\n\n用 var 定义的变量没有作用域，但是定义在 function 的花括号里面的代码，它是有作用域的\n```javascript\nfunction a(){\n    // userName定义到了方法里面，所以它是有作用域的\n    // 它的作用域是方法的花括号开始 ，到方法的花括号结束\n    var userName = \"天天\";\n    //在作用域的范围里面，我们可以随意的调用变量，但是一旦出了这个花括号 ，就不行了\n}\nconsole.log(userName); // 报错，提示 userName 没有被定义\n```\n**总结**：方法体里面定义的东西在方法体外边是不能够被使用的，如果真的要使用，可以使用后面我们学习的一另一个关键字 return\n\n**终上所述**：如果你希望变量既能够在方法里面使用，也能够在方法外边使用，那么你就定义到方法的外边，如果你仅仅只是希望这个变量在方法里面使用，而不希望它在方法外边使用，则把它定义在方法的里面\n\n我们一般把定义在方法里面的变量叫**局部变量**\n\n把定义在方法外边的变量叫**全局变量**\n\n---\n\n#### 方法的调用\n\n方法（函数）通过上面的三种方式定义好了以后，你不调用它，它就不会执行，因为方法是调用执行的\n\n那么方法到底应该怎么调用呢？？？\n\n> 方法的调用其实指的就是把之前写在 function 花括号里面的代码执行一次\n\n##### 常规调用\n\n这一种方式是最基本的调用方式，当一个方法定义好了以后就会存在一个方法名，我们的常规调用就是通过这一个方法名来进行调用\n\n```javascript\n方法名();\n//它的调用方式就是方法名加()\n\n//-------------------------\n在这种方式里面，我们的调用是需要通过方法名来进行的（ 在调用方法的时候，我们可以给方法的参数赋值，这个赋值过程 ，我们叫传参）\n\nfunction sayHello(){\n    console.log(\"大家好才是真的好\");\n}\n//现在我们已经在上面的代码时面定义了一个方法，如果我们不去调用它，那么它就永远不会执行，现在我们通过普通的方式去调用它\nsayHello();   //调用方法，直接执行方法里面的代码\n```\n\n##### 立即执行函数\n\n在某些时间，如果我们希望定义好了这些方法以后立即的执行一次，怎么办呢，这个时候，我们可以使用到立即执行函数\n\n```javascript\n//定义方法\nfunction sayHello(){\n    console.log(\"大家好\");\n}\n//调用方法执行\nsayHello();\n\n在上面的代码里面， 我们可以看到之前已经定义好了一个方法，它的名子叫sayHello，然后我们又马上调用了它\n\n像这样一种情况，在后期工作的时候如果碰到了，我们可以使用立即执行函数\n//------------------------\n+ function sayHello(){\n    console.log('大家好');\n}();\n```\n\n**代码分析**：\n\n上面的代码通过 function 关键字定义好了 sayHello 方法以后，它在这个地方前面加了一个 + , 后面又添加上了一个()这个时候，碰到这种情况，大家要知道，这是一个立即执行函数，它定义好以方法以后，会立即执行一次\n\n##### 函数表达式执行\n\n```javascript\nvar sayHello=function(){\n    console.log(\"大家好\");\n}\nsayHello();\n\n// 上面的代码同步与下面的代码\n\nvar sayHello=function(){\n    console.log(\"大家好\");\n}();\n```\n\n**我们把上面的三种情况的调用归为第一大类情况，他们的调用最终都是需要去加括号的**\n\n---\n\n#### 函数的参数\n\n```javascript\n//我们在使用function定义方法的时候，除了定义方法名，还可以使用参数\n\nfunction 方法名(参数1,参数2.....){\n   //代码体\n}\n方法名(参数1,参数2.....)\n```\n- 定义方法的参数，可以理解成变量\n- 定义参数的时候，我们可以把它当成是一个变量，但是，我们不能够再去使用 var 关键字了\n```javascript\nfunction sayHello(userName){\n    console.log(userName)\n}\n\n代码分析：\n    在上面的代码里面，我们通过function关键字定义了一个方法名为sayHello的方法，\n    同时我们也看到后面的括号里面有userName,我们叫参数，\n    你可以理解为，它就相当于在function里面定义的变量\n\n    sayHello(); // undefined ，因为我们在调用方法的时候，如果方法需要参数，我们在调用的过程中给他参数\n\n    sayHello('天天');\n\n    //-----------------------------------\n\n    上面的调用过程首先是先调用了方法sayHello，然后在调用的时候，还给之前定义的参数userName赋值为“天天”\n\n    在调用方法的时候，值会赋值给参数，这个赋值的过程我们叫传参\n```\n\n##### a.形式参数\n\n形式参数简称“形参”,指的是方法在定义的过程当中所使用（所出现）的参数\n\n形参默认是没有值的，它的值默认情况下是 undefined\n\n形参可以理解成变量，它的作用域只能在方法里面，不能在方法外边\n\n##### b.实际参数\n\n实际参数简称“实参”，指的是方法调用的时候里面的的真实参数（真实数据）\n\n**重要**：值是由实参赋值给形参（也可以理解为值是由实参传递给形参）\n\n##### c.实参与形参的对应关系\n\n```javascript\nfunction add(a,b){\n    console.log(a);\n    console.log(b);\n}\nadd(10,20);\n\n// 在上面的代码里面，我们在定义方法的时候，定义了两个形参，在调用方法的时候，我们给了两个实参\n```\n\n##### 思考：\n\n​现在有如下三种情况，请同学们判断如何进行\n```javascript\nfunction add(a, b) {\n\tconsole.log(a);\n\tconsole.log(b);\n}\n```\n1. 当实参与形参个数相同的时候\n```javascript\nadd(10, 20);\n//当实参与形参相同的时候，它们可以实现一一对应的关系，这个时候的a为10,b为20\n```\n2.  当实参小于形参个数的时候\n```javascript\nadd(10);\n//当实参个数小于形参个数的时候，前面的值实现一一对应，后面多出来的形参的值为undefined;\n```\n3.  当实参个数大于形参个数的时候\n```javascript\nadd(10, 20, 30);\n//前面的值实参与形参可以实现一一对应的效果，多出来的值如果需要获取 ，可以找arguments, 因为当前方法所接收到的所有实参的值都在arguments这个类数组里面\n```\n\n---\n\n#### arguments 参数集合\n\n在所有的 function 里面，有一个隐藏的内置的对象 ，这个对象是**当前方法所接收到的参数集合，也就是实参的集合**，它就是**arguments**\n\narguments 仅仅只作用在方法的内部 ，出了方法以后就不能使用\n\narguments 它是一个**类数组**\n\n**类数组**：\n具备数组特性（通过索引取值，通过 length 确定长度），但不具备数组的方法的集合，Array.isArray(类数组) 得到的结果为 false\n\n```javascript\nfunction add(a, b){\n    console.log(a);\n    console.log(b);\n    // 在每个方法方法的内部 ，它都有一个隐藏的内置对象 arguments，它包含了当前方法所接收到的参数\n    console.log(arguments);\n}\nadd(10,20);\n```\n\n在上面的代码里面，我们通过**add(10,20)** 这种方式来调用了方法，并向方向里面传递了两个参数。这个时候 a 代表的就是 10，b 代表的就是 20\n\n同时，我们也可以看到在方法内部 的 arguments 对象里面，它也保存了此次传递进去的 2 个实参\n\n**小案例**：请编写一个方法，实现多个数的相加，然后打印输出结果\n\n```javascript\nfunction add(){\n    //arguments代表所接收到的所有实参\n    //现在只需要将这些实参一个一个的加起来就可以了\n    //arguments它是一个类数组，它具备数组的特性，索引取值，length代表长度\n    var sum=0;\n    for(var i=0;i<arguments.length;i++){\n        //sum=sum+arguments[i];\n        sum+=arguments[i];\n    }\n    console.log(sum);\n}\n\nadd(40,34);\n```\n\n---\n\n#### 方法的返回值\n\n一个方法经过调用执行完毕以后，它可以通过关键字 return 向外部返回一个值，这个值，我们可以通过变量把它接收到\n\n```javascript\nfunction eat(){\n    console.log('我在吃饭');\n}\n\nfunction buy(){\n    console.log('我在超市');\n    console.log('寻找商品');\n    return \"糖果\";\n}\n\nvar a = eat();\nvar b = buy();\nconsole.log(a, b); // undefined \"糖果\"\n// 调用eat的时候，方法没有返回值，所以a得到的是 undefined\n// 调用buy的时候，return了一个“糖果”，所以b接受到的值就是“糖果”\n```\n\n##### 所有的方法都有返回值\n\n1. JS 无需指定函数的返回值，因为 JS 可以在函数内部的任何地方返回任何类型的值\n2. 如果 JS 没有通过 return 语句返回值 ，那么默认返回的就是 undefined;\n```javascript\nfunction a(){\n    return 1+1;\n}\n\nfunction b(){\n\n}\n\nfunction c(){\n    var x=1;\n    return x;\n    x=2;\n}\nvar str=a();   //2\n\nvar str1=b();  //undefined;\n\nvar str2=c();  //1\n\n//--------------------------\n方法在调用的过程当中，如果我们需要接收方法的返回值（ 也就是return的值），可以使用一个变量去接收\n\nvar 变量名=方法名();\n//这样整个方法调用结束以后，方法内部return出来的值就会赋值给变量名\n```\n\n##### 方法返回值的用处\n\n1. 结束方法\n```javascript\n当一个方法的内部发现了return的关键字以后，那么，整个方法就直接结束了，后面的代码始终都不会执行\n\nfunction buy(){\n    console.log(\"开始买面了\");\n    return \"热干面\";     //因为看到了return关键字，所以方法直接 返回一个值以后，结束运行\n    console.log(\"鸡蛋\");     //后面的这一行代码因为在return后面，所以不会执行了\n}\n\n//-------------------------------\n\n如果仅仅只是想结束方法，而不是去返回值 ，可以直接给一个return关键字\n\nfunction m(){\n    console.log(\"a\");\n    return ;   //直接return 结束代码\n    console.log(\"b\");\n}\n```\n\n2. 更容易的实现模块化（低耦合）\n```javascript\n//取arr最大值\nfunction getMax(arr){\n    var max=arr[0];\n    for(var i=0;i<arr.length;i++){\n        if(max<=arr[i]){\n            max=arr[i];\n        }\n    }\n    //现在max就是我们的最大值\n    //我一定要告诉外边的人，你要我求的最大值是多少\n    return max;\n}\n//排序\nfunction sort(arr){\n    var newArr=[];   //新建一个新的数组，用这个新的数组保存排序以后的结果\n    while(arr.length!=0){\n        var max = getMax(arr);   //求arr数组里面最大的值\n        //在新的数组里面添加\n        newArr.push(max);\n        arr.splice(arr.indexOf(max),1); // 把当前最大值在arr里面删除\n    }\n    return newArr;\n}\n\nvar arr1=[1,5,7,9,3,2,4,0,6];\nvar resultArr=sort(arr1);\nconsole.log('resultArr', resultArr); // 9-0\n```\n\n**代码分析：**\n\n本题在这里可以把它分为两个部分，第一部分是求当前数组里面最大的一个值，第二个部分就是把得到的这个最大值重新放到一个新的数组里面去，这每个方法只做一件事情就 OK 了\n\n---\n\n#### 方法的调用者与方法的引用\n\n##### 方法的调用控制\n\n```javascript\n如果在某一段程序在调用方法的过程当中，我们希望某一个方法a只能被某另一个方法b调用，怎么办\n\nfunction a(){\n    console.log(\"我是方法a\");\n}\nfunction b(){\n    console.log(\"我是方法b\");\n}\nfunction c(){\n   console.log(\"我是c方法\")\n}\na();\nb();\nc();\n\n//---------------------------\n\n在上面，我们定义了两个方法，在定义的两个方法里面，我们a和b是同时存在，我们可以在任何地方调用a，我也可以在任何地方调用b\n\na();\nb();\n\n//----------------------------\n```\n\n但是，怎么样让 a 方法只能被 b 方法调用呢，而不能被 c 调用呢?\n\n1. 通过作用域的方式来实现\n```javascript\n方法的花括号会形成一个作用域 ，定义在方法里面的东西，不能被外部使用，所以我们可以把上面的代码做一些小小的改变\n\nfunction b(){\n    console.log(\"我是方法b\");\n\n    //现在，我把a方法定义在了方法b里面\n    function a(){\n        console.log(\"我是方法a\");\n\t}\n    a();  //在这里可以调用，因为a定义在了方法b里面\n}\n\nfunction c(){\n    console.log(\"我是c方法\")\n}\n\n//-------------\n代码分析：\n当我们把方法a定义到了方法b以后，因为b是一个封闭的作用域 ，所以外边的任何东西都访问不到a,只有b能够访问到\n```\n\n2. 通过方法内部属性 caller 来判断\n```javascript\n在方法的内部除了一个arguments的隐藏对象以外，还有一个属性caller也是方法内部的隐藏属性\n\n通过caller这个属性，我们可以判断出是谁调用了这个方法\n\n如果是全局调用，那么这个caller就是空值null\n\nfunction a(){\n   if (a.caller!=b){\n       return;    //如果当前方法不是b在调用，直接结束方法\n   }\n   console.log(\"我是方法a\");\n}\n\nfunction b(){\n   console.log(\"我是方法b\");\n   a();\n}\n\nfunction c(){\n   console.log(\"我是c方法\")\n   a();\n}\n```\n\n##### 方法的引用\n\n在方法的内部的隐藏对象里面，有一个属性叫 callee，这一个属性指向了当前的方法\n\n```javascript\nfunction a(){\n    console.log('hello');\n    //本意是指当前方法参数的集合\n    console.log(arguments.callee===a);\n}\n\n//--------------\n代码分析：\n在上面的代码里面，callee指向了当前的方法，当前的方法是a，所以callee就是a\n```\n\n---\n\n#### 方法的重载\n\n什么是重载：在编程语言里面，方法名相同，但是方法的参数类型或个数不相同，这个时候，同名的方法都会同时存在，这个情况，我们叫方法的重载 。\n\n下面是 java 代码：\n\n```java\nclass Demo{\n   //第一个方法\n   public void add(int a,int b){\n     \t System.out.println(\"我是第一次出现\");\n   }\n   //第二个方法\n   public void add(int a,int b,int c){\n       System.out.println(\"我是第二次出现\");\n   }\n   //第三个方法\n   public void add(String a,int b){\n       System.out.println(\"我是第三次出现\");\n   }\n   add(1,2);   //相当于调用了第一个方法\n   add(1,2,3);  //相当于调用了第二个方法\n   add(\"hello\",1);  //相当于调用了第三个方法\n}\n```\n\n在上面的一段 java 代码里面，我们可以看到三个同名的方法，它们的方法名相同\n\n第一个方法与第二个方法的参数类型相同(都是 int 类型),但是它们的个数不相同\n\n第一个方法与第三个方法的参数个数相同，但是它们的类型不相同(一个是 int,一个是 String)类型\n\n针对上面的情况，在 Java 里面是允许，这样它们会构成一个东西叫**方法的重载**\n\n---\n\n#### JS 方法没有重载\n\n当在 JS 里面出现了重名的方法以后，我们如何处理\n\n```javascript\n/*\n    1.方法名相同\n    2.参数个数不相同\n*/\n\nfunction one(num) {\n\treturn num + 100;\n}\nfunction one(num) {\n\treturn num + 200;\n}\nvar result = one(200);\nconsole.log(\"result\", result);\n\n/**************/\nfunction add(a, b) {\n\tconsole.log(\"我是第一次\");\n}\nfunction add(a, b, c) {\n\tconsole.log(\"我是第二次\");\n}\nadd(1, 2);\nadd(1, 2, 3);\n```\n\n因为 JS 的方法没有重载，所以它不可能像其它的编程语言那样，同名的方法同时存在，这个时候，后面的同名方法肯定会赋盖掉之前的方法，所以这个时候，当我们去掉用 add 的方法的时候，其实就是以后最一次定义的 add 方法为主\n\n---\n\n#### 为什么 JS 没有重载\n\n重载是根据**参数的类型**与**参数的个数来**区别出重名的方法的\n\n- 它不能确定参数类型\n\n  重载是根据参数的类型与参数的个数来区别出重名的方法的，但是因为 JS 在这里是一个弱类型语言，它所有的变量定义都使用 var,它并不能决定变量的类型，它的类型是由它具体的值来决定的\n\n- 它不能确定参数的个数\n\n  我们在定义方法的时候，实参与形参是不需要实现一一对应关系 ，这样我们也确定不了参数的个数\n\n  现在我们既不能确定参数的类型 ，也不能确定参数的个数，所以在 JS 里面的方法是没有重载的，正是因为没有重载，所以当出现同名的方法的时候，后面的方法会覆盖掉之前的方法\n\n---\n\n#### 递归\n\n方法内部如果又调用了当前方法，这样就形成了一个递归\n\n递归的本质可以把它理解成我们之前的循环，所以如果递归没有处理好（没有判断条件），也很容易形成死循环\n\n**案例 1：请输出 0~9 之间的每一个数**\n\n```javascript\nfor(var i=0;i<10;i++){\n    console.log(i);\n}\n//-------上面是for循环写法------------\n\nvar i=0;\nfunction sum(){\n    console.log(i);\n    i++;\n    if(i<10){\n        sum();\n    }\n}\nsum();\n```\n\n**案例 2：求 1~150 之间偶数的和，不允许使用循环**\n\n```javascript\nvar sum2 = 0;\nvar i = 0;\nfunction sumA(){\n    sum2+=i; // sum2=sum2+i;\n    i+=2;\n    if(i<=150){\n        sumA();\n    }\n}\nsumA();\nconsole.log(sum2);\n\n//练习：求5的阶乘\n function fn(num){\n     if(num<=1) return 1;\n     return num * fn(num-1);\n }\n console.log(fn(5));\n\n num =5 => fn(5) = return 5 * fn(4) = 5 * 4 * 3* 2 * 1 = 5*4*3*2*1\n num =4 => fn(4) = return 4 * fn(3) = 4*3*2*1\n num =3 => fn(3) = return 3 * fn(2) = 3*2*1\n num =2 => fn(2) = return 2 * fn(1) = 2*1\n num =1 => fn(1) = return 1\n\n```\n\n---\n\n#### 匿名函数\n\n匿名函数也可以匿名方法，从名词上面理解就是这个方法没有名字\n\n> 方法如果有了名子以后，我们可以通过方法名去调用执行这个方法，如果没有名子，我们将无法调用\n\n##### a.第一种情况\n\n```javascript\nvar sayHello = function(){\n    console.log('大家好');\n}\nsayHello();\n\n//---------------------\n\n(function(){\n    console.log('大家好');\n})()\n\n// 像上面的函数，它没有名字，同时也立即执行了\n```\n\n##### b.第二种情况\n\n```javascript\n+ function sayHello() {\n     console.log('大家好');\n }();\n\n //------------------\n\n + function(){\n    console.log('大家好');\n}()\n\n// 上面的立即执行函数它也没有名字\n```\n\n##### 匿名函数的参数\n\n```javascript\n(function(a,b){\n    console.log(a+b);\n})(1,3);\n\n+function(a,b){\n    console.log(a+b)\n}(1,3);\n```\n\n---\n\n#### 回调函数\n\n**一个函数被作为参数传递给另一个函数（在这里我们把另一个函数叫做“otherFunction”），回调函数在 otherFunction 中被调用。**\n\n```javascript\nb(a);\n\nfunction b(callback){\n    var names = '天天';\n    callback(names)//这个就是回调函数 a(name);\n    console.log('我很好');\n}\n\nfunction a(name){\n  console.log(name + '，你还好吗？');\n}\n\n// 上面的代码，有两个方法，a和b，我们执行了b方法，并把a当做参数传给了b，那么这个时候a就是回调函数\n\n```\n","source":"_posts/function.md","raw":"---\ntitle: JavaScript -函数\ntags: 函数\ncategories: js\n---\n\n## 函数\n\n**概念**：\n\n将任意多条代码组装在一起，可以在任何地方经过任意多次的**调用执行**，多次组装在一起的代码需要通过 关键字**function**来定义\n<!--more-->\n```javascript\n- 变量是通过 var 来定义的\n- 函数是通过 function 拉定义的\n程序是通过一行一行的语句来组成的，语句是组成代码最基本的单位，同时这些基本单位，我们也可以把它组合在一起分成一个一个的小模块，将这些语句分成一个一个小模块的功能，我们叫方法\n```\n\n---\n\n#### 定义函数的方式\n\n##### 通过关键字 function 定义\n\n函数定义需要通过关键字 function，定义的语法格式如下：\n```javascript\nfunction 方法名(参数1，参数2....){\n    // 代码体\n}\nfunction a(参数1，参数2){\n    // 代码体\n}\n//----------------------\n通过上面的语法格式，我们可以自己尝试着去定义一个方法\n\nfunction sayHello(a,b){\n    console.log('世界，你好');\n}\ntypeof sayHello; // 类型结果为“function”\n\n```\n\n代码分析：\n1. function 是定义方法的关键字\n2. sayHello 则是这个方法的名字\n3. a 和 b 是方法的参数\n4. 花括号里面的东西就是代码体\n\n##### 通过函数表达式来定义\n\n我们知道所有变量的定义都使用关键字 var 来进行， var 定义的变量后面跟什么数据，这个变量就是什么数据类型，比如：\n```javascript\nvar a=\"hello\";   //string类型\nvar b=123;  \t //number类型\nvar c=true;      //Boolean\nvar d=null;      //object\nvar f=undefined; //undefined;\n//我们给什么样的值，它就是一个什么类型\n\n//---------------------------\n如果给一个变量赋值成一个function，是什么样子？\n\nvar sayHello = function(参数1,参数2...){\n    // 代码体\n}\ntypeof sayHello; // function\n```\n\n代码分析：\n1. 所有变量的定义，我们都可以使用 var 来进行，变量后面跟什么数据 ，它就是什么类型\n2. sayHello 后面根的是一个 function，所以 sayHello 它应该是一个 方法\n\n##### 通过 Function 来进行定义\n\n> 小写的 function 是关键字，大字的 Function 是系统自已定义了方法\n```javascript\nvar sayHello = new Function();\ntypeof sayHello;   //function\n\n// 这一种方式不建议大家去使用，它的使用场景是在后期方法动态创建里面\n```\n\n_三种定义函数的方式我们都要接触了解，但是在日常工作当中，你们所经常使用的方式就是第一种与第二种情况_\n\n**思考**：既然我们在工作当中经常会使用到第一种与第二种的情况，那么请各位同学注意，第一种情况的定义与第二种情况的定义有啥区别？\n```javascript\nsayHello2();    //这一句代码它不会报\nsayHello1();    //这一句代码会报错\n\nvar sayHello1=function(){\n    console.log(\"hello world\");\n}\nfunction sayHello2(){\n    console.log(\"吃了没，世界\");\n}\n\n1.function 关键字定义的方法可以在调用之前调用（任何地方，前后都行）\n2.var 定义的方法只能在定义的代码之后去调用（执行上下文）\n\n// 建议大家前期先用第一种，也就是function定义的方式\n```\n\n---\n\n#### 函数的代码体，会形成作用域\n\n用 var 定义的变量没有作用域，但是定义在 function 的花括号里面的代码，它是有作用域的\n```javascript\nfunction a(){\n    // userName定义到了方法里面，所以它是有作用域的\n    // 它的作用域是方法的花括号开始 ，到方法的花括号结束\n    var userName = \"天天\";\n    //在作用域的范围里面，我们可以随意的调用变量，但是一旦出了这个花括号 ，就不行了\n}\nconsole.log(userName); // 报错，提示 userName 没有被定义\n```\n**总结**：方法体里面定义的东西在方法体外边是不能够被使用的，如果真的要使用，可以使用后面我们学习的一另一个关键字 return\n\n**终上所述**：如果你希望变量既能够在方法里面使用，也能够在方法外边使用，那么你就定义到方法的外边，如果你仅仅只是希望这个变量在方法里面使用，而不希望它在方法外边使用，则把它定义在方法的里面\n\n我们一般把定义在方法里面的变量叫**局部变量**\n\n把定义在方法外边的变量叫**全局变量**\n\n---\n\n#### 方法的调用\n\n方法（函数）通过上面的三种方式定义好了以后，你不调用它，它就不会执行，因为方法是调用执行的\n\n那么方法到底应该怎么调用呢？？？\n\n> 方法的调用其实指的就是把之前写在 function 花括号里面的代码执行一次\n\n##### 常规调用\n\n这一种方式是最基本的调用方式，当一个方法定义好了以后就会存在一个方法名，我们的常规调用就是通过这一个方法名来进行调用\n\n```javascript\n方法名();\n//它的调用方式就是方法名加()\n\n//-------------------------\n在这种方式里面，我们的调用是需要通过方法名来进行的（ 在调用方法的时候，我们可以给方法的参数赋值，这个赋值过程 ，我们叫传参）\n\nfunction sayHello(){\n    console.log(\"大家好才是真的好\");\n}\n//现在我们已经在上面的代码时面定义了一个方法，如果我们不去调用它，那么它就永远不会执行，现在我们通过普通的方式去调用它\nsayHello();   //调用方法，直接执行方法里面的代码\n```\n\n##### 立即执行函数\n\n在某些时间，如果我们希望定义好了这些方法以后立即的执行一次，怎么办呢，这个时候，我们可以使用到立即执行函数\n\n```javascript\n//定义方法\nfunction sayHello(){\n    console.log(\"大家好\");\n}\n//调用方法执行\nsayHello();\n\n在上面的代码里面， 我们可以看到之前已经定义好了一个方法，它的名子叫sayHello，然后我们又马上调用了它\n\n像这样一种情况，在后期工作的时候如果碰到了，我们可以使用立即执行函数\n//------------------------\n+ function sayHello(){\n    console.log('大家好');\n}();\n```\n\n**代码分析**：\n\n上面的代码通过 function 关键字定义好了 sayHello 方法以后，它在这个地方前面加了一个 + , 后面又添加上了一个()这个时候，碰到这种情况，大家要知道，这是一个立即执行函数，它定义好以方法以后，会立即执行一次\n\n##### 函数表达式执行\n\n```javascript\nvar sayHello=function(){\n    console.log(\"大家好\");\n}\nsayHello();\n\n// 上面的代码同步与下面的代码\n\nvar sayHello=function(){\n    console.log(\"大家好\");\n}();\n```\n\n**我们把上面的三种情况的调用归为第一大类情况，他们的调用最终都是需要去加括号的**\n\n---\n\n#### 函数的参数\n\n```javascript\n//我们在使用function定义方法的时候，除了定义方法名，还可以使用参数\n\nfunction 方法名(参数1,参数2.....){\n   //代码体\n}\n方法名(参数1,参数2.....)\n```\n- 定义方法的参数，可以理解成变量\n- 定义参数的时候，我们可以把它当成是一个变量，但是，我们不能够再去使用 var 关键字了\n```javascript\nfunction sayHello(userName){\n    console.log(userName)\n}\n\n代码分析：\n    在上面的代码里面，我们通过function关键字定义了一个方法名为sayHello的方法，\n    同时我们也看到后面的括号里面有userName,我们叫参数，\n    你可以理解为，它就相当于在function里面定义的变量\n\n    sayHello(); // undefined ，因为我们在调用方法的时候，如果方法需要参数，我们在调用的过程中给他参数\n\n    sayHello('天天');\n\n    //-----------------------------------\n\n    上面的调用过程首先是先调用了方法sayHello，然后在调用的时候，还给之前定义的参数userName赋值为“天天”\n\n    在调用方法的时候，值会赋值给参数，这个赋值的过程我们叫传参\n```\n\n##### a.形式参数\n\n形式参数简称“形参”,指的是方法在定义的过程当中所使用（所出现）的参数\n\n形参默认是没有值的，它的值默认情况下是 undefined\n\n形参可以理解成变量，它的作用域只能在方法里面，不能在方法外边\n\n##### b.实际参数\n\n实际参数简称“实参”，指的是方法调用的时候里面的的真实参数（真实数据）\n\n**重要**：值是由实参赋值给形参（也可以理解为值是由实参传递给形参）\n\n##### c.实参与形参的对应关系\n\n```javascript\nfunction add(a,b){\n    console.log(a);\n    console.log(b);\n}\nadd(10,20);\n\n// 在上面的代码里面，我们在定义方法的时候，定义了两个形参，在调用方法的时候，我们给了两个实参\n```\n\n##### 思考：\n\n​现在有如下三种情况，请同学们判断如何进行\n```javascript\nfunction add(a, b) {\n\tconsole.log(a);\n\tconsole.log(b);\n}\n```\n1. 当实参与形参个数相同的时候\n```javascript\nadd(10, 20);\n//当实参与形参相同的时候，它们可以实现一一对应的关系，这个时候的a为10,b为20\n```\n2.  当实参小于形参个数的时候\n```javascript\nadd(10);\n//当实参个数小于形参个数的时候，前面的值实现一一对应，后面多出来的形参的值为undefined;\n```\n3.  当实参个数大于形参个数的时候\n```javascript\nadd(10, 20, 30);\n//前面的值实参与形参可以实现一一对应的效果，多出来的值如果需要获取 ，可以找arguments, 因为当前方法所接收到的所有实参的值都在arguments这个类数组里面\n```\n\n---\n\n#### arguments 参数集合\n\n在所有的 function 里面，有一个隐藏的内置的对象 ，这个对象是**当前方法所接收到的参数集合，也就是实参的集合**，它就是**arguments**\n\narguments 仅仅只作用在方法的内部 ，出了方法以后就不能使用\n\narguments 它是一个**类数组**\n\n**类数组**：\n具备数组特性（通过索引取值，通过 length 确定长度），但不具备数组的方法的集合，Array.isArray(类数组) 得到的结果为 false\n\n```javascript\nfunction add(a, b){\n    console.log(a);\n    console.log(b);\n    // 在每个方法方法的内部 ，它都有一个隐藏的内置对象 arguments，它包含了当前方法所接收到的参数\n    console.log(arguments);\n}\nadd(10,20);\n```\n\n在上面的代码里面，我们通过**add(10,20)** 这种方式来调用了方法，并向方向里面传递了两个参数。这个时候 a 代表的就是 10，b 代表的就是 20\n\n同时，我们也可以看到在方法内部 的 arguments 对象里面，它也保存了此次传递进去的 2 个实参\n\n**小案例**：请编写一个方法，实现多个数的相加，然后打印输出结果\n\n```javascript\nfunction add(){\n    //arguments代表所接收到的所有实参\n    //现在只需要将这些实参一个一个的加起来就可以了\n    //arguments它是一个类数组，它具备数组的特性，索引取值，length代表长度\n    var sum=0;\n    for(var i=0;i<arguments.length;i++){\n        //sum=sum+arguments[i];\n        sum+=arguments[i];\n    }\n    console.log(sum);\n}\n\nadd(40,34);\n```\n\n---\n\n#### 方法的返回值\n\n一个方法经过调用执行完毕以后，它可以通过关键字 return 向外部返回一个值，这个值，我们可以通过变量把它接收到\n\n```javascript\nfunction eat(){\n    console.log('我在吃饭');\n}\n\nfunction buy(){\n    console.log('我在超市');\n    console.log('寻找商品');\n    return \"糖果\";\n}\n\nvar a = eat();\nvar b = buy();\nconsole.log(a, b); // undefined \"糖果\"\n// 调用eat的时候，方法没有返回值，所以a得到的是 undefined\n// 调用buy的时候，return了一个“糖果”，所以b接受到的值就是“糖果”\n```\n\n##### 所有的方法都有返回值\n\n1. JS 无需指定函数的返回值，因为 JS 可以在函数内部的任何地方返回任何类型的值\n2. 如果 JS 没有通过 return 语句返回值 ，那么默认返回的就是 undefined;\n```javascript\nfunction a(){\n    return 1+1;\n}\n\nfunction b(){\n\n}\n\nfunction c(){\n    var x=1;\n    return x;\n    x=2;\n}\nvar str=a();   //2\n\nvar str1=b();  //undefined;\n\nvar str2=c();  //1\n\n//--------------------------\n方法在调用的过程当中，如果我们需要接收方法的返回值（ 也就是return的值），可以使用一个变量去接收\n\nvar 变量名=方法名();\n//这样整个方法调用结束以后，方法内部return出来的值就会赋值给变量名\n```\n\n##### 方法返回值的用处\n\n1. 结束方法\n```javascript\n当一个方法的内部发现了return的关键字以后，那么，整个方法就直接结束了，后面的代码始终都不会执行\n\nfunction buy(){\n    console.log(\"开始买面了\");\n    return \"热干面\";     //因为看到了return关键字，所以方法直接 返回一个值以后，结束运行\n    console.log(\"鸡蛋\");     //后面的这一行代码因为在return后面，所以不会执行了\n}\n\n//-------------------------------\n\n如果仅仅只是想结束方法，而不是去返回值 ，可以直接给一个return关键字\n\nfunction m(){\n    console.log(\"a\");\n    return ;   //直接return 结束代码\n    console.log(\"b\");\n}\n```\n\n2. 更容易的实现模块化（低耦合）\n```javascript\n//取arr最大值\nfunction getMax(arr){\n    var max=arr[0];\n    for(var i=0;i<arr.length;i++){\n        if(max<=arr[i]){\n            max=arr[i];\n        }\n    }\n    //现在max就是我们的最大值\n    //我一定要告诉外边的人，你要我求的最大值是多少\n    return max;\n}\n//排序\nfunction sort(arr){\n    var newArr=[];   //新建一个新的数组，用这个新的数组保存排序以后的结果\n    while(arr.length!=0){\n        var max = getMax(arr);   //求arr数组里面最大的值\n        //在新的数组里面添加\n        newArr.push(max);\n        arr.splice(arr.indexOf(max),1); // 把当前最大值在arr里面删除\n    }\n    return newArr;\n}\n\nvar arr1=[1,5,7,9,3,2,4,0,6];\nvar resultArr=sort(arr1);\nconsole.log('resultArr', resultArr); // 9-0\n```\n\n**代码分析：**\n\n本题在这里可以把它分为两个部分，第一部分是求当前数组里面最大的一个值，第二个部分就是把得到的这个最大值重新放到一个新的数组里面去，这每个方法只做一件事情就 OK 了\n\n---\n\n#### 方法的调用者与方法的引用\n\n##### 方法的调用控制\n\n```javascript\n如果在某一段程序在调用方法的过程当中，我们希望某一个方法a只能被某另一个方法b调用，怎么办\n\nfunction a(){\n    console.log(\"我是方法a\");\n}\nfunction b(){\n    console.log(\"我是方法b\");\n}\nfunction c(){\n   console.log(\"我是c方法\")\n}\na();\nb();\nc();\n\n//---------------------------\n\n在上面，我们定义了两个方法，在定义的两个方法里面，我们a和b是同时存在，我们可以在任何地方调用a，我也可以在任何地方调用b\n\na();\nb();\n\n//----------------------------\n```\n\n但是，怎么样让 a 方法只能被 b 方法调用呢，而不能被 c 调用呢?\n\n1. 通过作用域的方式来实现\n```javascript\n方法的花括号会形成一个作用域 ，定义在方法里面的东西，不能被外部使用，所以我们可以把上面的代码做一些小小的改变\n\nfunction b(){\n    console.log(\"我是方法b\");\n\n    //现在，我把a方法定义在了方法b里面\n    function a(){\n        console.log(\"我是方法a\");\n\t}\n    a();  //在这里可以调用，因为a定义在了方法b里面\n}\n\nfunction c(){\n    console.log(\"我是c方法\")\n}\n\n//-------------\n代码分析：\n当我们把方法a定义到了方法b以后，因为b是一个封闭的作用域 ，所以外边的任何东西都访问不到a,只有b能够访问到\n```\n\n2. 通过方法内部属性 caller 来判断\n```javascript\n在方法的内部除了一个arguments的隐藏对象以外，还有一个属性caller也是方法内部的隐藏属性\n\n通过caller这个属性，我们可以判断出是谁调用了这个方法\n\n如果是全局调用，那么这个caller就是空值null\n\nfunction a(){\n   if (a.caller!=b){\n       return;    //如果当前方法不是b在调用，直接结束方法\n   }\n   console.log(\"我是方法a\");\n}\n\nfunction b(){\n   console.log(\"我是方法b\");\n   a();\n}\n\nfunction c(){\n   console.log(\"我是c方法\")\n   a();\n}\n```\n\n##### 方法的引用\n\n在方法的内部的隐藏对象里面，有一个属性叫 callee，这一个属性指向了当前的方法\n\n```javascript\nfunction a(){\n    console.log('hello');\n    //本意是指当前方法参数的集合\n    console.log(arguments.callee===a);\n}\n\n//--------------\n代码分析：\n在上面的代码里面，callee指向了当前的方法，当前的方法是a，所以callee就是a\n```\n\n---\n\n#### 方法的重载\n\n什么是重载：在编程语言里面，方法名相同，但是方法的参数类型或个数不相同，这个时候，同名的方法都会同时存在，这个情况，我们叫方法的重载 。\n\n下面是 java 代码：\n\n```java\nclass Demo{\n   //第一个方法\n   public void add(int a,int b){\n     \t System.out.println(\"我是第一次出现\");\n   }\n   //第二个方法\n   public void add(int a,int b,int c){\n       System.out.println(\"我是第二次出现\");\n   }\n   //第三个方法\n   public void add(String a,int b){\n       System.out.println(\"我是第三次出现\");\n   }\n   add(1,2);   //相当于调用了第一个方法\n   add(1,2,3);  //相当于调用了第二个方法\n   add(\"hello\",1);  //相当于调用了第三个方法\n}\n```\n\n在上面的一段 java 代码里面，我们可以看到三个同名的方法，它们的方法名相同\n\n第一个方法与第二个方法的参数类型相同(都是 int 类型),但是它们的个数不相同\n\n第一个方法与第三个方法的参数个数相同，但是它们的类型不相同(一个是 int,一个是 String)类型\n\n针对上面的情况，在 Java 里面是允许，这样它们会构成一个东西叫**方法的重载**\n\n---\n\n#### JS 方法没有重载\n\n当在 JS 里面出现了重名的方法以后，我们如何处理\n\n```javascript\n/*\n    1.方法名相同\n    2.参数个数不相同\n*/\n\nfunction one(num) {\n\treturn num + 100;\n}\nfunction one(num) {\n\treturn num + 200;\n}\nvar result = one(200);\nconsole.log(\"result\", result);\n\n/**************/\nfunction add(a, b) {\n\tconsole.log(\"我是第一次\");\n}\nfunction add(a, b, c) {\n\tconsole.log(\"我是第二次\");\n}\nadd(1, 2);\nadd(1, 2, 3);\n```\n\n因为 JS 的方法没有重载，所以它不可能像其它的编程语言那样，同名的方法同时存在，这个时候，后面的同名方法肯定会赋盖掉之前的方法，所以这个时候，当我们去掉用 add 的方法的时候，其实就是以后最一次定义的 add 方法为主\n\n---\n\n#### 为什么 JS 没有重载\n\n重载是根据**参数的类型**与**参数的个数来**区别出重名的方法的\n\n- 它不能确定参数类型\n\n  重载是根据参数的类型与参数的个数来区别出重名的方法的，但是因为 JS 在这里是一个弱类型语言，它所有的变量定义都使用 var,它并不能决定变量的类型，它的类型是由它具体的值来决定的\n\n- 它不能确定参数的个数\n\n  我们在定义方法的时候，实参与形参是不需要实现一一对应关系 ，这样我们也确定不了参数的个数\n\n  现在我们既不能确定参数的类型 ，也不能确定参数的个数，所以在 JS 里面的方法是没有重载的，正是因为没有重载，所以当出现同名的方法的时候，后面的方法会覆盖掉之前的方法\n\n---\n\n#### 递归\n\n方法内部如果又调用了当前方法，这样就形成了一个递归\n\n递归的本质可以把它理解成我们之前的循环，所以如果递归没有处理好（没有判断条件），也很容易形成死循环\n\n**案例 1：请输出 0~9 之间的每一个数**\n\n```javascript\nfor(var i=0;i<10;i++){\n    console.log(i);\n}\n//-------上面是for循环写法------------\n\nvar i=0;\nfunction sum(){\n    console.log(i);\n    i++;\n    if(i<10){\n        sum();\n    }\n}\nsum();\n```\n\n**案例 2：求 1~150 之间偶数的和，不允许使用循环**\n\n```javascript\nvar sum2 = 0;\nvar i = 0;\nfunction sumA(){\n    sum2+=i; // sum2=sum2+i;\n    i+=2;\n    if(i<=150){\n        sumA();\n    }\n}\nsumA();\nconsole.log(sum2);\n\n//练习：求5的阶乘\n function fn(num){\n     if(num<=1) return 1;\n     return num * fn(num-1);\n }\n console.log(fn(5));\n\n num =5 => fn(5) = return 5 * fn(4) = 5 * 4 * 3* 2 * 1 = 5*4*3*2*1\n num =4 => fn(4) = return 4 * fn(3) = 4*3*2*1\n num =3 => fn(3) = return 3 * fn(2) = 3*2*1\n num =2 => fn(2) = return 2 * fn(1) = 2*1\n num =1 => fn(1) = return 1\n\n```\n\n---\n\n#### 匿名函数\n\n匿名函数也可以匿名方法，从名词上面理解就是这个方法没有名字\n\n> 方法如果有了名子以后，我们可以通过方法名去调用执行这个方法，如果没有名子，我们将无法调用\n\n##### a.第一种情况\n\n```javascript\nvar sayHello = function(){\n    console.log('大家好');\n}\nsayHello();\n\n//---------------------\n\n(function(){\n    console.log('大家好');\n})()\n\n// 像上面的函数，它没有名字，同时也立即执行了\n```\n\n##### b.第二种情况\n\n```javascript\n+ function sayHello() {\n     console.log('大家好');\n }();\n\n //------------------\n\n + function(){\n    console.log('大家好');\n}()\n\n// 上面的立即执行函数它也没有名字\n```\n\n##### 匿名函数的参数\n\n```javascript\n(function(a,b){\n    console.log(a+b);\n})(1,3);\n\n+function(a,b){\n    console.log(a+b)\n}(1,3);\n```\n\n---\n\n#### 回调函数\n\n**一个函数被作为参数传递给另一个函数（在这里我们把另一个函数叫做“otherFunction”），回调函数在 otherFunction 中被调用。**\n\n```javascript\nb(a);\n\nfunction b(callback){\n    var names = '天天';\n    callback(names)//这个就是回调函数 a(name);\n    console.log('我很好');\n}\n\nfunction a(name){\n  console.log(name + '，你还好吗？');\n}\n\n// 上面的代码，有两个方法，a和b，我们执行了b方法，并把a当做参数传给了b，那么这个时候a就是回调函数\n\n```\n","slug":"function","published":1,"date":"2022-06-28T14:25:30.261Z","updated":"2022-06-29T09:06:22.313Z","_id":"cl4zab0jq0000mcx6auliambz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p><strong>概念</strong>：</p>\n<p>将任意多条代码组装在一起，可以在任何地方经过任意多次的<strong>调用执行</strong>，多次组装在一起的代码需要通过 关键字<strong>function</strong>来定义</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">-</span> 变量是通过 <span class=\"token keyword\">var</span> 来定义的\n<span class=\"token operator\">-</span> 函数是通过 <span class=\"token keyword\">function</span> 拉定义的\n程序是通过一行一行的语句来组成的，语句是组成代码最基本的单位，同时这些基本单位，我们也可以把它组合在一起分成一个一个的小模块，将这些语句分成一个一个小模块的功能，我们叫方法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"定义函数的方式\"><a href=\"#定义函数的方式\" class=\"headerlink\" title=\"定义函数的方式\"></a>定义函数的方式</h4><h5 id=\"通过关键字-function-定义\"><a href=\"#通过关键字-function-定义\" class=\"headerlink\" title=\"通过关键字 function 定义\"></a>通过关键字 function 定义</h5><p>函数定义需要通过关键字 function，定义的语法格式如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span>，参数<span class=\"token number\">2.</span><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 代码体</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span>，参数<span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 代码体</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//----------------------</span>\n通过上面的语法格式，我们可以自己尝试着去定义一个方法\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'世界，你好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">typeof</span> sayHello<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型结果为“function”</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码分析：</p>\n<ol>\n<li>function 是定义方法的关键字</li>\n<li>sayHello 则是这个方法的名字</li>\n<li>a 和 b 是方法的参数</li>\n<li>花括号里面的东西就是代码体</li>\n</ol>\n<h5 id=\"通过函数表达式来定义\"><a href=\"#通过函数表达式来定义\" class=\"headerlink\" title=\"通过函数表达式来定义\"></a>通过函数表达式来定义</h5><p>我们知道所有变量的定义都使用关键字 var 来进行， var 定义的变量后面跟什么数据，这个变量就是什么数据类型，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//string类型</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  \t <span class=\"token comment\">//number类型</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//Boolean</span>\n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//object</span>\n<span class=\"token keyword\">var</span> f<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined;</span>\n<span class=\"token comment\">//我们给什么样的值，它就是一个什么类型</span>\n\n<span class=\"token comment\">//---------------------------</span>\n如果给一个变量赋值成一个<span class=\"token keyword\">function</span>，是什么样子？\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>参数<span class=\"token number\">2.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 代码体</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">typeof</span> sayHello<span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码分析：</p>\n<ol>\n<li>所有变量的定义，我们都可以使用 var 来进行，变量后面跟什么数据 ，它就是什么类型</li>\n<li>sayHello 后面根的是一个 function，所以 sayHello 它应该是一个 方法</li>\n</ol>\n<h5 id=\"通过-Function-来进行定义\"><a href=\"#通过-Function-来进行定义\" class=\"headerlink\" title=\"通过 Function 来进行定义\"></a>通过 Function 来进行定义</h5><blockquote>\n<p>小写的 function 是关键字，大字的 Function 是系统自已定义了方法</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sayHello <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> sayHello<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//function</span>\n\n<span class=\"token comment\">// 这一种方式不建议大家去使用，它的使用场景是在后期方法动态创建里面</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>三种定义函数的方式我们都要接触了解，但是在日常工作当中，你们所经常使用的方式就是第一种与第二种情况</em></p>\n<p><strong>思考</strong>：既然我们在工作当中经常会使用到第一种与第二种的情况，那么请各位同学注意，第一种情况的定义与第二种情况的定义有啥区别？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">sayHello2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//这一句代码它不会报</span>\n<span class=\"token function\">sayHello1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//这一句代码会报错</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello1</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃了没，世界\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span>function 关键字定义的方法可以在调用之前调用（任何地方，前后都行）\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>var 定义的方法只能在定义的代码之后去调用（执行上下文）\n\n<span class=\"token comment\">// 建议大家前期先用第一种，也就是function定义的方式</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"函数的代码体，会形成作用域\"><a href=\"#函数的代码体，会形成作用域\" class=\"headerlink\" title=\"函数的代码体，会形成作用域\"></a>函数的代码体，会形成作用域</h4><p>用 var 定义的变量没有作用域，但是定义在 function 的花括号里面的代码，它是有作用域的</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// userName定义到了方法里面，所以它是有作用域的</span>\n    <span class=\"token comment\">// 它的作用域是方法的花括号开始 ，到方法的花括号结束</span>\n    <span class=\"token keyword\">var</span> userName <span class=\"token operator\">=</span> <span class=\"token string\">\"天天\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//在作用域的范围里面，我们可以随意的调用变量，但是一旦出了这个花括号 ，就不行了</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错，提示 userName 没有被定义</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>总结</strong>：方法体里面定义的东西在方法体外边是不能够被使用的，如果真的要使用，可以使用后面我们学习的一另一个关键字 return</p>\n<p><strong>终上所述</strong>：如果你希望变量既能够在方法里面使用，也能够在方法外边使用，那么你就定义到方法的外边，如果你仅仅只是希望这个变量在方法里面使用，而不希望它在方法外边使用，则把它定义在方法的里面</p>\n<p>我们一般把定义在方法里面的变量叫<strong>局部变量</strong></p>\n<p>把定义在方法外边的变量叫<strong>全局变量</strong></p>\n<hr>\n<h4 id=\"方法的调用\"><a href=\"#方法的调用\" class=\"headerlink\" title=\"方法的调用\"></a>方法的调用</h4><p>方法（函数）通过上面的三种方式定义好了以后，你不调用它，它就不会执行，因为方法是调用执行的</p>\n<p>那么方法到底应该怎么调用呢？？？</p>\n<blockquote>\n<p>方法的调用其实指的就是把之前写在 function 花括号里面的代码执行一次</p>\n</blockquote>\n<h5 id=\"常规调用\"><a href=\"#常规调用\" class=\"headerlink\" title=\"常规调用\"></a>常规调用</h5><p>这一种方式是最基本的调用方式，当一个方法定义好了以后就会存在一个方法名，我们的常规调用就是通过这一个方法名来进行调用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//它的调用方式就是方法名加()</span>\n\n<span class=\"token comment\">//-------------------------</span>\n在这种方式里面，我们的调用是需要通过方法名来进行的（ 在调用方法的时候，我们可以给方法的参数赋值，这个赋值过程 ，我们叫传参）\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大家好才是真的好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//现在我们已经在上面的代码时面定义了一个方法，如果我们不去调用它，那么它就永远不会执行，现在我们通过普通的方式去调用它</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//调用方法，直接执行方法里面的代码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h5><p>在某些时间，如果我们希望定义好了这些方法以后立即的执行一次，怎么办呢，这个时候，我们可以使用到立即执行函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//定义方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大家好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//调用方法执行</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n在上面的代码里面， 我们可以看到之前已经定义好了一个方法，它的名子叫sayHello，然后我们又马上调用了它\n\n像这样一种情况，在后期工作的时候如果碰到了，我们可以使用立即执行函数\n<span class=\"token comment\">//------------------------</span>\n<span class=\"token operator\">+</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>代码分析</strong>：</p>\n<p>上面的代码通过 function 关键字定义好了 sayHello 方法以后，它在这个地方前面加了一个 + , 后面又添加上了一个()这个时候，碰到这种情况，大家要知道，这是一个立即执行函数，它定义好以方法以后，会立即执行一次</p>\n<h5 id=\"函数表达式执行\"><a href=\"#函数表达式执行\" class=\"headerlink\" title=\"函数表达式执行\"></a>函数表达式执行</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大家好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 上面的代码同步与下面的代码</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大家好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>我们把上面的三种情况的调用归为第一大类情况，他们的调用最终都是需要去加括号的</strong></p>\n<hr>\n<h4 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//我们在使用function定义方法的时候，除了定义方法名，还可以使用参数</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>参数<span class=\"token number\">2.</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//代码体</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span>参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>参数<span class=\"token number\">2.</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>定义方法的参数，可以理解成变量</li>\n<li>定义参数的时候，我们可以把它当成是一个变量，但是，我们不能够再去使用 var 关键字了<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n代码分析：\n    在上面的代码里面，我们通过<span class=\"token keyword\">function</span>关键字定义了一个方法名为sayHello的方法，\n    同时我们也看到后面的括号里面有userName<span class=\"token punctuation\">,</span>我们叫参数，\n    你可以理解为，它就相当于在<span class=\"token keyword\">function</span>里面定义的变量\n\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined ，因为我们在调用方法的时候，如果方法需要参数，我们在调用的过程中给他参数</span>\n\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'天天'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//-----------------------------------</span>\n\n    上面的调用过程首先是先调用了方法sayHello，然后在调用的时候，还给之前定义的参数userName赋值为“天天”\n\n    在调用方法的时候，值会赋值给参数，这个赋值的过程我们叫传参<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h5 id=\"a-形式参数\"><a href=\"#a-形式参数\" class=\"headerlink\" title=\"a.形式参数\"></a>a.形式参数</h5><p>形式参数简称“形参”,指的是方法在定义的过程当中所使用（所出现）的参数</p>\n<p>形参默认是没有值的，它的值默认情况下是 undefined</p>\n<p>形参可以理解成变量，它的作用域只能在方法里面，不能在方法外边</p>\n<h5 id=\"b-实际参数\"><a href=\"#b-实际参数\" class=\"headerlink\" title=\"b.实际参数\"></a>b.实际参数</h5><p>实际参数简称“实参”，指的是方法调用的时候里面的的真实参数（真实数据）</p>\n<p><strong>重要</strong>：值是由实参赋值给形参（也可以理解为值是由实参传递给形参）</p>\n<h5 id=\"c-实参与形参的对应关系\"><a href=\"#c-实参与形参的对应关系\" class=\"headerlink\" title=\"c.实参与形参的对应关系\"></a>c.实参与形参的对应关系</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在上面的代码里面，我们在定义方法的时候，定义了两个形参，在调用方法的时候，我们给了两个实参</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"思考：\"><a href=\"#思考：\" class=\"headerlink\" title=\"思考：\"></a>思考：</h5><p>​现在有如下三种情况，请同学们判断如何进行</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>当实参与形参个数相同的时候<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//当实参与形参相同的时候，它们可以实现一一对应的关系，这个时候的a为10,b为20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li> 当实参小于形参个数的时候<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//当实参个数小于形参个数的时候，前面的值实现一一对应，后面多出来的形参的值为undefined;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li> 当实参个数大于形参个数的时候<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//前面的值实参与形参可以实现一一对应的效果，多出来的值如果需要获取 ，可以找arguments, 因为当前方法所接收到的所有实参的值都在arguments这个类数组里面</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"arguments-参数集合\"><a href=\"#arguments-参数集合\" class=\"headerlink\" title=\"arguments 参数集合\"></a>arguments 参数集合</h4><p>在所有的 function 里面，有一个隐藏的内置的对象 ，这个对象是<strong>当前方法所接收到的参数集合，也就是实参的集合</strong>，它就是<strong>arguments</strong></p>\n<p>arguments 仅仅只作用在方法的内部 ，出了方法以后就不能使用</p>\n<p>arguments 它是一个<strong>类数组</strong></p>\n<p><strong>类数组</strong>：<br>具备数组特性（通过索引取值，通过 length 确定长度），但不具备数组的方法的集合，Array.isArray(类数组) 得到的结果为 false</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在每个方法方法的内部 ，它都有一个隐藏的内置对象 arguments，它包含了当前方法所接收到的参数</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的代码里面，我们通过<strong>add(10,20)</strong> 这种方式来调用了方法，并向方向里面传递了两个参数。这个时候 a 代表的就是 10，b 代表的就是 20</p>\n<p>同时，我们也可以看到在方法内部 的 arguments 对象里面，它也保存了此次传递进去的 2 个实参</p>\n<p><strong>小案例</strong>：请编写一个方法，实现多个数的相加，然后打印输出结果</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//arguments代表所接收到的所有实参</span>\n    <span class=\"token comment\">//现在只需要将这些实参一个一个的加起来就可以了</span>\n    <span class=\"token comment\">//arguments它是一个类数组，它具备数组的特性，索引取值，length代表长度</span>\n    <span class=\"token keyword\">var</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//sum=sum+arguments[i];</span>\n        sum<span class=\"token operator\">+=</span>arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"方法的返回值\"><a href=\"#方法的返回值\" class=\"headerlink\" title=\"方法的返回值\"></a>方法的返回值</h4><p>一个方法经过调用执行完毕以后，它可以通过关键字 return 向外部返回一个值，这个值，我们可以通过变量把它接收到</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我在吃饭'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我在超市'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'寻找商品'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"糖果\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined \"糖果\"</span>\n<span class=\"token comment\">// 调用eat的时候，方法没有返回值，所以a得到的是 undefined</span>\n<span class=\"token comment\">// 调用buy的时候，return了一个“糖果”，所以b接受到的值就是“糖果”</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"所有的方法都有返回值\"><a href=\"#所有的方法都有返回值\" class=\"headerlink\" title=\"所有的方法都有返回值\"></a>所有的方法都有返回值</h5><ol>\n<li>JS 无需指定函数的返回值，因为 JS 可以在函数内部的任何地方返回任何类型的值</li>\n<li>如果 JS 没有通过 return 语句返回值 ，那么默认返回的就是 undefined;<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> str<span class=\"token operator\">=</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//2</span>\n\n<span class=\"token keyword\">var</span> str1<span class=\"token operator\">=</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//undefined;</span>\n\n<span class=\"token keyword\">var</span> str2<span class=\"token operator\">=</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//1</span>\n\n<span class=\"token comment\">//--------------------------</span>\n方法在调用的过程当中，如果我们需要接收方法的返回值（ 也就是<span class=\"token keyword\">return</span>的值），可以使用一个变量去接收\n\n<span class=\"token keyword\">var</span> 变量名<span class=\"token operator\">=</span><span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这样整个方法调用结束以后，方法内部return出来的值就会赋值给变量名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"方法返回值的用处\"><a href=\"#方法返回值的用处\" class=\"headerlink\" title=\"方法返回值的用处\"></a>方法返回值的用处</h5><ol>\n<li><p>结束方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">当一个方法的内部发现了<span class=\"token keyword\">return</span>的关键字以后，那么，整个方法就直接结束了，后面的代码始终都不会执行\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始买面了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"热干面\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//因为看到了return关键字，所以方法直接 返回一个值以后，结束运行</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鸡蛋\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//后面的这一行代码因为在return后面，所以不会执行了</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//-------------------------------</span>\n\n如果仅仅只是想结束方法，而不是去返回值 ，可以直接给一个<span class=\"token keyword\">return</span>关键字\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>   <span class=\"token comment\">//直接return 结束代码</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>更容易的实现模块化（低耦合）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//取arr最大值</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> max<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max<span class=\"token operator\">&lt;=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            max<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//现在max就是我们的最大值</span>\n    <span class=\"token comment\">//我一定要告诉外边的人，你要我求的最大值是多少</span>\n    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//排序</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> newArr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//新建一个新的数组，用这个新的数组保存排序以后的结果</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//求arr数组里面最大的值</span>\n        <span class=\"token comment\">//在新的数组里面添加</span>\n        newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把当前最大值在arr里面删除</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> resultArr<span class=\"token operator\">=</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resultArr'</span><span class=\"token punctuation\">,</span> resultArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9-0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>代码分析：</strong></p>\n<p>本题在这里可以把它分为两个部分，第一部分是求当前数组里面最大的一个值，第二个部分就是把得到的这个最大值重新放到一个新的数组里面去，这每个方法只做一件事情就 OK 了</p>\n<hr>\n<h4 id=\"方法的调用者与方法的引用\"><a href=\"#方法的调用者与方法的引用\" class=\"headerlink\" title=\"方法的调用者与方法的引用\"></a>方法的调用者与方法的引用</h4><h5 id=\"方法的调用控制\"><a href=\"#方法的调用控制\" class=\"headerlink\" title=\"方法的调用控制\"></a>方法的调用控制</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">如果在某一段程序在调用方法的过程当中，我们希望某一个方法a只能被某另一个方法b调用，怎么办\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是c方法\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//---------------------------</span>\n\n在上面，我们定义了两个方法，在定义的两个方法里面，我们a和b是同时存在，我们可以在任何地方调用a，我也可以在任何地方调用b\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//----------------------------</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，怎么样让 a 方法只能被 b 方法调用呢，而不能被 c 调用呢?</p>\n<ol>\n<li><p>通过作用域的方式来实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">方法的花括号会形成一个作用域 ，定义在方法里面的东西，不能被外部使用，所以我们可以把上面的代码做一些小小的改变\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//现在，我把a方法定义在了方法b里面</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//在这里可以调用，因为a定义在了方法b里面</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是c方法\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//-------------</span>\n代码分析：\n当我们把方法a定义到了方法b以后，因为b是一个封闭的作用域 ，所以外边的任何东西都访问不到a<span class=\"token punctuation\">,</span>只有b能够访问到<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>通过方法内部属性 caller 来判断</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">在方法的内部除了一个arguments的隐藏对象以外，还有一个属性caller也是方法内部的隐藏属性\n\n通过caller这个属性，我们可以判断出是谁调用了这个方法\n\n如果是全局调用，那么这个caller就是空值<span class=\"token keyword\">null</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>caller<span class=\"token operator\">!=</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//如果当前方法不是b在调用，直接结束方法</span>\n   <span class=\"token punctuation\">&#125;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是c方法\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"方法的引用\"><a href=\"#方法的引用\" class=\"headerlink\" title=\"方法的引用\"></a>方法的引用</h5><p>在方法的内部的隐藏对象里面，有一个属性叫 callee，这一个属性指向了当前的方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//本意是指当前方法参数的集合</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>callee<span class=\"token operator\">===</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//--------------</span>\n代码分析：\n在上面的代码里面，callee指向了当前的方法，当前的方法是a，所以callee就是a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h4><p>什么是重载：在编程语言里面，方法名相同，但是方法的参数类型或个数不相同，这个时候，同名的方法都会同时存在，这个情况，我们叫方法的重载 。</p>\n<p>下面是 java 代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//第一个方法</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     \t <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是第一次出现\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">//第二个方法</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是第二次出现\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">//第三个方法</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是第三次出现\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//相当于调用了第一个方法</span>\n   <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//相当于调用了第二个方法</span>\n   <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//相当于调用了第三个方法</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的一段 java 代码里面，我们可以看到三个同名的方法，它们的方法名相同</p>\n<p>第一个方法与第二个方法的参数类型相同(都是 int 类型),但是它们的个数不相同</p>\n<p>第一个方法与第三个方法的参数个数相同，但是它们的类型不相同(一个是 int,一个是 String)类型</p>\n<p>针对上面的情况，在 Java 里面是允许，这样它们会构成一个东西叫<strong>方法的重载</strong></p>\n<hr>\n<h4 id=\"JS-方法没有重载\"><a href=\"#JS-方法没有重载\" class=\"headerlink\" title=\"JS 方法没有重载\"></a>JS 方法没有重载</h4><p>当在 JS 里面出现了重名的方法以后，我们如何处理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n    1.方法名相同\n    2.参数个数不相同\n*/</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**************/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是第一次\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是第二次\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因为 JS 的方法没有重载，所以它不可能像其它的编程语言那样，同名的方法同时存在，这个时候，后面的同名方法肯定会赋盖掉之前的方法，所以这个时候，当我们去掉用 add 的方法的时候，其实就是以后最一次定义的 add 方法为主</p>\n<hr>\n<h4 id=\"为什么-JS-没有重载\"><a href=\"#为什么-JS-没有重载\" class=\"headerlink\" title=\"为什么 JS 没有重载\"></a>为什么 JS 没有重载</h4><p>重载是根据<strong>参数的类型</strong>与<strong>参数的个数来</strong>区别出重名的方法的</p>\n<ul>\n<li><p>它不能确定参数类型</p>\n<p>重载是根据参数的类型与参数的个数来区别出重名的方法的，但是因为 JS 在这里是一个弱类型语言，它所有的变量定义都使用 var,它并不能决定变量的类型，它的类型是由它具体的值来决定的</p>\n</li>\n<li><p>它不能确定参数的个数</p>\n<p>我们在定义方法的时候，实参与形参是不需要实现一一对应关系 ，这样我们也确定不了参数的个数</p>\n<p>现在我们既不能确定参数的类型 ，也不能确定参数的个数，所以在 JS 里面的方法是没有重载的，正是因为没有重载，所以当出现同名的方法的时候，后面的方法会覆盖掉之前的方法</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><p>方法内部如果又调用了当前方法，这样就形成了一个递归</p>\n<p>递归的本质可以把它理解成我们之前的循环，所以如果递归没有处理好（没有判断条件），也很容易形成死循环</p>\n<p><strong>案例 1：请输出 0~9 之间的每一个数</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//-------上面是for循环写法------------</span>\n\n<span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>案例 2：求 1~150 之间偶数的和，不允许使用循环</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    sum2<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// sum2=sum2+i;</span>\n    i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sumA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">sumA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//练习：求5的阶乘</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n num <span class=\"token operator\">=</span><span class=\"token number\">5</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">return</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">1</span>\n num <span class=\"token operator\">=</span><span class=\"token number\">4</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">return</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">1</span>\n num <span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">return</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">1</span>\n num <span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">1</span>\n num <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h4><p>匿名函数也可以匿名方法，从名词上面理解就是这个方法没有名字</p>\n<blockquote>\n<p>方法如果有了名子以后，我们可以通过方法名去调用执行这个方法，如果没有名子，我们将无法调用</p>\n</blockquote>\n<h5 id=\"a-第一种情况\"><a href=\"#a-第一种情况\" class=\"headerlink\" title=\"a.第一种情况\"></a>a.第一种情况</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//---------------------</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 像上面的函数，它没有名字，同时也立即执行了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"b-第二种情况\"><a href=\"#b-第二种情况\" class=\"headerlink\" title=\"b.第二种情况\"></a>b.第二种情况</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">+</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">//------------------</span>\n\n <span class=\"token operator\">+</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 上面的立即执行函数它也没有名字</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"匿名函数的参数\"><a href=\"#匿名函数的参数\" class=\"headerlink\" title=\"匿名函数的参数\"></a>匿名函数的参数</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h4><p><strong>一个函数被作为参数传递给另一个函数（在这里我们把另一个函数叫做“otherFunction”），回调函数在 otherFunction 中被调用。</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">b</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> names <span class=\"token operator\">=</span> <span class=\"token string\">'天天'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token comment\">//这个就是回调函数 a(name);</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我很好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'，你还好吗？'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 上面的代码，有两个方法，a和b，我们执行了b方法，并把a当做参数传给了b，那么这个时候a就是回调函数</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p><strong>概念</strong>：</p>\n<p>将任意多条代码组装在一起，可以在任何地方经过任意多次的<strong>调用执行</strong>，多次组装在一起的代码需要通过 关键字<strong>function</strong>来定义</p>","more":"<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">-</span> 变量是通过 <span class=\"token keyword\">var</span> 来定义的\n<span class=\"token operator\">-</span> 函数是通过 <span class=\"token keyword\">function</span> 拉定义的\n程序是通过一行一行的语句来组成的，语句是组成代码最基本的单位，同时这些基本单位，我们也可以把它组合在一起分成一个一个的小模块，将这些语句分成一个一个小模块的功能，我们叫方法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"定义函数的方式\"><a href=\"#定义函数的方式\" class=\"headerlink\" title=\"定义函数的方式\"></a>定义函数的方式</h4><h5 id=\"通过关键字-function-定义\"><a href=\"#通过关键字-function-定义\" class=\"headerlink\" title=\"通过关键字 function 定义\"></a>通过关键字 function 定义</h5><p>函数定义需要通过关键字 function，定义的语法格式如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span>，参数<span class=\"token number\">2.</span><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 代码体</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span>，参数<span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 代码体</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//----------------------</span>\n通过上面的语法格式，我们可以自己尝试着去定义一个方法\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'世界，你好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">typeof</span> sayHello<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类型结果为“function”</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码分析：</p>\n<ol>\n<li>function 是定义方法的关键字</li>\n<li>sayHello 则是这个方法的名字</li>\n<li>a 和 b 是方法的参数</li>\n<li>花括号里面的东西就是代码体</li>\n</ol>\n<h5 id=\"通过函数表达式来定义\"><a href=\"#通过函数表达式来定义\" class=\"headerlink\" title=\"通过函数表达式来定义\"></a>通过函数表达式来定义</h5><p>我们知道所有变量的定义都使用关键字 var 来进行， var 定义的变量后面跟什么数据，这个变量就是什么数据类型，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//string类型</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  \t <span class=\"token comment\">//number类型</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//Boolean</span>\n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//object</span>\n<span class=\"token keyword\">var</span> f<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined;</span>\n<span class=\"token comment\">//我们给什么样的值，它就是一个什么类型</span>\n\n<span class=\"token comment\">//---------------------------</span>\n如果给一个变量赋值成一个<span class=\"token keyword\">function</span>，是什么样子？\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>参数<span class=\"token number\">2.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 代码体</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">typeof</span> sayHello<span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码分析：</p>\n<ol>\n<li>所有变量的定义，我们都可以使用 var 来进行，变量后面跟什么数据 ，它就是什么类型</li>\n<li>sayHello 后面根的是一个 function，所以 sayHello 它应该是一个 方法</li>\n</ol>\n<h5 id=\"通过-Function-来进行定义\"><a href=\"#通过-Function-来进行定义\" class=\"headerlink\" title=\"通过 Function 来进行定义\"></a>通过 Function 来进行定义</h5><blockquote>\n<p>小写的 function 是关键字，大字的 Function 是系统自已定义了方法</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sayHello <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> sayHello<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//function</span>\n\n<span class=\"token comment\">// 这一种方式不建议大家去使用，它的使用场景是在后期方法动态创建里面</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em>三种定义函数的方式我们都要接触了解，但是在日常工作当中，你们所经常使用的方式就是第一种与第二种情况</em></p>\n<p><strong>思考</strong>：既然我们在工作当中经常会使用到第一种与第二种的情况，那么请各位同学注意，第一种情况的定义与第二种情况的定义有啥区别？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">sayHello2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//这一句代码它不会报</span>\n<span class=\"token function\">sayHello1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//这一句代码会报错</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello1</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃了没，世界\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span>function 关键字定义的方法可以在调用之前调用（任何地方，前后都行）\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>var 定义的方法只能在定义的代码之后去调用（执行上下文）\n\n<span class=\"token comment\">// 建议大家前期先用第一种，也就是function定义的方式</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"函数的代码体，会形成作用域\"><a href=\"#函数的代码体，会形成作用域\" class=\"headerlink\" title=\"函数的代码体，会形成作用域\"></a>函数的代码体，会形成作用域</h4><p>用 var 定义的变量没有作用域，但是定义在 function 的花括号里面的代码，它是有作用域的</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// userName定义到了方法里面，所以它是有作用域的</span>\n    <span class=\"token comment\">// 它的作用域是方法的花括号开始 ，到方法的花括号结束</span>\n    <span class=\"token keyword\">var</span> userName <span class=\"token operator\">=</span> <span class=\"token string\">\"天天\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//在作用域的范围里面，我们可以随意的调用变量，但是一旦出了这个花括号 ，就不行了</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错，提示 userName 没有被定义</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>总结</strong>：方法体里面定义的东西在方法体外边是不能够被使用的，如果真的要使用，可以使用后面我们学习的一另一个关键字 return</p>\n<p><strong>终上所述</strong>：如果你希望变量既能够在方法里面使用，也能够在方法外边使用，那么你就定义到方法的外边，如果你仅仅只是希望这个变量在方法里面使用，而不希望它在方法外边使用，则把它定义在方法的里面</p>\n<p>我们一般把定义在方法里面的变量叫<strong>局部变量</strong></p>\n<p>把定义在方法外边的变量叫<strong>全局变量</strong></p>\n<hr>\n<h4 id=\"方法的调用\"><a href=\"#方法的调用\" class=\"headerlink\" title=\"方法的调用\"></a>方法的调用</h4><p>方法（函数）通过上面的三种方式定义好了以后，你不调用它，它就不会执行，因为方法是调用执行的</p>\n<p>那么方法到底应该怎么调用呢？？？</p>\n<blockquote>\n<p>方法的调用其实指的就是把之前写在 function 花括号里面的代码执行一次</p>\n</blockquote>\n<h5 id=\"常规调用\"><a href=\"#常规调用\" class=\"headerlink\" title=\"常规调用\"></a>常规调用</h5><p>这一种方式是最基本的调用方式，当一个方法定义好了以后就会存在一个方法名，我们的常规调用就是通过这一个方法名来进行调用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//它的调用方式就是方法名加()</span>\n\n<span class=\"token comment\">//-------------------------</span>\n在这种方式里面，我们的调用是需要通过方法名来进行的（ 在调用方法的时候，我们可以给方法的参数赋值，这个赋值过程 ，我们叫传参）\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大家好才是真的好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//现在我们已经在上面的代码时面定义了一个方法，如果我们不去调用它，那么它就永远不会执行，现在我们通过普通的方式去调用它</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//调用方法，直接执行方法里面的代码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"立即执行函数\"><a href=\"#立即执行函数\" class=\"headerlink\" title=\"立即执行函数\"></a>立即执行函数</h5><p>在某些时间，如果我们希望定义好了这些方法以后立即的执行一次，怎么办呢，这个时候，我们可以使用到立即执行函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//定义方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大家好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//调用方法执行</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n在上面的代码里面， 我们可以看到之前已经定义好了一个方法，它的名子叫sayHello，然后我们又马上调用了它\n\n像这样一种情况，在后期工作的时候如果碰到了，我们可以使用立即执行函数\n<span class=\"token comment\">//------------------------</span>\n<span class=\"token operator\">+</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>代码分析</strong>：</p>\n<p>上面的代码通过 function 关键字定义好了 sayHello 方法以后，它在这个地方前面加了一个 + , 后面又添加上了一个()这个时候，碰到这种情况，大家要知道，这是一个立即执行函数，它定义好以方法以后，会立即执行一次</p>\n<h5 id=\"函数表达式执行\"><a href=\"#函数表达式执行\" class=\"headerlink\" title=\"函数表达式执行\"></a>函数表达式执行</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大家好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 上面的代码同步与下面的代码</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大家好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>我们把上面的三种情况的调用归为第一大类情况，他们的调用最终都是需要去加括号的</strong></p>\n<hr>\n<h4 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//我们在使用function定义方法的时候，除了定义方法名，还可以使用参数</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>参数<span class=\"token number\">2.</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//代码体</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span>参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>参数<span class=\"token number\">2.</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>定义方法的参数，可以理解成变量</li>\n<li>定义参数的时候，我们可以把它当成是一个变量，但是，我们不能够再去使用 var 关键字了<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n代码分析：\n    在上面的代码里面，我们通过<span class=\"token keyword\">function</span>关键字定义了一个方法名为sayHello的方法，\n    同时我们也看到后面的括号里面有userName<span class=\"token punctuation\">,</span>我们叫参数，\n    你可以理解为，它就相当于在<span class=\"token keyword\">function</span>里面定义的变量\n\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined ，因为我们在调用方法的时候，如果方法需要参数，我们在调用的过程中给他参数</span>\n\n    <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'天天'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//-----------------------------------</span>\n\n    上面的调用过程首先是先调用了方法sayHello，然后在调用的时候，还给之前定义的参数userName赋值为“天天”\n\n    在调用方法的时候，值会赋值给参数，这个赋值的过程我们叫传参<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h5 id=\"a-形式参数\"><a href=\"#a-形式参数\" class=\"headerlink\" title=\"a.形式参数\"></a>a.形式参数</h5><p>形式参数简称“形参”,指的是方法在定义的过程当中所使用（所出现）的参数</p>\n<p>形参默认是没有值的，它的值默认情况下是 undefined</p>\n<p>形参可以理解成变量，它的作用域只能在方法里面，不能在方法外边</p>\n<h5 id=\"b-实际参数\"><a href=\"#b-实际参数\" class=\"headerlink\" title=\"b.实际参数\"></a>b.实际参数</h5><p>实际参数简称“实参”，指的是方法调用的时候里面的的真实参数（真实数据）</p>\n<p><strong>重要</strong>：值是由实参赋值给形参（也可以理解为值是由实参传递给形参）</p>\n<h5 id=\"c-实参与形参的对应关系\"><a href=\"#c-实参与形参的对应关系\" class=\"headerlink\" title=\"c.实参与形参的对应关系\"></a>c.实参与形参的对应关系</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在上面的代码里面，我们在定义方法的时候，定义了两个形参，在调用方法的时候，我们给了两个实参</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"思考：\"><a href=\"#思考：\" class=\"headerlink\" title=\"思考：\"></a>思考：</h5><p>​现在有如下三种情况，请同学们判断如何进行</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>当实参与形参个数相同的时候<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//当实参与形参相同的时候，它们可以实现一一对应的关系，这个时候的a为10,b为20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li> 当实参小于形参个数的时候<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//当实参个数小于形参个数的时候，前面的值实现一一对应，后面多出来的形参的值为undefined;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li> 当实参个数大于形参个数的时候<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//前面的值实参与形参可以实现一一对应的效果，多出来的值如果需要获取 ，可以找arguments, 因为当前方法所接收到的所有实参的值都在arguments这个类数组里面</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"arguments-参数集合\"><a href=\"#arguments-参数集合\" class=\"headerlink\" title=\"arguments 参数集合\"></a>arguments 参数集合</h4><p>在所有的 function 里面，有一个隐藏的内置的对象 ，这个对象是<strong>当前方法所接收到的参数集合，也就是实参的集合</strong>，它就是<strong>arguments</strong></p>\n<p>arguments 仅仅只作用在方法的内部 ，出了方法以后就不能使用</p>\n<p>arguments 它是一个<strong>类数组</strong></p>\n<p><strong>类数组</strong>：<br>具备数组特性（通过索引取值，通过 length 确定长度），但不具备数组的方法的集合，Array.isArray(类数组) 得到的结果为 false</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在每个方法方法的内部 ，它都有一个隐藏的内置对象 arguments，它包含了当前方法所接收到的参数</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的代码里面，我们通过<strong>add(10,20)</strong> 这种方式来调用了方法，并向方向里面传递了两个参数。这个时候 a 代表的就是 10，b 代表的就是 20</p>\n<p>同时，我们也可以看到在方法内部 的 arguments 对象里面，它也保存了此次传递进去的 2 个实参</p>\n<p><strong>小案例</strong>：请编写一个方法，实现多个数的相加，然后打印输出结果</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//arguments代表所接收到的所有实参</span>\n    <span class=\"token comment\">//现在只需要将这些实参一个一个的加起来就可以了</span>\n    <span class=\"token comment\">//arguments它是一个类数组，它具备数组的特性，索引取值，length代表长度</span>\n    <span class=\"token keyword\">var</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//sum=sum+arguments[i];</span>\n        sum<span class=\"token operator\">+=</span>arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"方法的返回值\"><a href=\"#方法的返回值\" class=\"headerlink\" title=\"方法的返回值\"></a>方法的返回值</h4><p>一个方法经过调用执行完毕以后，它可以通过关键字 return 向外部返回一个值，这个值，我们可以通过变量把它接收到</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我在吃饭'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我在超市'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'寻找商品'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"糖果\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined \"糖果\"</span>\n<span class=\"token comment\">// 调用eat的时候，方法没有返回值，所以a得到的是 undefined</span>\n<span class=\"token comment\">// 调用buy的时候，return了一个“糖果”，所以b接受到的值就是“糖果”</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"所有的方法都有返回值\"><a href=\"#所有的方法都有返回值\" class=\"headerlink\" title=\"所有的方法都有返回值\"></a>所有的方法都有返回值</h5><ol>\n<li>JS 无需指定函数的返回值，因为 JS 可以在函数内部的任何地方返回任何类型的值</li>\n<li>如果 JS 没有通过 return 语句返回值 ，那么默认返回的就是 undefined;<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> str<span class=\"token operator\">=</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//2</span>\n\n<span class=\"token keyword\">var</span> str1<span class=\"token operator\">=</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//undefined;</span>\n\n<span class=\"token keyword\">var</span> str2<span class=\"token operator\">=</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//1</span>\n\n<span class=\"token comment\">//--------------------------</span>\n方法在调用的过程当中，如果我们需要接收方法的返回值（ 也就是<span class=\"token keyword\">return</span>的值），可以使用一个变量去接收\n\n<span class=\"token keyword\">var</span> 变量名<span class=\"token operator\">=</span><span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这样整个方法调用结束以后，方法内部return出来的值就会赋值给变量名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"方法返回值的用处\"><a href=\"#方法返回值的用处\" class=\"headerlink\" title=\"方法返回值的用处\"></a>方法返回值的用处</h5><ol>\n<li><p>结束方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">当一个方法的内部发现了<span class=\"token keyword\">return</span>的关键字以后，那么，整个方法就直接结束了，后面的代码始终都不会执行\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始买面了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"热干面\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//因为看到了return关键字，所以方法直接 返回一个值以后，结束运行</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鸡蛋\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//后面的这一行代码因为在return后面，所以不会执行了</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//-------------------------------</span>\n\n如果仅仅只是想结束方法，而不是去返回值 ，可以直接给一个<span class=\"token keyword\">return</span>关键字\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>   <span class=\"token comment\">//直接return 结束代码</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>更容易的实现模块化（低耦合）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//取arr最大值</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> max<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max<span class=\"token operator\">&lt;=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            max<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//现在max就是我们的最大值</span>\n    <span class=\"token comment\">//我一定要告诉外边的人，你要我求的最大值是多少</span>\n    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//排序</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> newArr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//新建一个新的数组，用这个新的数组保存排序以后的结果</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//求arr数组里面最大的值</span>\n        <span class=\"token comment\">//在新的数组里面添加</span>\n        newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把当前最大值在arr里面删除</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> resultArr<span class=\"token operator\">=</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resultArr'</span><span class=\"token punctuation\">,</span> resultArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9-0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>代码分析：</strong></p>\n<p>本题在这里可以把它分为两个部分，第一部分是求当前数组里面最大的一个值，第二个部分就是把得到的这个最大值重新放到一个新的数组里面去，这每个方法只做一件事情就 OK 了</p>\n<hr>\n<h4 id=\"方法的调用者与方法的引用\"><a href=\"#方法的调用者与方法的引用\" class=\"headerlink\" title=\"方法的调用者与方法的引用\"></a>方法的调用者与方法的引用</h4><h5 id=\"方法的调用控制\"><a href=\"#方法的调用控制\" class=\"headerlink\" title=\"方法的调用控制\"></a>方法的调用控制</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">如果在某一段程序在调用方法的过程当中，我们希望某一个方法a只能被某另一个方法b调用，怎么办\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是c方法\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//---------------------------</span>\n\n在上面，我们定义了两个方法，在定义的两个方法里面，我们a和b是同时存在，我们可以在任何地方调用a，我也可以在任何地方调用b\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//----------------------------</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，怎么样让 a 方法只能被 b 方法调用呢，而不能被 c 调用呢?</p>\n<ol>\n<li><p>通过作用域的方式来实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">方法的花括号会形成一个作用域 ，定义在方法里面的东西，不能被外部使用，所以我们可以把上面的代码做一些小小的改变\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//现在，我把a方法定义在了方法b里面</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//在这里可以调用，因为a定义在了方法b里面</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是c方法\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//-------------</span>\n代码分析：\n当我们把方法a定义到了方法b以后，因为b是一个封闭的作用域 ，所以外边的任何东西都访问不到a<span class=\"token punctuation\">,</span>只有b能够访问到<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>通过方法内部属性 caller 来判断</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">在方法的内部除了一个arguments的隐藏对象以外，还有一个属性caller也是方法内部的隐藏属性\n\n通过caller这个属性，我们可以判断出是谁调用了这个方法\n\n如果是全局调用，那么这个caller就是空值<span class=\"token keyword\">null</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>caller<span class=\"token operator\">!=</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//如果当前方法不是b在调用，直接结束方法</span>\n   <span class=\"token punctuation\">&#125;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是方法b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是c方法\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"方法的引用\"><a href=\"#方法的引用\" class=\"headerlink\" title=\"方法的引用\"></a>方法的引用</h5><p>在方法的内部的隐藏对象里面，有一个属性叫 callee，这一个属性指向了当前的方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//本意是指当前方法参数的集合</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>callee<span class=\"token operator\">===</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//--------------</span>\n代码分析：\n在上面的代码里面，callee指向了当前的方法，当前的方法是a，所以callee就是a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h4><p>什么是重载：在编程语言里面，方法名相同，但是方法的参数类型或个数不相同，这个时候，同名的方法都会同时存在，这个情况，我们叫方法的重载 。</p>\n<p>下面是 java 代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//第一个方法</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     \t <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是第一次出现\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">//第二个方法</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是第二次出现\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">//第三个方法</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是第三次出现\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//相当于调用了第一个方法</span>\n   <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//相当于调用了第二个方法</span>\n   <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//相当于调用了第三个方法</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的一段 java 代码里面，我们可以看到三个同名的方法，它们的方法名相同</p>\n<p>第一个方法与第二个方法的参数类型相同(都是 int 类型),但是它们的个数不相同</p>\n<p>第一个方法与第三个方法的参数个数相同，但是它们的类型不相同(一个是 int,一个是 String)类型</p>\n<p>针对上面的情况，在 Java 里面是允许，这样它们会构成一个东西叫<strong>方法的重载</strong></p>\n<hr>\n<h4 id=\"JS-方法没有重载\"><a href=\"#JS-方法没有重载\" class=\"headerlink\" title=\"JS 方法没有重载\"></a>JS 方法没有重载</h4><p>当在 JS 里面出现了重名的方法以后，我们如何处理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n    1.方法名相同\n    2.参数个数不相同\n*/</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**************/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是第一次\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是第二次\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因为 JS 的方法没有重载，所以它不可能像其它的编程语言那样，同名的方法同时存在，这个时候，后面的同名方法肯定会赋盖掉之前的方法，所以这个时候，当我们去掉用 add 的方法的时候，其实就是以后最一次定义的 add 方法为主</p>\n<hr>\n<h4 id=\"为什么-JS-没有重载\"><a href=\"#为什么-JS-没有重载\" class=\"headerlink\" title=\"为什么 JS 没有重载\"></a>为什么 JS 没有重载</h4><p>重载是根据<strong>参数的类型</strong>与<strong>参数的个数来</strong>区别出重名的方法的</p>\n<ul>\n<li><p>它不能确定参数类型</p>\n<p>重载是根据参数的类型与参数的个数来区别出重名的方法的，但是因为 JS 在这里是一个弱类型语言，它所有的变量定义都使用 var,它并不能决定变量的类型，它的类型是由它具体的值来决定的</p>\n</li>\n<li><p>它不能确定参数的个数</p>\n<p>我们在定义方法的时候，实参与形参是不需要实现一一对应关系 ，这样我们也确定不了参数的个数</p>\n<p>现在我们既不能确定参数的类型 ，也不能确定参数的个数，所以在 JS 里面的方法是没有重载的，正是因为没有重载，所以当出现同名的方法的时候，后面的方法会覆盖掉之前的方法</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><p>方法内部如果又调用了当前方法，这样就形成了一个递归</p>\n<p>递归的本质可以把它理解成我们之前的循环，所以如果递归没有处理好（没有判断条件），也很容易形成死循环</p>\n<p><strong>案例 1：请输出 0~9 之间的每一个数</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//-------上面是for循环写法------------</span>\n\n<span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>案例 2：求 1~150 之间偶数的和，不允许使用循环</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    sum2<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// sum2=sum2+i;</span>\n    i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sumA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">sumA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//练习：求5的阶乘</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n num <span class=\"token operator\">=</span><span class=\"token number\">5</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">return</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">1</span>\n num <span class=\"token operator\">=</span><span class=\"token number\">4</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">return</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">1</span>\n num <span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">return</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">1</span>\n num <span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">1</span>\n num <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h4><p>匿名函数也可以匿名方法，从名词上面理解就是这个方法没有名字</p>\n<blockquote>\n<p>方法如果有了名子以后，我们可以通过方法名去调用执行这个方法，如果没有名子，我们将无法调用</p>\n</blockquote>\n<h5 id=\"a-第一种情况\"><a href=\"#a-第一种情况\" class=\"headerlink\" title=\"a.第一种情况\"></a>a.第一种情况</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//---------------------</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 像上面的函数，它没有名字，同时也立即执行了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"b-第二种情况\"><a href=\"#b-第二种情况\" class=\"headerlink\" title=\"b.第二种情况\"></a>b.第二种情况</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">+</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">//------------------</span>\n\n <span class=\"token operator\">+</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 上面的立即执行函数它也没有名字</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"匿名函数的参数\"><a href=\"#匿名函数的参数\" class=\"headerlink\" title=\"匿名函数的参数\"></a>匿名函数的参数</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h4><p><strong>一个函数被作为参数传递给另一个函数（在这里我们把另一个函数叫做“otherFunction”），回调函数在 otherFunction 中被调用。</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">b</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> names <span class=\"token operator\">=</span> <span class=\"token string\">'天天'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token comment\">//这个就是回调函数 a(name);</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我很好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'，你还好吗？'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 上面的代码，有两个方法，a和b，我们执行了b方法，并把a当做参数传给了b，那么这个时候a就是回调函数</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"JavaScript - 条件语句","_content":"\n### 条件语句\n\n条件语句某些其它的编程里面它也属于分支语句，它是根据一些条件来选择不同的代码去执行\n\n条件语句在编程里面当作是 if...else...语句\n<!--more-->\n语法格式\n\n```javascript\n// 只做一次的条件判断\nif(条件){\n    // 执行代码\n} else{\n    // 执行\n}\n```\n\n例子：\n\n```javascript\n// a是正数还是负数\nvar a=10;\nif(a>=0){\n    console.log('a是正数');\n} else{\n    console.log('a是负数');\n}\n```\n\n> 在上面的例子里面，我们把 if...else 这种情写法当成条件语句，它是根据某一个判断条件来执行的，这个判断条件返回一个 Boolean 类型的值（这个地方的 Boolean 不一定真的是 Boolean 类型）\n\n针对 if 后面的条件，我们看一下下面的问题\n\n```javascript\nvar a=8;\n// 如果a不为null，undefined，“”，我们就赋值给b，否则就给b一个默认值520\nvar b=a||520; // a 为true返回a，否则返回520\n// Boolean(8) true 返回第一个a\n```\n\n在上面的写法里面，我们是根据的逻辑运算符来进行的（要当于这个地方的 a 也做了一次 Boolean(a)的转换）\n\n上面的写法，可以转换成如下写法\n\n```javascript\nvar a=8;\n// Boolean(a); 得到true\nif(a){\n    var b=a;\n} else{\n    var b=520;\n}\n\n这一个时候的a放进去的不是一个布尔类型，但是我们可以通过Boolean去转换一次，得到Boolean类型的值，把这个值看成是它的结果\n```\n\n条件语句是代码应该根据不同的条件去进行执行，当有多个条件的时候，我们应该怎么办呢？\n\n```javascript\nif(条件1){\n    //代码1\n}\nelse if(条件2){\n    //代码2\n}\n//.......后面还可以有很多很多\nelse{\n    //最后条件都不成立的结果\n}\n\nif(username == ''){\n\tconsole.log('不为空')\n\treturn false;\n}\nelse if(tel == ''){\n\tconsole.log('不为空');\n\treturn false;\n}\nelse{\n\t// username tel都有值\n\t// ajax\n}\n\n\n\n条件语句可以进行多个条件的叠加\nelse是可以省略的\n花括号可以省略，但是只是在条件语句执行的代码块里面只有一行代码的时候才可以\nif(xxx) return;\n```\n\n案例：\n现有全班学生的分数，我们希望通过这些分数做一次统计对比，划分层次，100 ~ 90 算优秀，89 ~ 80 算良好,79 ~ 70 算中等,69 ~ 60 算及格,60 分以下算不及格\n\n```javascript\nvar score=88;\nvar leave;   //等级\nif(score>=90&&score<=100){\n    leave=\" 优秀\";\n}\nelse if(score>=80&&score<=89){\n    leave=\"良好\";\n}\nelse if(score>=70&&score<=79){\n    leave=\"中等\";\n}\nelse if(score>=60&&score<=69){\n    leave=\"及格\";\n}\nelse{\n    leave=\"不及格\";\n}\n//在条件限制完整的情况之下，我们是可以更改if的顺序的，但else必须放在最后\n```\n\n> 上面的代码就是一个多条件的 if 语句执行，它根据不同的条件去做了一次判断\n\n**思考：**上在的代码是否可以简化掉\n\n```javascript\nvar score=88;\nvar levae;   //等级\nif(score>=90&&score<=100){\n    leave=\"优秀\";\n}\nelse if(score>=80){\n    leave=\"良好\";\n}\nelse if(score>=70){\n    leave=\"中等\";\n}\nelse if(score>=60){\n    leave=\"及格\";\n}\nelse{\n    leave=\"不及格\";\n}\n```\n\n如果我们把上面的代码的 if 条件转一下顺序，结果就会有影响了\n\n```javascript\nvar score = 85;\nvar leave; //等级\nif (score >= 90 && score <= 100) {\n   leave = \"优秀\";\n} else if (score >= 70) {\n   leave = \"中等\";\n} else if (score >= 80) {\n   leave = \"良好\";\n}  else if (score >= 60) {\n   leave = \"及格\";\n} else {\n   leave = \"不及格\";\n}\ndocument.write(leave);   //正确的结果应该是”良好“，结果确是'中等'\n\n上面的代码就不准确了，时候显示的结果就出错了\n这个时候 条件的顺序是不能够去进行顺序切换\n```\n\n---\n\n条件语句也叫分支语句，最终他们的代码都 会从上向下顺序执行，但是有一种语句它却是循环执行的\n\n### 循环语句\n\n```javascript\n/* 重复去执行一段代码（重复的去干某一些事情，如搬水等）\n\n为什么需要循环语句？\n\n问题：现在一楼有100桶水，每次只能够搬一桶水，现问要搬要搬多少次，怎么搬？？？\n\n上面的搬水的事情，一次干不完，所以它要干100次，同样，在代码里面，如果某些代码一次干不完，我们循环多次去干 */\n```\n\n#### for 循环\n\nfor 循环是编程语言里面最常见的一种循环方法，它使用关键字 for 来进行，在里面限定它的开始条件与结束条件，但给一个自变量，就完成了\n\n语法格式：\n\n```javascript\nfor(开始条件;结束条件;自变量){\n    //要执行的代码\n}\n```\n\n现在我们试着把搬水的方法完成掉\n\n```javascript\n/*\n\t搬水问题分析\n\t1.它要搬多少桶    100\n\t2.从第几桶开始搬   1\n\t3.每次搬几桶      1\n*/\nfor(var i=1;i<=100;i=i+1){\n    console.log(\"搬到了第\"+i+\"桶水\");\n}\n// 开始条件：var i=1;\n// 结束条件：i<=100; 只要这个条件是成立的，我都要执行循环\n// 自变量：i=i+1;\n\n上面的代码就是一个最简单的循环语句，它从第1次开始，到100次结果，每次的自变量都是+1\n```\n\n##### 循环语句循环执行的到底是哪些代码？\n\n循环语句循环的是三部分：\n\n1. 判断条件\n2. 代码体\n3. 自变量执行\n\n上面的循环语句，我们试着去做一些规范化的处理\n\n```javascript\nfor(var i=0;i<100;i++){\n    console.log(\"搬到了第\"+i+\"桶\");\n}\n```\n\n当循环省略开始条件的时候\n\n```javascript\nvar i=0;\nfor(;i<100;i++){\n    // 代码段\n}\n\n上面的代码，我们把开始条件省略掉，放在外面，这也是可行的\n```\n\n当循环省略结束条件的时候\n\n```javascript\nfor(var i=0;;i++){\n    // 代码段\n}\n\n这个时候，在这里他没有循环结束条件，所以它会构成一个死循环\n如果不想构成死循环，后期我们会使用 break 关键字\n```\n\n当循环省略自变量的时候\n\n```javascript\nfor(var i=0;i<100;){\n    //代码段\n    console.log('搬到了第'+i+'桶水');\n    i++;\n}\n```\n\nfor 循环语句里面的三个条件我们都可以省略掉，所以当我们看到如下的语句的时候，不要认为他错了\n\n```javascript\nfor(;;){\n    //它会执行一次死循环（无限次的循环）\n}\n```\n\n###### for 循环练习\n\n1. 请计算出 1~1000 的求和\n```javascript\nvar sum=0;   //把求和的结果，放在这个sum里面\nfor(var i=0;i<=1000;i++){\n    // 我要把上一次的计算结果，保存在sum里面，然后在下一次去调用\n    sum+=i; //sum=sum+i;\n}\nconsole.log('sum', sum);\n```\n\n2. 请计算出 1~50 里面能被 3 整除的和\n```javascript\nvar sum2 = 0;\n/* 第一种 */\nfor(var i=1;i<=50;i++){\n    //在这里，相当于把每一个数都走了一次\n    //看一下这个数能被除3整除 能被整除取余值是0\n    if(i%3==0){\n        sum2+=i;\n    }\n}\nconsole.log('sum2', sum2);\n\n/* 第二种 */\nfor(var i=1;i<=50;i+=3){\n    console.log(i);\n    // 直接把3的倍数循环出来相加\n    sum2+=i;\n}\nconsole.log('sum2', sum2)\n```\n\n3. 在页面打印九九乘法表\n```javascript\ndocument.writeln('打印九九乘法表');\ndocument.writeln('<br>')\nfor(var j=1; j<=9; j++){\n   for(var i=1; i<=j; i++){\n    document.writeln(i+\"*\"+j+\"=\"+i*j)\n   }\n   document.writeln('<br>')\n}\n```\n\n#### while 循环\n\n语法格式\n\n```javascript\nwhile(条件表达式){\n    //代码体\n}\n```\n\n> while 循环跟着的是条件表达式，如果这个条件表达式为真，那么，就执行代码体，执行完代码体以后，再继续判断现在的条件是否还是成立的，如果成立，是继续执行，一直偈这样去重复\n\n**问题：**现有 100 块砖需要从砖厂搬过来，一次只能搬一块，现在怎么样通过计算机的编程实现\n\n```javascript\nfor(var i=0;i<100;i++){\n    console.log(\"杨欢搬到第\"+i+\"块砖了\");\n}\n//上面的代码就是通过for循环执行 100 次的搬砖效果，现在我们怎么样通过while循环来开始\n```\n\n把上面的代码转换 while 循环以后\n\n```javascript\n/*\n  1.从第几块砖开始搬   1\n  2.一次搬多少块        1\n  3.一共要搬多少块      100\n*/\nvar i=0;\nwhile(i<100){\n    console.log(\"搬到第\"+i+\"块砖了\");\n    i++;\n}\n\nwhile循环与for循环是可以相互转换的\n```\n\n在之前的时候， 我们是可以进行一个 for 循环的嵌套的，那么 while 也可以嵌套在一起，现在，可以试着把刚刚的乘法口诀使用 while 来一次\n\n```javascript\ndocument.write('打印九九乘法表');\ndocument.writeln('<br>')\nvar j=1;\nwhile(j<=9){\n    var i=1;\n    while(i<=j){\n        document.writeln(i+\"*\"+j+\"=\"+i*j)\n        i++;\n    }\n    document.writeln('<br>')\n    j++;\n}\n```\n\n#### do...while 循环\n\nwhile 与 do...while 的使用方式很相近，都是一个循环，只是有一点不一样，**while 是先判断循环条件，如果成立则执行循环，而 do...while 在这里是先执行再去判断条件是否成立**\n\ndo...while 在这里的语法格式为\n\n```javascript\ndo{\n   //代码段\n}while(循环条件判断)\n\nvar n = 0;\nwhile(n<=10){\n\tn=n+1;\n}\n\n//------------------\n\ndo{\n    n=n+1;\n}while(n<=10);\n\n/* 建议在 do/while 结构的尾部使用分号表示语句结束，避免意外情况发生。 */\n```\n\n它们在使用的过程当中，99%都是相同的，循环的方式也相同，唯一的不同点\n\n- while 是先判断循环条件是否成立，再去执行循环\n- do...while 是先执行循环体代码，再去判断循环条件\n\n**总结：**\n\n1. 当循环的初始条件成立的时候，它们执行的循环次数是一样的\n2. 当循环的初始条件不成立的时候，do...while 会执行一次，而 while 不会执行，也就是，**do...while 先执行循环中的语句,然后再判断表达式是否为真,如果为真则继续循环；如果为假,则终止循环。因此,do-while 循环至少要执行一次循环语句。**\n\n---\n\n##### continue 关键字\n\ncontinue 关键字属于配合循环语句一起使用的一个关键字，它主要的作用就是用于跳过当前循环，再次执行下一次循环\n\n```javascript\nfor(var i=0;i<20;i++){\n    if(i==15){\n        //假设在搬第15块砖的时候，接了电脑，它要出去接电话\n        console.log(\"在接电话\");\n        continue;\n    }\n    console.log(\"在搬第\"+i+\"块砖\");\n}\n\n在上面的代码里面它跳过了第15次的循环，而继续进行后面的循环，一直到循环结果\n```\n\n##### break 关键字\n\n这个关键字也与循环语句结合起来一起使用，然后它主要的作用主就相当于中断当前循环（结束循环），后面的循环次数都不做了\n\n```javascript\nfor(var i=0;i<20;i++){\n    if(i==15){\n        console.log('接到老爸电话，回家继承一个亿');\n        //continue; 相当于拒绝继承一个亿，继续搬砖\n        break; // 中断循环，后面没有完成的循环也不做了。相当于同意回家继承一个亿\n    }\n    console.log('i', i);\n}\n```\n\n##### label 关键字\n\n默认情况之下，break 与 continue 都是针对于当前循环，但是，我们也可以让它针对指定的循环，这个时候，我们就需要配置另一个语句来一起使用\n\nlabel 语句用于标明某一段代码的入口\n\n```javascript\nfor (var j = 1; j <= 9; j++) {\n   for (var i = 1; i <= j; i++) {\n       if(i==5){\n           break;\n       }\n       document.writeln(i + \"*\" + j + \"=\" + i * j);\n   }\n   document.writeln(\"<br>\");\n}\n```\n\n现在我们在后面加了一个 break.这个 break 默认针对的就是当前的这个 for 循环\n\n```javascript\nout: for (var j = 1; j <= 9; j++) {\n    inner: for (var i = 1; i <= j; i++) {\n        if(i==5){\n            break out;\n        }\n        document.writeln(i + \"*\" + j + \"=\" + i * j);\n    }\n    document.writeln(\"<br>\");\n}\n```\n\n我们分别在外边的循环上面添加了一个 out,在里面的循环上面，我们添加了一个 inner\n\n后面当我们需要中断某个循环的时候，我们可以在 break 关键字的后边加上刚刚添加的 label（out 与 inner）\n\n我们刚刚是在 break 的后面添加了 label ，我们可以在 continue 的后面添加 label\n\n```javascript\ncontinue label1;\nbreak label2;\n//上面的两种情况都是正常的\n```\n\n---\n\n### 选择语句\n\n选择语句指的是 switch...case 语句，主要的语法格式如下\n\nif 语句与它的关系最为密切\n\n```javascript\nswitch(值){\n    case 值1：\n        break;\n    case 值2：\n        break;\n    default:\n        break;\n}\n//把switch后面的值与case后面的值做严格相等，如果相等，那么我就选择你\n```\n\n现在我们已经知道 if 语句与 switch 非常相近，那么，我们现在就试着把下面的 if 语句转为 switch 语句\n\n```javascript\nvar weather=\"sun\";\nif(weather==\"rain\"){\n    console.log(\"我们去看电影\");\n}\nelse if(weather==\"sun\"){\n    console.log(\"我们去森林公园\");\n}\nelse if(weather==\"wind\"){\n    console.log(\"我们去放风筝\");\n}\nelse{\n    console.log(\"我们回家睡觉\");\n}\n//上面的条件语句指的就是根据某一个条件选择某一段代码去执行\n\n//-----------------------------\nvar weather = \"sun\";\nswitch (weather) {\n    case \"rain\":\n        console.log(\"我们去看电影\");\n        break;\n    case \"sun\":\n        console.log(\"我们去森林公园\");\n        break;\n    case \"wind\":\n        console.log(\"我们去放风筝\");\n        break;\n    default:\n        console.log(\"我们回家睡觉\");\n}\n```\n\n1. switch 选择的时候，是从第一个 case 开始找，一直找到匹配，如果找不到就去 default 里面找\n2. 如果 switch 找到了 case 以后，那么会执行 case 下面的代码，执行完毕以后，它会看一下，你是否有 break 关键字，如果有，那么，后面的就不选了，如果没有 break，就从你当前选择的这个地方开始，后面每个 case 我都执行一次,直到遇到 break 或代码结束\n\n###### switch 练习\n\n1. 我们现在都知道一年有 12 个月，现在，我们要做一个判断 ，11，12，1，2 这四个月为冬天，3，4，为春天，5,6,7,8,为夏天，9，10 为秋天\n```javascript\n设计一个程序：现在给一个变量month，根据 month的值输出一句话，判断这个month是在那个季节里面\n\nvar month = 12;\nswitch (month) {\n case 11:\n case 12:\n case 1:\n case 2:\n     console.log(\"冬天\");\n     break;\n case 3:\n case 4:\n     console.log(\"春天\");\n     break;\n case 5:\n case 6:\n case 7:\n case 8:\n     console.log(\"夏天\");\n     break;\n case 9:\n case 10:\n     console.log(\"秋天\");\n     break;\n default:\n     console.log(\"month的值不对\");\n}\n```\n\n2. 现有全班学生的分数，我们希望通过这些分数 score 做一次统计对比，划分层次 leave，100 ~ 90 算优秀，89 ~ 80 算良好,79 ~ 70 算中等,69 ~ 60 算级格,60 分以下算不级格（使用 switch 来实现）\n```javascript\nvar score = 12;\nvar num = parseInt(score / 10);\n//这个整数只有可能 是0,1,2,3,4,5,6,7,8,9,10\nswitch (num) {\n    case 10:\n    case 9:\n        console.log(\"优秀\");\n        break;\n    case 8:\n        console.log(\"良好\");\n        break;\n    case 7:\n        console.log(\"中等\");\n        break;\n    case 6:\n        console.log(\"及格\");\n        break;\n    case 5:\n    case 4:\n    case 3:\n    case 2:\n    case 1:\n    case 0:\n        console.log(\"不及格\");\n        break;\n    default:\n        console.log(\"分数错误\");\n}\n\n//----------------\nvar score = 76;\nswitch(true){\n    case score<=100&&score>=90:       //false\n        console.log(\"优秀\");\n        break;\n    case score<=89&&score>=80:        //false\n        console.log(\"良好\");\n        break;\n    case score<=79&&score>=70:        //true\n        console.log(\"中等\");\n        break;\n    case score<=69&&score>=60:        //false\n        console.log(\"及格\");\n        break;\n    case score<=59&&score>=0:         //false\n        console.log(\"不及格\");\n        break;\n    default:\n        console.log(\"分数不合法\");\n}\n```\n","source":"_posts/term-statement.md","raw":"---\ntitle: JavaScript - 条件语句\ntags: 条件语句\ncategories: js\n---\n\n### 条件语句\n\n条件语句某些其它的编程里面它也属于分支语句，它是根据一些条件来选择不同的代码去执行\n\n条件语句在编程里面当作是 if...else...语句\n<!--more-->\n语法格式\n\n```javascript\n// 只做一次的条件判断\nif(条件){\n    // 执行代码\n} else{\n    // 执行\n}\n```\n\n例子：\n\n```javascript\n// a是正数还是负数\nvar a=10;\nif(a>=0){\n    console.log('a是正数');\n} else{\n    console.log('a是负数');\n}\n```\n\n> 在上面的例子里面，我们把 if...else 这种情写法当成条件语句，它是根据某一个判断条件来执行的，这个判断条件返回一个 Boolean 类型的值（这个地方的 Boolean 不一定真的是 Boolean 类型）\n\n针对 if 后面的条件，我们看一下下面的问题\n\n```javascript\nvar a=8;\n// 如果a不为null，undefined，“”，我们就赋值给b，否则就给b一个默认值520\nvar b=a||520; // a 为true返回a，否则返回520\n// Boolean(8) true 返回第一个a\n```\n\n在上面的写法里面，我们是根据的逻辑运算符来进行的（要当于这个地方的 a 也做了一次 Boolean(a)的转换）\n\n上面的写法，可以转换成如下写法\n\n```javascript\nvar a=8;\n// Boolean(a); 得到true\nif(a){\n    var b=a;\n} else{\n    var b=520;\n}\n\n这一个时候的a放进去的不是一个布尔类型，但是我们可以通过Boolean去转换一次，得到Boolean类型的值，把这个值看成是它的结果\n```\n\n条件语句是代码应该根据不同的条件去进行执行，当有多个条件的时候，我们应该怎么办呢？\n\n```javascript\nif(条件1){\n    //代码1\n}\nelse if(条件2){\n    //代码2\n}\n//.......后面还可以有很多很多\nelse{\n    //最后条件都不成立的结果\n}\n\nif(username == ''){\n\tconsole.log('不为空')\n\treturn false;\n}\nelse if(tel == ''){\n\tconsole.log('不为空');\n\treturn false;\n}\nelse{\n\t// username tel都有值\n\t// ajax\n}\n\n\n\n条件语句可以进行多个条件的叠加\nelse是可以省略的\n花括号可以省略，但是只是在条件语句执行的代码块里面只有一行代码的时候才可以\nif(xxx) return;\n```\n\n案例：\n现有全班学生的分数，我们希望通过这些分数做一次统计对比，划分层次，100 ~ 90 算优秀，89 ~ 80 算良好,79 ~ 70 算中等,69 ~ 60 算及格,60 分以下算不及格\n\n```javascript\nvar score=88;\nvar leave;   //等级\nif(score>=90&&score<=100){\n    leave=\" 优秀\";\n}\nelse if(score>=80&&score<=89){\n    leave=\"良好\";\n}\nelse if(score>=70&&score<=79){\n    leave=\"中等\";\n}\nelse if(score>=60&&score<=69){\n    leave=\"及格\";\n}\nelse{\n    leave=\"不及格\";\n}\n//在条件限制完整的情况之下，我们是可以更改if的顺序的，但else必须放在最后\n```\n\n> 上面的代码就是一个多条件的 if 语句执行，它根据不同的条件去做了一次判断\n\n**思考：**上在的代码是否可以简化掉\n\n```javascript\nvar score=88;\nvar levae;   //等级\nif(score>=90&&score<=100){\n    leave=\"优秀\";\n}\nelse if(score>=80){\n    leave=\"良好\";\n}\nelse if(score>=70){\n    leave=\"中等\";\n}\nelse if(score>=60){\n    leave=\"及格\";\n}\nelse{\n    leave=\"不及格\";\n}\n```\n\n如果我们把上面的代码的 if 条件转一下顺序，结果就会有影响了\n\n```javascript\nvar score = 85;\nvar leave; //等级\nif (score >= 90 && score <= 100) {\n   leave = \"优秀\";\n} else if (score >= 70) {\n   leave = \"中等\";\n} else if (score >= 80) {\n   leave = \"良好\";\n}  else if (score >= 60) {\n   leave = \"及格\";\n} else {\n   leave = \"不及格\";\n}\ndocument.write(leave);   //正确的结果应该是”良好“，结果确是'中等'\n\n上面的代码就不准确了，时候显示的结果就出错了\n这个时候 条件的顺序是不能够去进行顺序切换\n```\n\n---\n\n条件语句也叫分支语句，最终他们的代码都 会从上向下顺序执行，但是有一种语句它却是循环执行的\n\n### 循环语句\n\n```javascript\n/* 重复去执行一段代码（重复的去干某一些事情，如搬水等）\n\n为什么需要循环语句？\n\n问题：现在一楼有100桶水，每次只能够搬一桶水，现问要搬要搬多少次，怎么搬？？？\n\n上面的搬水的事情，一次干不完，所以它要干100次，同样，在代码里面，如果某些代码一次干不完，我们循环多次去干 */\n```\n\n#### for 循环\n\nfor 循环是编程语言里面最常见的一种循环方法，它使用关键字 for 来进行，在里面限定它的开始条件与结束条件，但给一个自变量，就完成了\n\n语法格式：\n\n```javascript\nfor(开始条件;结束条件;自变量){\n    //要执行的代码\n}\n```\n\n现在我们试着把搬水的方法完成掉\n\n```javascript\n/*\n\t搬水问题分析\n\t1.它要搬多少桶    100\n\t2.从第几桶开始搬   1\n\t3.每次搬几桶      1\n*/\nfor(var i=1;i<=100;i=i+1){\n    console.log(\"搬到了第\"+i+\"桶水\");\n}\n// 开始条件：var i=1;\n// 结束条件：i<=100; 只要这个条件是成立的，我都要执行循环\n// 自变量：i=i+1;\n\n上面的代码就是一个最简单的循环语句，它从第1次开始，到100次结果，每次的自变量都是+1\n```\n\n##### 循环语句循环执行的到底是哪些代码？\n\n循环语句循环的是三部分：\n\n1. 判断条件\n2. 代码体\n3. 自变量执行\n\n上面的循环语句，我们试着去做一些规范化的处理\n\n```javascript\nfor(var i=0;i<100;i++){\n    console.log(\"搬到了第\"+i+\"桶\");\n}\n```\n\n当循环省略开始条件的时候\n\n```javascript\nvar i=0;\nfor(;i<100;i++){\n    // 代码段\n}\n\n上面的代码，我们把开始条件省略掉，放在外面，这也是可行的\n```\n\n当循环省略结束条件的时候\n\n```javascript\nfor(var i=0;;i++){\n    // 代码段\n}\n\n这个时候，在这里他没有循环结束条件，所以它会构成一个死循环\n如果不想构成死循环，后期我们会使用 break 关键字\n```\n\n当循环省略自变量的时候\n\n```javascript\nfor(var i=0;i<100;){\n    //代码段\n    console.log('搬到了第'+i+'桶水');\n    i++;\n}\n```\n\nfor 循环语句里面的三个条件我们都可以省略掉，所以当我们看到如下的语句的时候，不要认为他错了\n\n```javascript\nfor(;;){\n    //它会执行一次死循环（无限次的循环）\n}\n```\n\n###### for 循环练习\n\n1. 请计算出 1~1000 的求和\n```javascript\nvar sum=0;   //把求和的结果，放在这个sum里面\nfor(var i=0;i<=1000;i++){\n    // 我要把上一次的计算结果，保存在sum里面，然后在下一次去调用\n    sum+=i; //sum=sum+i;\n}\nconsole.log('sum', sum);\n```\n\n2. 请计算出 1~50 里面能被 3 整除的和\n```javascript\nvar sum2 = 0;\n/* 第一种 */\nfor(var i=1;i<=50;i++){\n    //在这里，相当于把每一个数都走了一次\n    //看一下这个数能被除3整除 能被整除取余值是0\n    if(i%3==0){\n        sum2+=i;\n    }\n}\nconsole.log('sum2', sum2);\n\n/* 第二种 */\nfor(var i=1;i<=50;i+=3){\n    console.log(i);\n    // 直接把3的倍数循环出来相加\n    sum2+=i;\n}\nconsole.log('sum2', sum2)\n```\n\n3. 在页面打印九九乘法表\n```javascript\ndocument.writeln('打印九九乘法表');\ndocument.writeln('<br>')\nfor(var j=1; j<=9; j++){\n   for(var i=1; i<=j; i++){\n    document.writeln(i+\"*\"+j+\"=\"+i*j)\n   }\n   document.writeln('<br>')\n}\n```\n\n#### while 循环\n\n语法格式\n\n```javascript\nwhile(条件表达式){\n    //代码体\n}\n```\n\n> while 循环跟着的是条件表达式，如果这个条件表达式为真，那么，就执行代码体，执行完代码体以后，再继续判断现在的条件是否还是成立的，如果成立，是继续执行，一直偈这样去重复\n\n**问题：**现有 100 块砖需要从砖厂搬过来，一次只能搬一块，现在怎么样通过计算机的编程实现\n\n```javascript\nfor(var i=0;i<100;i++){\n    console.log(\"杨欢搬到第\"+i+\"块砖了\");\n}\n//上面的代码就是通过for循环执行 100 次的搬砖效果，现在我们怎么样通过while循环来开始\n```\n\n把上面的代码转换 while 循环以后\n\n```javascript\n/*\n  1.从第几块砖开始搬   1\n  2.一次搬多少块        1\n  3.一共要搬多少块      100\n*/\nvar i=0;\nwhile(i<100){\n    console.log(\"搬到第\"+i+\"块砖了\");\n    i++;\n}\n\nwhile循环与for循环是可以相互转换的\n```\n\n在之前的时候， 我们是可以进行一个 for 循环的嵌套的，那么 while 也可以嵌套在一起，现在，可以试着把刚刚的乘法口诀使用 while 来一次\n\n```javascript\ndocument.write('打印九九乘法表');\ndocument.writeln('<br>')\nvar j=1;\nwhile(j<=9){\n    var i=1;\n    while(i<=j){\n        document.writeln(i+\"*\"+j+\"=\"+i*j)\n        i++;\n    }\n    document.writeln('<br>')\n    j++;\n}\n```\n\n#### do...while 循环\n\nwhile 与 do...while 的使用方式很相近，都是一个循环，只是有一点不一样，**while 是先判断循环条件，如果成立则执行循环，而 do...while 在这里是先执行再去判断条件是否成立**\n\ndo...while 在这里的语法格式为\n\n```javascript\ndo{\n   //代码段\n}while(循环条件判断)\n\nvar n = 0;\nwhile(n<=10){\n\tn=n+1;\n}\n\n//------------------\n\ndo{\n    n=n+1;\n}while(n<=10);\n\n/* 建议在 do/while 结构的尾部使用分号表示语句结束，避免意外情况发生。 */\n```\n\n它们在使用的过程当中，99%都是相同的，循环的方式也相同，唯一的不同点\n\n- while 是先判断循环条件是否成立，再去执行循环\n- do...while 是先执行循环体代码，再去判断循环条件\n\n**总结：**\n\n1. 当循环的初始条件成立的时候，它们执行的循环次数是一样的\n2. 当循环的初始条件不成立的时候，do...while 会执行一次，而 while 不会执行，也就是，**do...while 先执行循环中的语句,然后再判断表达式是否为真,如果为真则继续循环；如果为假,则终止循环。因此,do-while 循环至少要执行一次循环语句。**\n\n---\n\n##### continue 关键字\n\ncontinue 关键字属于配合循环语句一起使用的一个关键字，它主要的作用就是用于跳过当前循环，再次执行下一次循环\n\n```javascript\nfor(var i=0;i<20;i++){\n    if(i==15){\n        //假设在搬第15块砖的时候，接了电脑，它要出去接电话\n        console.log(\"在接电话\");\n        continue;\n    }\n    console.log(\"在搬第\"+i+\"块砖\");\n}\n\n在上面的代码里面它跳过了第15次的循环，而继续进行后面的循环，一直到循环结果\n```\n\n##### break 关键字\n\n这个关键字也与循环语句结合起来一起使用，然后它主要的作用主就相当于中断当前循环（结束循环），后面的循环次数都不做了\n\n```javascript\nfor(var i=0;i<20;i++){\n    if(i==15){\n        console.log('接到老爸电话，回家继承一个亿');\n        //continue; 相当于拒绝继承一个亿，继续搬砖\n        break; // 中断循环，后面没有完成的循环也不做了。相当于同意回家继承一个亿\n    }\n    console.log('i', i);\n}\n```\n\n##### label 关键字\n\n默认情况之下，break 与 continue 都是针对于当前循环，但是，我们也可以让它针对指定的循环，这个时候，我们就需要配置另一个语句来一起使用\n\nlabel 语句用于标明某一段代码的入口\n\n```javascript\nfor (var j = 1; j <= 9; j++) {\n   for (var i = 1; i <= j; i++) {\n       if(i==5){\n           break;\n       }\n       document.writeln(i + \"*\" + j + \"=\" + i * j);\n   }\n   document.writeln(\"<br>\");\n}\n```\n\n现在我们在后面加了一个 break.这个 break 默认针对的就是当前的这个 for 循环\n\n```javascript\nout: for (var j = 1; j <= 9; j++) {\n    inner: for (var i = 1; i <= j; i++) {\n        if(i==5){\n            break out;\n        }\n        document.writeln(i + \"*\" + j + \"=\" + i * j);\n    }\n    document.writeln(\"<br>\");\n}\n```\n\n我们分别在外边的循环上面添加了一个 out,在里面的循环上面，我们添加了一个 inner\n\n后面当我们需要中断某个循环的时候，我们可以在 break 关键字的后边加上刚刚添加的 label（out 与 inner）\n\n我们刚刚是在 break 的后面添加了 label ，我们可以在 continue 的后面添加 label\n\n```javascript\ncontinue label1;\nbreak label2;\n//上面的两种情况都是正常的\n```\n\n---\n\n### 选择语句\n\n选择语句指的是 switch...case 语句，主要的语法格式如下\n\nif 语句与它的关系最为密切\n\n```javascript\nswitch(值){\n    case 值1：\n        break;\n    case 值2：\n        break;\n    default:\n        break;\n}\n//把switch后面的值与case后面的值做严格相等，如果相等，那么我就选择你\n```\n\n现在我们已经知道 if 语句与 switch 非常相近，那么，我们现在就试着把下面的 if 语句转为 switch 语句\n\n```javascript\nvar weather=\"sun\";\nif(weather==\"rain\"){\n    console.log(\"我们去看电影\");\n}\nelse if(weather==\"sun\"){\n    console.log(\"我们去森林公园\");\n}\nelse if(weather==\"wind\"){\n    console.log(\"我们去放风筝\");\n}\nelse{\n    console.log(\"我们回家睡觉\");\n}\n//上面的条件语句指的就是根据某一个条件选择某一段代码去执行\n\n//-----------------------------\nvar weather = \"sun\";\nswitch (weather) {\n    case \"rain\":\n        console.log(\"我们去看电影\");\n        break;\n    case \"sun\":\n        console.log(\"我们去森林公园\");\n        break;\n    case \"wind\":\n        console.log(\"我们去放风筝\");\n        break;\n    default:\n        console.log(\"我们回家睡觉\");\n}\n```\n\n1. switch 选择的时候，是从第一个 case 开始找，一直找到匹配，如果找不到就去 default 里面找\n2. 如果 switch 找到了 case 以后，那么会执行 case 下面的代码，执行完毕以后，它会看一下，你是否有 break 关键字，如果有，那么，后面的就不选了，如果没有 break，就从你当前选择的这个地方开始，后面每个 case 我都执行一次,直到遇到 break 或代码结束\n\n###### switch 练习\n\n1. 我们现在都知道一年有 12 个月，现在，我们要做一个判断 ，11，12，1，2 这四个月为冬天，3，4，为春天，5,6,7,8,为夏天，9，10 为秋天\n```javascript\n设计一个程序：现在给一个变量month，根据 month的值输出一句话，判断这个month是在那个季节里面\n\nvar month = 12;\nswitch (month) {\n case 11:\n case 12:\n case 1:\n case 2:\n     console.log(\"冬天\");\n     break;\n case 3:\n case 4:\n     console.log(\"春天\");\n     break;\n case 5:\n case 6:\n case 7:\n case 8:\n     console.log(\"夏天\");\n     break;\n case 9:\n case 10:\n     console.log(\"秋天\");\n     break;\n default:\n     console.log(\"month的值不对\");\n}\n```\n\n2. 现有全班学生的分数，我们希望通过这些分数 score 做一次统计对比，划分层次 leave，100 ~ 90 算优秀，89 ~ 80 算良好,79 ~ 70 算中等,69 ~ 60 算级格,60 分以下算不级格（使用 switch 来实现）\n```javascript\nvar score = 12;\nvar num = parseInt(score / 10);\n//这个整数只有可能 是0,1,2,3,4,5,6,7,8,9,10\nswitch (num) {\n    case 10:\n    case 9:\n        console.log(\"优秀\");\n        break;\n    case 8:\n        console.log(\"良好\");\n        break;\n    case 7:\n        console.log(\"中等\");\n        break;\n    case 6:\n        console.log(\"及格\");\n        break;\n    case 5:\n    case 4:\n    case 3:\n    case 2:\n    case 1:\n    case 0:\n        console.log(\"不及格\");\n        break;\n    default:\n        console.log(\"分数错误\");\n}\n\n//----------------\nvar score = 76;\nswitch(true){\n    case score<=100&&score>=90:       //false\n        console.log(\"优秀\");\n        break;\n    case score<=89&&score>=80:        //false\n        console.log(\"良好\");\n        break;\n    case score<=79&&score>=70:        //true\n        console.log(\"中等\");\n        break;\n    case score<=69&&score>=60:        //false\n        console.log(\"及格\");\n        break;\n    case score<=59&&score>=0:         //false\n        console.log(\"不及格\");\n        break;\n    default:\n        console.log(\"分数不合法\");\n}\n```\n","slug":"term-statement","published":1,"date":"2022-06-28T09:50:18.526Z","updated":"2022-06-29T09:08:27.146Z","_id":"cl4zab0k10001mcx6f84fco83","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h3><p>条件语句某些其它的编程里面它也属于分支语句，它是根据一些条件来选择不同的代码去执行</p>\n<p>条件语句在编程里面当作是 if…else…语句</p>\n<span id=\"more\"></span>\n<p>语法格式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 只做一次的条件判断</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行代码</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// a是正数还是负数</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a是正数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a是负数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>在上面的例子里面，我们把 if…else 这种情写法当成条件语句，它是根据某一个判断条件来执行的，这个判断条件返回一个 Boolean 类型的值（这个地方的 Boolean 不一定真的是 Boolean 类型）</p>\n</blockquote>\n<p>针对 if 后面的条件，我们看一下下面的问题</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果a不为null，undefined，“”，我们就赋值给b，否则就给b一个默认值520</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span>a<span class=\"token operator\">||</span><span class=\"token number\">520</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a 为true返回a，否则返回520</span>\n<span class=\"token comment\">// Boolean(8) true 返回第一个a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的写法里面，我们是根据的逻辑运算符来进行的（要当于这个地方的 a 也做了一次 Boolean(a)的转换）</p>\n<p>上面的写法，可以转换成如下写法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Boolean(a); 得到true</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">520</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n这一个时候的a放进去的不是一个布尔类型，但是我们可以通过Boolean去转换一次，得到Boolean类型的值，把这个值看成是它的结果<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>条件语句是代码应该根据不同的条件去进行执行，当有多个条件的时候，我们应该怎么办呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//代码1</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//代码2</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//.......后面还可以有很多很多</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//最后条件都不成立的结果</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>username <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不为空'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tel <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不为空'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// username tel都有值</span>\n\t<span class=\"token comment\">// ajax</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n条件语句可以进行多个条件的叠加\n<span class=\"token keyword\">else</span>是可以省略的\n花括号可以省略，但是只是在条件语句执行的代码块里面只有一行代码的时候才可以\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>案例：<br>现有全班学生的分数，我们希望通过这些分数做一次统计对比，划分层次，100 ~ 90 算优秀，89 ~ 80 算良好,79 ~ 70 算中等,69 ~ 60 算及格,60 分以下算不及格</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> score<span class=\"token operator\">=</span><span class=\"token number\">88</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> leave<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//等级</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">90</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\" 优秀\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">80</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">&lt;=</span><span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">70</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">&lt;=</span><span class=\"token number\">79</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">60</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">&lt;=</span><span class=\"token number\">69</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//在条件限制完整的情况之下，我们是可以更改if的顺序的，但else必须放在最后</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>上面的代码就是一个多条件的 if 语句执行，它根据不同的条件去做了一次判断</p>\n</blockquote>\n<p><strong>思考：</strong>上在的代码是否可以简化掉</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> score<span class=\"token operator\">=</span><span class=\"token number\">88</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> levae<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//等级</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">90</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"优秀\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果我们把上面的代码的 if 条件转一下顺序，结果就会有影响了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">85</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> leave<span class=\"token punctuation\">;</span> <span class=\"token comment\">//等级</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   leave <span class=\"token operator\">=</span> <span class=\"token string\">\"优秀\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   leave <span class=\"token operator\">=</span> <span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   leave <span class=\"token operator\">=</span> <span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   leave <span class=\"token operator\">=</span> <span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n   leave <span class=\"token operator\">=</span> <span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>leave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//正确的结果应该是”良好“，结果确是'中等'</span>\n\n上面的代码就不准确了，时候显示的结果就出错了\n这个时候 条件的顺序是不能够去进行顺序切换<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p>条件语句也叫分支语句，最终他们的代码都 会从上向下顺序执行，但是有一种语句它却是循环执行的</p>\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 重复去执行一段代码（重复的去干某一些事情，如搬水等）\n\n为什么需要循环语句？\n\n问题：现在一楼有100桶水，每次只能够搬一桶水，现问要搬要搬多少次，怎么搬？？？\n\n上面的搬水的事情，一次干不完，所以它要干100次，同样，在代码里面，如果某些代码一次干不完，我们循环多次去干 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h4><p>for 循环是编程语言里面最常见的一种循环方法，它使用关键字 for 来进行，在里面限定它的开始条件与结束条件，但给一个自变量，就完成了</p>\n<p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>开始条件<span class=\"token punctuation\">;</span>结束条件<span class=\"token punctuation\">;</span>自变量<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//要执行的代码</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们试着把搬水的方法完成掉</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n\t搬水问题分析\n\t1.它要搬多少桶    100\n\t2.从第几桶开始搬   1\n\t3.每次搬几桶      1\n*/</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"搬到了第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"桶水\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 开始条件：var i=1;</span>\n<span class=\"token comment\">// 结束条件：i&lt;=100; 只要这个条件是成立的，我都要执行循环</span>\n<span class=\"token comment\">// 自变量：i=i+1;</span>\n\n上面的代码就是一个最简单的循环语句，它从第<span class=\"token number\">1</span>次开始，到<span class=\"token number\">100</span>次结果，每次的自变量都是<span class=\"token operator\">+</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"循环语句循环执行的到底是哪些代码？\"><a href=\"#循环语句循环执行的到底是哪些代码？\" class=\"headerlink\" title=\"循环语句循环执行的到底是哪些代码？\"></a>循环语句循环执行的到底是哪些代码？</h5><p>循环语句循环的是三部分：</p>\n<ol>\n<li>判断条件</li>\n<li>代码体</li>\n<li>自变量执行</li>\n</ol>\n<p>上面的循环语句，我们试着去做一些规范化的处理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"搬到了第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"桶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当循环省略开始条件的时候</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 代码段</span>\n<span class=\"token punctuation\">&#125;</span>\n\n上面的代码，我们把开始条件省略掉，放在外面，这也是可行的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当循环省略结束条件的时候</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 代码段</span>\n<span class=\"token punctuation\">&#125;</span>\n\n这个时候，在这里他没有循环结束条件，所以它会构成一个死循环\n如果不想构成死循环，后期我们会使用 <span class=\"token keyword\">break</span> 关键字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当循环省略自变量的时候</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//代码段</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'搬到了第'</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">'桶水'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>for 循环语句里面的三个条件我们都可以省略掉，所以当我们看到如下的语句的时候，不要认为他错了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//它会执行一次死循环（无限次的循环）</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"for-循环练习\"><a href=\"#for-循环练习\" class=\"headerlink\" title=\"for 循环练习\"></a>for 循环练习</h6><ol>\n<li><p>请计算出 1~1000 的求和</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//把求和的结果，放在这个sum里面</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 我要把上一次的计算结果，保存在sum里面，然后在下一次去调用</span>\n    sum<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//sum=sum+i;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>请计算出 1~50 里面能被 3 整除的和</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 第一种 */</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//在这里，相当于把每一个数都走了一次</span>\n    <span class=\"token comment\">//看一下这个数能被除3整除 能被整除取余值是0</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        sum2<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum2'</span><span class=\"token punctuation\">,</span> sum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 第二种 */</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 直接把3的倍数循环出来相加</span>\n    sum2<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum2'</span><span class=\"token punctuation\">,</span> sum2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>在页面打印九九乘法表</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打印九九乘法表'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"*\"</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h4><p>语法格式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//代码体</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>while 循环跟着的是条件表达式，如果这个条件表达式为真，那么，就执行代码体，执行完代码体以后，再继续判断现在的条件是否还是成立的，如果成立，是继续执行，一直偈这样去重复</p>\n</blockquote>\n<p><strong>问题：</strong>现有 100 块砖需要从砖厂搬过来，一次只能搬一块，现在怎么样通过计算机的编程实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杨欢搬到第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"块砖了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//上面的代码就是通过for循环执行 100 次的搬砖效果，现在我们怎么样通过while循环来开始</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把上面的代码转换 while 循环以后</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n  1.从第几块砖开始搬   1\n  2.一次搬多少块        1\n  3.一共要搬多少块      100\n*/</span>\n<span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"搬到第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"块砖了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">while</span>循环与<span class=\"token keyword\">for</span>循环是可以相互转换的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在之前的时候， 我们是可以进行一个 for 循环的嵌套的，那么 while 也可以嵌套在一起，现在，可以试着把刚刚的乘法口诀使用 while 来一次</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打印九九乘法表'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"*\"</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span>\n    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"do…while-循环\"><a href=\"#do…while-循环\" class=\"headerlink\" title=\"do…while 循环\"></a>do…while 循环</h4><p>while 与 do…while 的使用方式很相近，都是一个循环，只是有一点不一样，<strong>while 是先判断循环条件，如果成立则执行循环，而 do…while 在这里是先执行再去判断条件是否成立</strong></p>\n<p>do…while 在这里的语法格式为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//代码段</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>循环条件判断<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tn<span class=\"token operator\">=</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//------------------</span>\n\n<span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span>\n    n<span class=\"token operator\">=</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 建议在 do/while 结构的尾部使用分号表示语句结束，避免意外情况发生。 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它们在使用的过程当中，99%都是相同的，循环的方式也相同，唯一的不同点</p>\n<ul>\n<li>while 是先判断循环条件是否成立，再去执行循环</li>\n<li>do…while 是先执行循环体代码，再去判断循环条件</li>\n</ul>\n<p><strong>总结：</strong></p>\n<ol>\n<li>当循环的初始条件成立的时候，它们执行的循环次数是一样的</li>\n<li>当循环的初始条件不成立的时候，do…while 会执行一次，而 while 不会执行，也就是，<strong>do…while 先执行循环中的语句,然后再判断表达式是否为真,如果为真则继续循环；如果为假,则终止循环。因此,do-while 循环至少要执行一次循环语句。</strong></li>\n</ol>\n<hr>\n<h5 id=\"continue-关键字\"><a href=\"#continue-关键字\" class=\"headerlink\" title=\"continue 关键字\"></a>continue 关键字</h5><p>continue 关键字属于配合循环语句一起使用的一个关键字，它主要的作用就是用于跳过当前循环，再次执行下一次循环</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//假设在搬第15块砖的时候，接了电脑，它要出去接电话</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在接电话\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在搬第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"块砖\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n在上面的代码里面它跳过了第<span class=\"token number\">15</span>次的循环，而继续进行后面的循环，一直到循环结果<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"break-关键字\"><a href=\"#break-关键字\" class=\"headerlink\" title=\"break 关键字\"></a>break 关键字</h5><p>这个关键字也与循环语句结合起来一起使用，然后它主要的作用主就相当于中断当前循环（结束循环），后面的循环次数都不做了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'接到老爸电话，回家继承一个亿'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//continue; 相当于拒绝继承一个亿，继续搬砖</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 中断循环，后面没有完成的循环也不做了。相当于同意回家继承一个亿</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"label-关键字\"><a href=\"#label-关键字\" class=\"headerlink\" title=\"label 关键字\"></a>label 关键字</h5><p>默认情况之下，break 与 continue 都是针对于当前循环，但是，我们也可以让它针对指定的循环，这个时候，我们就需要配置另一个语句来一起使用</p>\n<p>label 语句用于标明某一段代码的入口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;br>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们在后面加了一个 break.这个 break 默认针对的就是当前的这个 for 循环</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">out</span><span class=\"token operator\">:</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">inner</span><span class=\"token operator\">:</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">break</span> out<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;br>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们分别在外边的循环上面添加了一个 out,在里面的循环上面，我们添加了一个 inner</p>\n<p>后面当我们需要中断某个循环的时候，我们可以在 break 关键字的后边加上刚刚添加的 label（out 与 inner）</p>\n<p>我们刚刚是在 break 的后面添加了 label ，我们可以在 continue 的后面添加 label</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">continue</span> label1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">break</span> label2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//上面的两种情况都是正常的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"选择语句\"><a href=\"#选择语句\" class=\"headerlink\" title=\"选择语句\"></a>选择语句</h3><p>选择语句指的是 switch…case 语句，主要的语法格式如下</p>\n<p>if 语句与它的关系最为密切</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> 值<span class=\"token number\">1</span>：\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> 值<span class=\"token number\">2</span>：\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//把switch后面的值与case后面的值做严格相等，如果相等，那么我就选择你</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们已经知道 if 语句与 switch 非常相近，那么，我们现在就试着把下面的 if 语句转为 switch 语句</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> weather<span class=\"token operator\">=</span><span class=\"token string\">\"sun\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>weather<span class=\"token operator\">==</span><span class=\"token string\">\"rain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去看电影\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>weather<span class=\"token operator\">==</span><span class=\"token string\">\"sun\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去森林公园\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>weather<span class=\"token operator\">==</span><span class=\"token string\">\"wind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去放风筝\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们回家睡觉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//上面的条件语句指的就是根据某一个条件选择某一段代码去执行</span>\n\n<span class=\"token comment\">//-----------------------------</span>\n<span class=\"token keyword\">var</span> weather <span class=\"token operator\">=</span> <span class=\"token string\">\"sun\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"rain\"</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去看电影\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"sun\"</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去森林公园\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"wind\"</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去放风筝\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们回家睡觉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>switch 选择的时候，是从第一个 case 开始找，一直找到匹配，如果找不到就去 default 里面找</li>\n<li>如果 switch 找到了 case 以后，那么会执行 case 下面的代码，执行完毕以后，它会看一下，你是否有 break 关键字，如果有，那么，后面的就不选了，如果没有 break，就从你当前选择的这个地方开始，后面每个 case 我都执行一次,直到遇到 break 或代码结束</li>\n</ol>\n<h6 id=\"switch-练习\"><a href=\"#switch-练习\" class=\"headerlink\" title=\"switch 练习\"></a>switch 练习</h6><ol>\n<li><p>我们现在都知道一年有 12 个月，现在，我们要做一个判断 ，11，12，1，2 这四个月为冬天，3，4，为春天，5,6,7,8,为夏天，9，10 为秋天</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">设计一个程序：现在给一个变量month，根据 month的值输出一句话，判断这个month是在那个季节里面\n\n<span class=\"token keyword\">var</span> month <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"month的值不对\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>现有全班学生的分数，我们希望通过这些分数 score 做一次统计对比，划分层次 leave，100 ~ 90 算优秀，89 ~ 80 算良好,79 ~ 70 算中等,69 ~ 60 算级格,60 分以下算不级格（使用 switch 来实现）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这个整数只有可能 是0,1,2,3,4,5,6,7,8,9,10</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"优秀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分数错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//----------------</span>\n<span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">76</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> score<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">>=</span><span class=\"token number\">90</span><span class=\"token operator\">:</span>       <span class=\"token comment\">//false</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"优秀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> score<span class=\"token operator\">&lt;=</span><span class=\"token number\">89</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">>=</span><span class=\"token number\">80</span><span class=\"token operator\">:</span>        <span class=\"token comment\">//false</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> score<span class=\"token operator\">&lt;=</span><span class=\"token number\">79</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">>=</span><span class=\"token number\">70</span><span class=\"token operator\">:</span>        <span class=\"token comment\">//true</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> score<span class=\"token operator\">&lt;=</span><span class=\"token number\">69</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">>=</span><span class=\"token number\">60</span><span class=\"token operator\">:</span>        <span class=\"token comment\">//false</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> score<span class=\"token operator\">&lt;=</span><span class=\"token number\">59</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">:</span>         <span class=\"token comment\">//false</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分数不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h3><p>条件语句某些其它的编程里面它也属于分支语句，它是根据一些条件来选择不同的代码去执行</p>\n<p>条件语句在编程里面当作是 if…else…语句</p>","more":"<p>语法格式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 只做一次的条件判断</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行代码</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// a是正数还是负数</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a是正数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a是负数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>在上面的例子里面，我们把 if…else 这种情写法当成条件语句，它是根据某一个判断条件来执行的，这个判断条件返回一个 Boolean 类型的值（这个地方的 Boolean 不一定真的是 Boolean 类型）</p>\n</blockquote>\n<p>针对 if 后面的条件，我们看一下下面的问题</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果a不为null，undefined，“”，我们就赋值给b，否则就给b一个默认值520</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span>a<span class=\"token operator\">||</span><span class=\"token number\">520</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a 为true返回a，否则返回520</span>\n<span class=\"token comment\">// Boolean(8) true 返回第一个a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的写法里面，我们是根据的逻辑运算符来进行的（要当于这个地方的 a 也做了一次 Boolean(a)的转换）</p>\n<p>上面的写法，可以转换成如下写法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Boolean(a); 得到true</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">520</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n这一个时候的a放进去的不是一个布尔类型，但是我们可以通过Boolean去转换一次，得到Boolean类型的值，把这个值看成是它的结果<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>条件语句是代码应该根据不同的条件去进行执行，当有多个条件的时候，我们应该怎么办呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//代码1</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//代码2</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//.......后面还可以有很多很多</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//最后条件都不成立的结果</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>username <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不为空'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tel <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不为空'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// username tel都有值</span>\n\t<span class=\"token comment\">// ajax</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n条件语句可以进行多个条件的叠加\n<span class=\"token keyword\">else</span>是可以省略的\n花括号可以省略，但是只是在条件语句执行的代码块里面只有一行代码的时候才可以\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>案例：<br>现有全班学生的分数，我们希望通过这些分数做一次统计对比，划分层次，100 ~ 90 算优秀，89 ~ 80 算良好,79 ~ 70 算中等,69 ~ 60 算及格,60 分以下算不及格</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> score<span class=\"token operator\">=</span><span class=\"token number\">88</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> leave<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//等级</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">90</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\" 优秀\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">80</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">&lt;=</span><span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">70</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">&lt;=</span><span class=\"token number\">79</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">60</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">&lt;=</span><span class=\"token number\">69</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//在条件限制完整的情况之下，我们是可以更改if的顺序的，但else必须放在最后</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>上面的代码就是一个多条件的 if 语句执行，它根据不同的条件去做了一次判断</p>\n</blockquote>\n<p><strong>思考：</strong>上在的代码是否可以简化掉</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> score<span class=\"token operator\">=</span><span class=\"token number\">88</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> levae<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//等级</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">90</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"优秀\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score<span class=\"token operator\">>=</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    leave<span class=\"token operator\">=</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果我们把上面的代码的 if 条件转一下顺序，结果就会有影响了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">85</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> leave<span class=\"token punctuation\">;</span> <span class=\"token comment\">//等级</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   leave <span class=\"token operator\">=</span> <span class=\"token string\">\"优秀\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   leave <span class=\"token operator\">=</span> <span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   leave <span class=\"token operator\">=</span> <span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   leave <span class=\"token operator\">=</span> <span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n   leave <span class=\"token operator\">=</span> <span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>leave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//正确的结果应该是”良好“，结果确是'中等'</span>\n\n上面的代码就不准确了，时候显示的结果就出错了\n这个时候 条件的顺序是不能够去进行顺序切换<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p>条件语句也叫分支语句，最终他们的代码都 会从上向下顺序执行，但是有一种语句它却是循环执行的</p>\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 重复去执行一段代码（重复的去干某一些事情，如搬水等）\n\n为什么需要循环语句？\n\n问题：现在一楼有100桶水，每次只能够搬一桶水，现问要搬要搬多少次，怎么搬？？？\n\n上面的搬水的事情，一次干不完，所以它要干100次，同样，在代码里面，如果某些代码一次干不完，我们循环多次去干 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h4><p>for 循环是编程语言里面最常见的一种循环方法，它使用关键字 for 来进行，在里面限定它的开始条件与结束条件，但给一个自变量，就完成了</p>\n<p>语法格式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>开始条件<span class=\"token punctuation\">;</span>结束条件<span class=\"token punctuation\">;</span>自变量<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//要执行的代码</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们试着把搬水的方法完成掉</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n\t搬水问题分析\n\t1.它要搬多少桶    100\n\t2.从第几桶开始搬   1\n\t3.每次搬几桶      1\n*/</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"搬到了第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"桶水\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 开始条件：var i=1;</span>\n<span class=\"token comment\">// 结束条件：i&lt;=100; 只要这个条件是成立的，我都要执行循环</span>\n<span class=\"token comment\">// 自变量：i=i+1;</span>\n\n上面的代码就是一个最简单的循环语句，它从第<span class=\"token number\">1</span>次开始，到<span class=\"token number\">100</span>次结果，每次的自变量都是<span class=\"token operator\">+</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"循环语句循环执行的到底是哪些代码？\"><a href=\"#循环语句循环执行的到底是哪些代码？\" class=\"headerlink\" title=\"循环语句循环执行的到底是哪些代码？\"></a>循环语句循环执行的到底是哪些代码？</h5><p>循环语句循环的是三部分：</p>\n<ol>\n<li>判断条件</li>\n<li>代码体</li>\n<li>自变量执行</li>\n</ol>\n<p>上面的循环语句，我们试着去做一些规范化的处理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"搬到了第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"桶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当循环省略开始条件的时候</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 代码段</span>\n<span class=\"token punctuation\">&#125;</span>\n\n上面的代码，我们把开始条件省略掉，放在外面，这也是可行的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当循环省略结束条件的时候</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 代码段</span>\n<span class=\"token punctuation\">&#125;</span>\n\n这个时候，在这里他没有循环结束条件，所以它会构成一个死循环\n如果不想构成死循环，后期我们会使用 <span class=\"token keyword\">break</span> 关键字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当循环省略自变量的时候</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//代码段</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'搬到了第'</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">'桶水'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>for 循环语句里面的三个条件我们都可以省略掉，所以当我们看到如下的语句的时候，不要认为他错了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//它会执行一次死循环（无限次的循环）</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"for-循环练习\"><a href=\"#for-循环练习\" class=\"headerlink\" title=\"for 循环练习\"></a>for 循环练习</h6><ol>\n<li><p>请计算出 1~1000 的求和</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//把求和的结果，放在这个sum里面</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 我要把上一次的计算结果，保存在sum里面，然后在下一次去调用</span>\n    sum<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//sum=sum+i;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>请计算出 1~50 里面能被 3 整除的和</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 第一种 */</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//在这里，相当于把每一个数都走了一次</span>\n    <span class=\"token comment\">//看一下这个数能被除3整除 能被整除取余值是0</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        sum2<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum2'</span><span class=\"token punctuation\">,</span> sum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 第二种 */</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 直接把3的倍数循环出来相加</span>\n    sum2<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum2'</span><span class=\"token punctuation\">,</span> sum2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>在页面打印九九乘法表</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打印九九乘法表'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"*\"</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h4><p>语法格式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//代码体</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>while 循环跟着的是条件表达式，如果这个条件表达式为真，那么，就执行代码体，执行完代码体以后，再继续判断现在的条件是否还是成立的，如果成立，是继续执行，一直偈这样去重复</p>\n</blockquote>\n<p><strong>问题：</strong>现有 100 块砖需要从砖厂搬过来，一次只能搬一块，现在怎么样通过计算机的编程实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杨欢搬到第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"块砖了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//上面的代码就是通过for循环执行 100 次的搬砖效果，现在我们怎么样通过while循环来开始</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把上面的代码转换 while 循环以后</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n  1.从第几块砖开始搬   1\n  2.一次搬多少块        1\n  3.一共要搬多少块      100\n*/</span>\n<span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"搬到第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"块砖了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">while</span>循环与<span class=\"token keyword\">for</span>循环是可以相互转换的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在之前的时候， 我们是可以进行一个 for 循环的嵌套的，那么 while 也可以嵌套在一起，现在，可以试着把刚刚的乘法口诀使用 while 来一次</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打印九九乘法表'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"*\"</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span>\n    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"do…while-循环\"><a href=\"#do…while-循环\" class=\"headerlink\" title=\"do…while 循环\"></a>do…while 循环</h4><p>while 与 do…while 的使用方式很相近，都是一个循环，只是有一点不一样，<strong>while 是先判断循环条件，如果成立则执行循环，而 do…while 在这里是先执行再去判断条件是否成立</strong></p>\n<p>do…while 在这里的语法格式为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//代码段</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>循环条件判断<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tn<span class=\"token operator\">=</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//------------------</span>\n\n<span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span>\n    n<span class=\"token operator\">=</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 建议在 do/while 结构的尾部使用分号表示语句结束，避免意外情况发生。 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它们在使用的过程当中，99%都是相同的，循环的方式也相同，唯一的不同点</p>\n<ul>\n<li>while 是先判断循环条件是否成立，再去执行循环</li>\n<li>do…while 是先执行循环体代码，再去判断循环条件</li>\n</ul>\n<p><strong>总结：</strong></p>\n<ol>\n<li>当循环的初始条件成立的时候，它们执行的循环次数是一样的</li>\n<li>当循环的初始条件不成立的时候，do…while 会执行一次，而 while 不会执行，也就是，<strong>do…while 先执行循环中的语句,然后再判断表达式是否为真,如果为真则继续循环；如果为假,则终止循环。因此,do-while 循环至少要执行一次循环语句。</strong></li>\n</ol>\n<hr>\n<h5 id=\"continue-关键字\"><a href=\"#continue-关键字\" class=\"headerlink\" title=\"continue 关键字\"></a>continue 关键字</h5><p>continue 关键字属于配合循环语句一起使用的一个关键字，它主要的作用就是用于跳过当前循环，再次执行下一次循环</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//假设在搬第15块砖的时候，接了电脑，它要出去接电话</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在接电话\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在搬第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"块砖\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n在上面的代码里面它跳过了第<span class=\"token number\">15</span>次的循环，而继续进行后面的循环，一直到循环结果<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"break-关键字\"><a href=\"#break-关键字\" class=\"headerlink\" title=\"break 关键字\"></a>break 关键字</h5><p>这个关键字也与循环语句结合起来一起使用，然后它主要的作用主就相当于中断当前循环（结束循环），后面的循环次数都不做了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'接到老爸电话，回家继承一个亿'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//continue; 相当于拒绝继承一个亿，继续搬砖</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 中断循环，后面没有完成的循环也不做了。相当于同意回家继承一个亿</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"label-关键字\"><a href=\"#label-关键字\" class=\"headerlink\" title=\"label 关键字\"></a>label 关键字</h5><p>默认情况之下，break 与 continue 都是针对于当前循环，但是，我们也可以让它针对指定的循环，这个时候，我们就需要配置另一个语句来一起使用</p>\n<p>label 语句用于标明某一段代码的入口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;br>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们在后面加了一个 break.这个 break 默认针对的就是当前的这个 for 循环</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">out</span><span class=\"token operator\">:</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">inner</span><span class=\"token operator\">:</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">break</span> out<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;br>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们分别在外边的循环上面添加了一个 out,在里面的循环上面，我们添加了一个 inner</p>\n<p>后面当我们需要中断某个循环的时候，我们可以在 break 关键字的后边加上刚刚添加的 label（out 与 inner）</p>\n<p>我们刚刚是在 break 的后面添加了 label ，我们可以在 continue 的后面添加 label</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">continue</span> label1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">break</span> label2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//上面的两种情况都是正常的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"选择语句\"><a href=\"#选择语句\" class=\"headerlink\" title=\"选择语句\"></a>选择语句</h3><p>选择语句指的是 switch…case 语句，主要的语法格式如下</p>\n<p>if 语句与它的关系最为密切</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> 值<span class=\"token number\">1</span>：\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> 值<span class=\"token number\">2</span>：\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//把switch后面的值与case后面的值做严格相等，如果相等，那么我就选择你</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在我们已经知道 if 语句与 switch 非常相近，那么，我们现在就试着把下面的 if 语句转为 switch 语句</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> weather<span class=\"token operator\">=</span><span class=\"token string\">\"sun\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>weather<span class=\"token operator\">==</span><span class=\"token string\">\"rain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去看电影\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>weather<span class=\"token operator\">==</span><span class=\"token string\">\"sun\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去森林公园\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>weather<span class=\"token operator\">==</span><span class=\"token string\">\"wind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去放风筝\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们回家睡觉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//上面的条件语句指的就是根据某一个条件选择某一段代码去执行</span>\n\n<span class=\"token comment\">//-----------------------------</span>\n<span class=\"token keyword\">var</span> weather <span class=\"token operator\">=</span> <span class=\"token string\">\"sun\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"rain\"</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去看电影\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"sun\"</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去森林公园\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"wind\"</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们去放风筝\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我们回家睡觉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>switch 选择的时候，是从第一个 case 开始找，一直找到匹配，如果找不到就去 default 里面找</li>\n<li>如果 switch 找到了 case 以后，那么会执行 case 下面的代码，执行完毕以后，它会看一下，你是否有 break 关键字，如果有，那么，后面的就不选了，如果没有 break，就从你当前选择的这个地方开始，后面每个 case 我都执行一次,直到遇到 break 或代码结束</li>\n</ol>\n<h6 id=\"switch-练习\"><a href=\"#switch-练习\" class=\"headerlink\" title=\"switch 练习\"></a>switch 练习</h6><ol>\n<li><p>我们现在都知道一年有 12 个月，现在，我们要做一个判断 ，11，12，1，2 这四个月为冬天，3，4，为春天，5,6,7,8,为夏天，9，10 为秋天</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">设计一个程序：现在给一个变量month，根据 month的值输出一句话，判断这个month是在那个季节里面\n\n<span class=\"token keyword\">var</span> month <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"month的值不对\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>现有全班学生的分数，我们希望通过这些分数 score 做一次统计对比，划分层次 leave，100 ~ 90 算优秀，89 ~ 80 算良好,79 ~ 70 算中等,69 ~ 60 算级格,60 分以下算不级格（使用 switch 来实现）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这个整数只有可能 是0,1,2,3,4,5,6,7,8,9,10</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"优秀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分数错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//----------------</span>\n<span class=\"token keyword\">var</span> score <span class=\"token operator\">=</span> <span class=\"token number\">76</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> score<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">>=</span><span class=\"token number\">90</span><span class=\"token operator\">:</span>       <span class=\"token comment\">//false</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"优秀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> score<span class=\"token operator\">&lt;=</span><span class=\"token number\">89</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">>=</span><span class=\"token number\">80</span><span class=\"token operator\">:</span>        <span class=\"token comment\">//false</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> score<span class=\"token operator\">&lt;=</span><span class=\"token number\">79</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">>=</span><span class=\"token number\">70</span><span class=\"token operator\">:</span>        <span class=\"token comment\">//true</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中等\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> score<span class=\"token operator\">&lt;=</span><span class=\"token number\">69</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">>=</span><span class=\"token number\">60</span><span class=\"token operator\">:</span>        <span class=\"token comment\">//false</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> score<span class=\"token operator\">&lt;=</span><span class=\"token number\">59</span><span class=\"token operator\">&amp;&amp;</span>score<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">:</span>         <span class=\"token comment\">//false</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分数不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>"},{"title":"JavaScript - 什么是JavaScript？","_content":"#### JavaScript历史\n在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。\n\n由于网景公司希望能在静态HTML页面上添加一些**动态效果**，于是叫**Brendan Eich**这哥们在两周之内设计出了**JavaScript**语言。\n\n为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。\n\n---\n<!--more-->\n#### ECMAScript\n因为网景开发了JavaScript，一年后**微软**又模仿JavaScript开发了**JScript**，为了让JavaScript成为**全球标准**，几个公司联合**ECMA**（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为**ECMAScript标准**。\n\n> 简单来说，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。\n\n如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。\n\n---\n\n#### JavaScript版本\n由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称**ES6**）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。\n\n> 由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。\n\n---\n\n#### JavaScript到底是什么\n它是一种脚本语言，提供页面与用户的交互途径，主要包含三个方面的东西：\n- ECMSScript（ES）：它主要用来定义JavaScript的语法规范，现在主流的版本是5.1。\n- DOM(document object model:文档对象模型)\n- BOM(bowser object model:浏览器对象模型)\n\n---\n\n#### JavaScript运行在什么地方\n在设计JavaScript这门语言的时候，我们当初的设计者是要让这一门语言运行在浏览器里面的，所以，我们的JavaScript与CSS一样都是运行在页面当中。但是它也有一个特殊的标签进行包裹\n```html\n<script type=\"text/javascript\"></script>\n```\n> JS代码与CSS代码有很多的相似之处，主要体现的代码的位置，CSS的代码主要在三个位置，JS代码也就是行内代码，和Script代码，以及我们的外部JS文件\n\n1. 写在标签里面\n```html\n<button type=\"button\" onclick=\"alert('hello world')\" style=\"color:red\">\n    按钮\n</button>\n```\n> 上面的 alert('hello world') 就是我们的JS代码，它直接和HTML代码写在了一起与我们的CSS是一样的，我们的CSS代码是写在了style这个属性里面\n\n2. 写在特定的标签里面，与CSS内部样式块相同\n```html\n<script type=\"text/javascript\">\n\talert('你好');\n</script>\n<style type=\"text/css\">\n    div{\n        width:100px;\n    }\n</style>\n```\n> 上面的代码 alert('你好') 也是JS代码，但是它写在了我们的script的标签里面\n\n3. 写在外部文件当中\n我们的CSS样式如果过多以后，我们会把这些CSS样式单独写在一个文件里面，这个文件以.css结尾，同理，如果一个页面的JS代码过多，我们也可以单独的写在一个文件里面，这个文件以.js结尾\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n<script type=\"text/javascript\" src=\"javascript.js\"></script>\n```\n**特别注意：**\n一个script标签如果加了src属性连接到另一个JS文件里面， 这个script标签里面就不能加东西了\n```html\n<script src=\"js/javascript.js\" type=\"text/javascript\">\n    var div1 = document.getElementById(\"div1\");\n    div1.innerText=\"改下你\";\n</script>\n```\n**==以上写法是错误的==**\n\n---\n\n#### JavaScript的注释\n\n```Javascript\n//单行注释 \n/*\n\t多行注释\n*/\n```\n\n\n\n","source":"_posts/js.md","raw":"---\ntitle: JavaScript - 什么是JavaScript？\ntags: \ncategories: js\n---\n#### JavaScript历史\n在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。\n\n由于网景公司希望能在静态HTML页面上添加一些**动态效果**，于是叫**Brendan Eich**这哥们在两周之内设计出了**JavaScript**语言。\n\n为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。\n\n---\n<!--more-->\n#### ECMAScript\n因为网景开发了JavaScript，一年后**微软**又模仿JavaScript开发了**JScript**，为了让JavaScript成为**全球标准**，几个公司联合**ECMA**（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为**ECMAScript标准**。\n\n> 简单来说，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。\n\n如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。\n\n---\n\n#### JavaScript版本\n由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称**ES6**）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。\n\n> 由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。\n\n---\n\n#### JavaScript到底是什么\n它是一种脚本语言，提供页面与用户的交互途径，主要包含三个方面的东西：\n- ECMSScript（ES）：它主要用来定义JavaScript的语法规范，现在主流的版本是5.1。\n- DOM(document object model:文档对象模型)\n- BOM(bowser object model:浏览器对象模型)\n\n---\n\n#### JavaScript运行在什么地方\n在设计JavaScript这门语言的时候，我们当初的设计者是要让这一门语言运行在浏览器里面的，所以，我们的JavaScript与CSS一样都是运行在页面当中。但是它也有一个特殊的标签进行包裹\n```html\n<script type=\"text/javascript\"></script>\n```\n> JS代码与CSS代码有很多的相似之处，主要体现的代码的位置，CSS的代码主要在三个位置，JS代码也就是行内代码，和Script代码，以及我们的外部JS文件\n\n1. 写在标签里面\n```html\n<button type=\"button\" onclick=\"alert('hello world')\" style=\"color:red\">\n    按钮\n</button>\n```\n> 上面的 alert('hello world') 就是我们的JS代码，它直接和HTML代码写在了一起与我们的CSS是一样的，我们的CSS代码是写在了style这个属性里面\n\n2. 写在特定的标签里面，与CSS内部样式块相同\n```html\n<script type=\"text/javascript\">\n\talert('你好');\n</script>\n<style type=\"text/css\">\n    div{\n        width:100px;\n    }\n</style>\n```\n> 上面的代码 alert('你好') 也是JS代码，但是它写在了我们的script的标签里面\n\n3. 写在外部文件当中\n我们的CSS样式如果过多以后，我们会把这些CSS样式单独写在一个文件里面，这个文件以.css结尾，同理，如果一个页面的JS代码过多，我们也可以单独的写在一个文件里面，这个文件以.js结尾\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n<script type=\"text/javascript\" src=\"javascript.js\"></script>\n```\n**特别注意：**\n一个script标签如果加了src属性连接到另一个JS文件里面， 这个script标签里面就不能加东西了\n```html\n<script src=\"js/javascript.js\" type=\"text/javascript\">\n    var div1 = document.getElementById(\"div1\");\n    div1.innerText=\"改下你\";\n</script>\n```\n**==以上写法是错误的==**\n\n---\n\n#### JavaScript的注释\n\n```Javascript\n//单行注释 \n/*\n\t多行注释\n*/\n```\n\n\n\n","slug":"js","published":1,"date":"2022-06-29T08:09:47.465Z","updated":"2022-06-29T08:59:50.939Z","_id":"cl4zbhpq200016px63fd98rei","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"JavaScript历史\"><a href=\"#JavaScript历史\" class=\"headerlink\" title=\"JavaScript历史\"></a>JavaScript历史</h4><p>在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p>\n<p>由于网景公司希望能在静态HTML页面上添加一些<strong>动态效果</strong>，于是叫<strong>Brendan Eich</strong>这哥们在两周之内设计出了<strong>JavaScript</strong>语言。</p>\n<p>为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p>\n<hr>\n<span id=\"more\"></span>\n<h4 id=\"ECMAScript\"><a href=\"#ECMAScript\" class=\"headerlink\" title=\"ECMAScript\"></a>ECMAScript</h4><p>因为网景开发了JavaScript，一年后<strong>微软</strong>又模仿JavaScript开发了<strong>JScript</strong>，为了让JavaScript成为<strong>全球标准</strong>，几个公司联合<strong>ECMA</strong>（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为<strong>ECMAScript标准</strong>。</p>\n<blockquote>\n<p>简单来说，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。</p>\n</blockquote>\n<p>如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。</p>\n<hr>\n<h4 id=\"JavaScript版本\"><a href=\"#JavaScript版本\" class=\"headerlink\" title=\"JavaScript版本\"></a>JavaScript版本</h4><p>由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称<strong>ES6</strong>）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。</p>\n<blockquote>\n<p>由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。</p>\n</blockquote>\n<hr>\n<h4 id=\"JavaScript到底是什么\"><a href=\"#JavaScript到底是什么\" class=\"headerlink\" title=\"JavaScript到底是什么\"></a>JavaScript到底是什么</h4><p>它是一种脚本语言，提供页面与用户的交互途径，主要包含三个方面的东西：</p>\n<ul>\n<li>ECMSScript（ES）：它主要用来定义JavaScript的语法规范，现在主流的版本是5.1。</li>\n<li>DOM(document object model:文档对象模型)</li>\n<li>BOM(bowser object model:浏览器对象模型)</li>\n</ul>\n<hr>\n<h4 id=\"JavaScript运行在什么地方\"><a href=\"#JavaScript运行在什么地方\" class=\"headerlink\" title=\"JavaScript运行在什么地方\"></a>JavaScript运行在什么地方</h4><p>在设计JavaScript这门语言的时候，我们当初的设计者是要让这一门语言运行在浏览器里面的，所以，我们的JavaScript与CSS一样都是运行在页面当中。但是它也有一个特殊的标签进行包裹</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>JS代码与CSS代码有很多的相似之处，主要体现的代码的位置，CSS的代码主要在三个位置，JS代码也就是行内代码，和Script代码，以及我们的外部JS文件</p>\n</blockquote>\n<ol>\n<li><p>写在标签里面</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n    按钮\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>上面的 alert(‘hello world’) 就是我们的JS代码，它直接和HTML代码写在了一起与我们的CSS是一样的，我们的CSS代码是写在了style这个属性里面</p>\n</blockquote>\n</li>\n<li><p>写在特定的标签里面，与CSS内部样式块相同</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>上面的代码 alert(‘你好’) 也是JS代码，但是它写在了我们的script的标签里面</p>\n</blockquote>\n</li>\n<li><p>写在外部文件当中<br>我们的CSS样式如果过多以后，我们会把这些CSS样式单独写在一个文件里面，这个文件以.css结尾，同理，如果一个页面的JS代码过多，我们也可以单独的写在一个文件里面，这个文件以.js结尾</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>特别注意：</strong><br>一个script标签如果加了src属性连接到另一个JS文件里面， 这个script标签里面就不能加东西了</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/javascript.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">var</span> div1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    div1<span class=\"token punctuation\">.</span>innerText<span class=\"token operator\">=</span><span class=\"token string\">\"改下你\"</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>==以上写法是错误的==</strong></p>\n<hr>\n<h4 id=\"JavaScript的注释\"><a href=\"#JavaScript的注释\" class=\"headerlink\" title=\"JavaScript的注释\"></a>JavaScript的注释</h4><pre class=\"line-numbers language-Javascript\" data-language=\"Javascript\"><code class=\"language-Javascript\">&#x2F;&#x2F;单行注释 \n&#x2F;*\n\t多行注释\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{}},"excerpt":"<h4 id=\"JavaScript历史\"><a href=\"#JavaScript历史\" class=\"headerlink\" title=\"JavaScript历史\"></a>JavaScript历史</h4><p>在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p>\n<p>由于网景公司希望能在静态HTML页面上添加一些<strong>动态效果</strong>，于是叫<strong>Brendan Eich</strong>这哥们在两周之内设计出了<strong>JavaScript</strong>语言。</p>\n<p>为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p>\n<hr>","more":"<h4 id=\"ECMAScript\"><a href=\"#ECMAScript\" class=\"headerlink\" title=\"ECMAScript\"></a>ECMAScript</h4><p>因为网景开发了JavaScript，一年后<strong>微软</strong>又模仿JavaScript开发了<strong>JScript</strong>，为了让JavaScript成为<strong>全球标准</strong>，几个公司联合<strong>ECMA</strong>（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为<strong>ECMAScript标准</strong>。</p>\n<blockquote>\n<p>简单来说，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。</p>\n</blockquote>\n<p>如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。</p>\n<hr>\n<h4 id=\"JavaScript版本\"><a href=\"#JavaScript版本\" class=\"headerlink\" title=\"JavaScript版本\"></a>JavaScript版本</h4><p>由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称<strong>ES6</strong>）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。</p>\n<blockquote>\n<p>由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。</p>\n</blockquote>\n<hr>\n<h4 id=\"JavaScript到底是什么\"><a href=\"#JavaScript到底是什么\" class=\"headerlink\" title=\"JavaScript到底是什么\"></a>JavaScript到底是什么</h4><p>它是一种脚本语言，提供页面与用户的交互途径，主要包含三个方面的东西：</p>\n<ul>\n<li>ECMSScript（ES）：它主要用来定义JavaScript的语法规范，现在主流的版本是5.1。</li>\n<li>DOM(document object model:文档对象模型)</li>\n<li>BOM(bowser object model:浏览器对象模型)</li>\n</ul>\n<hr>\n<h4 id=\"JavaScript运行在什么地方\"><a href=\"#JavaScript运行在什么地方\" class=\"headerlink\" title=\"JavaScript运行在什么地方\"></a>JavaScript运行在什么地方</h4><p>在设计JavaScript这门语言的时候，我们当初的设计者是要让这一门语言运行在浏览器里面的，所以，我们的JavaScript与CSS一样都是运行在页面当中。但是它也有一个特殊的标签进行包裹</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>JS代码与CSS代码有很多的相似之处，主要体现的代码的位置，CSS的代码主要在三个位置，JS代码也就是行内代码，和Script代码，以及我们的外部JS文件</p>\n</blockquote>\n<ol>\n<li><p>写在标签里面</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n    按钮\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>上面的 alert(‘hello world’) 就是我们的JS代码，它直接和HTML代码写在了一起与我们的CSS是一样的，我们的CSS代码是写在了style这个属性里面</p>\n</blockquote>\n</li>\n<li><p>写在特定的标签里面，与CSS内部样式块相同</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>上面的代码 alert(‘你好’) 也是JS代码，但是它写在了我们的script的标签里面</p>\n</blockquote>\n</li>\n<li><p>写在外部文件当中<br>我们的CSS样式如果过多以后，我们会把这些CSS样式单独写在一个文件里面，这个文件以.css结尾，同理，如果一个页面的JS代码过多，我们也可以单独的写在一个文件里面，这个文件以.js结尾</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>特别注意：</strong><br>一个script标签如果加了src属性连接到另一个JS文件里面， 这个script标签里面就不能加东西了</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/javascript.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">var</span> div1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    div1<span class=\"token punctuation\">.</span>innerText<span class=\"token operator\">=</span><span class=\"token string\">\"改下你\"</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>==以上写法是错误的==</strong></p>\n<hr>\n<h4 id=\"JavaScript的注释\"><a href=\"#JavaScript的注释\" class=\"headerlink\" title=\"JavaScript的注释\"></a>JavaScript的注释</h4><pre class=\"line-numbers language-Javascript\" data-language=\"Javascript\"><code class=\"language-Javascript\">&#x2F;&#x2F;单行注释 \n&#x2F;*\n\t多行注释\n*&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"JavaScript - 基础语法","_content":"## 基本语法\n1. JavaScript是区分大小写的（HTML和CSS不区分大小写）\n2. JavaScript必须写在<==script==>标签里面，并且制定正确的类型（type）\n```html\n<script type=\"text/javascript\"></script>\n```\n<!--more-->\n3. JavaScript如果语法出现了错误，那么会在页面上的控制台（console）报错\n4. JavaScript里面，一句代码写完了以后，请加上分号结束 “ ; ” ，不加理论上市可以的，但是不推荐\n\n---\n#### 标识符\n用来标明某一些对象或事物的特征，主要应用于**关键字**与**变量名**\n\n> 标识符一般是指变量名，方法名，关键字或保留字\n\n> 变量名相当于人的姓名，它可以变，关键字则是系统自己使用的\n\n> if,else,for,while等这些都是系统关键字，而我们用户在写代码的过程当中，自己取得名字我们叫变量名\n\n**注意：**\n1. 标识符的开头必须是字母、_下划线、$开头，不能以数字开头，后面的则没有要求，可以使用任何字符\n    - 一般我们建议把 - 换成 _ 下划线\n    - 不要使用中文做变量名，如：\n```js\n性别 = '男';\n年龄 = 25;\n```\n2. 标识符应该遵循**见名知意**的原则，JavaScript默认以**驼峰命名**为原则：\n```js\nuserName = 'tiantian'; // 账号\nuserNickName = '天天'; // 昵称\npassWord = '123456'; // 密码\n```\n> **说明**：上面的代码就很好的说明了驼峰命名的原则 ，首字母小写，后面的每个英文单词字母大写\n以下情况请注意：\n```js\n// 如果在定义的时候，我们的标识符是一个单词，那么首字母大写\nAdd(),List(),Edit(),Query(),Insert(),addUserInfo(),getUserList()\n\nvar liuserAge = 18;\n// l: local 局部的\n// i: int 整数\n// userAge: 变量名\n\nvar _gstrPwd = '123456';\n// _代表临时变量\n// g: global 全局的\n// str: 字符串string\n// pwd：密码\n```\n3. 不能以**关键字**或**保留字**为标识符\n最常见的关键字，我们现在只学到了 **==var==** 定义变量\n\n我们不能以关键字做变量名，如 var，do，while等，也不能以保留字作标识符，如 const，'import'等(参考ECMA-262)\n\n---\n#### 变量标识符\n什么是变量：变量就是在描述事情特征（属性）当中，可以变化的数据，我们叫做变量\n> 使用关键字 var 来定义的标识符，我们叫变量标识符，变量标识符用于存放一定的数据在代码当中\n```js\nvar userName = '天天';\n```\n语法格式如下：\n```js\nvar 变量名1 = 变量值1;\nvar 变量名2 = 变量值2；\n```\n> **说明：** 在上面的代码中，var 是定义变量的**关键字**，userName 是变量标识符（变量名），“天天”则是这个变量标识符的值（变量值）；\n> 所有的变量都是像上面定义的，但是，有一种情况是像下面这种方式（多个变量一起定义的时候）\n```js\nvar userName=\"天天\";\nvar userAge=18;\nvar userSex=\"女\";\n\n/* 上面的代码当中，我们定义了三个变量，这是可以的 */\n\n> 注意：在JavaScript当中，所有的语句如果写完以后要使用分号 ; 结束\n\n还可以使用如下的语法格式：\n\n```js\nvar 变量名=变量1,变量名=变量2......，变量名n=变量值n;\n\n/* 上面这种方式就把之前的var进行了省略，然后中间使用了逗号进行隔开 */\n/* 当我们定义多个变量的时候，我们就会使用这一种方式 */\n\nvar userName=\"天天\",userSex=\"女\",userAge=18;\nvar a,b=10,c;   //这个比较特殊，a,c都没有赋值，b直接赋值了\nvar nickName=\"Lucy\";\nvar isTeacher=true;\nvar money=null;  //赋空值\n```\n> **说明**：上面的代码当中，我们在定义多个变量的时候，我们使用逗号隔开，每个变量在定义的时候可以赋值，也可以不赋值，如果赋值则使用=进行赋值\n\n> =是赋值的意思，把=等号右边的东西赋值给左边\n\n> 目前阶段，所有变量的定义，我们都通过 var 来进行\n\n---\n## 数据类型\n当我们定义变量以后，再向变量赋值的过程当中，会存以几种情况的值，例如姓名是汉字，年龄又是数字等\n\n汉字：一二三四五六七八九\n\n数字：123456789\n\n变量后面接的值的数据类型主要有以下几种\n\n1. 字符串（String）\n指的是汉字，英文等其他的字符\n当定义变量赋值字符串值的时候，我们一定要加上引号 （单引号与双引号都是用来形容字符串）\n加了引号了数字不是数字类型，是字符串类型\n```js\nvar userName = '天天';\n```\n2. 数字（Number）\n指的是0~9之间的数组成的数字（可以是整数，也可以是小数，还有负数）\n```js\nvar userAge = 18;\n```\n3. 布尔类型（Boolean）\n它只有两个值true/false;\n```js\nvar flag = true;\n```\n4. 空值（Null）\n当我们在定义一个变量的时候，我们如果不想给它赋值可以直接给一个null的空值\n注意它通过typeof检测出来的结果是object\n```js\nvar timer = null;\n```\n5. 未定义（Undefined）\n当一个变量在定义的时候，没有赋值，那么，它就是会出现undefined\n```js\nvar a;\nconsole.log(a)\n```\n> 上面的五个数据类型是JavaScript当中的**基本数据类型**\n\n**总结：**\n\n变量有5种基本的数据类型，1种复杂的数据类型\n\n---\n\n#### JavaScript数据类型检测\n在JS当中，我们有五种基本数据类型 ，后期我们还会根据这五种基本数据类型去完成**复杂的数据类型**（对象，数组【它是属于对象的一种】，方法）\n\n在JS里在，当我们定义了一个变量标识符以后，我们这个变量就存在了，但是有时候，如果我们需要去检测一下这个变量的类型就需要使用我们的typeof去检测\n\n---\n\n##### typeof 关键字\n这个关键字是用于检测JS当中的变量数据类型，它的语法格式如下\n\n```js\ntypeof 变量名\n```\n> 上面的代码运行以后就会得出我们的数据类型\n\n通过typeof我们可以检测出如下的几种数据类型\n1. number 数字类型\n2. string 字符串类型\n3. boolean 布尔类型\n4. undefined 未定义类型\n5. object 对象类型（null，数组，对象，正则表达式）\n6. function 方法类型\n\n> **说明**：typeof可以检测出任何数据类型，不管是基本的数据类型，还是复杂的数据类型\n\n> **注意**：关于对象的数据类型检测，我们后面有其它的方法进一步检测(instanceof,isArray等）\n\n---\n##### JavaScript数据类型的可变性\nJS的数据类型并不是一定不变的，它的数据类型是由后面的值来决定的，你进行什么类型的赋值，这个变量就是一个什么数据类型\n\n```js\nvar a=123;\ntypeof a;//得到的是number数据类型\na=\"hello world\";\ntypeof a; //得到的是string数据类型\n```\n**注意**：在其它的C/Java/C++/C#等编程语言里面，数据类型是不可变的，定义变量标识符必须在变量的前面先指定变量的数型如（int,string,boolean等）,可是在JS里面，所以的变量定义都是使用var来进行的，这个时候，变量的数据类型就不由前面的关键var决定了，而是由后面的值来决定的，后面接什么值就指定了它是什么类型。\n\n通过这一种区别，我们可以把JS语言和其它的语言做一个区分\n\n如果在定义变量的时候，变量的类型由前面的关键字决定的，我们把这种编程语言叫**强类型编程语言**\n\n如果变量的数据类型是由后面的值来决定的，这种编程语言我们叫**弱类型编程语言**\n\n---\n#### JavaScript 数据类型转换\n##### 字符串string转数字number\n1. 使用Number这个方法来进行\n```js\nvar a = '123';\nvar b = Number(a);\nconsole.log('b', b); // 123\nconsole.log(typeof b); // number\n\nvar c = '123.45';\nvar d = Number(c);\nconsole.log('d', d); // 123.45\nconsole.log(typeof d); // number\n\nvar e = '123.45.67';\nvar f = Number(e);\nconsole.log('f', f); // NaN \nconsole.log(typeof f); // number\n\nvar g = '项目1';\nvar h = Number(g);\nconsole.log('h', h); // NaN\nconsole.log(typeof h); // number\n\nvar i = '1号教室';\nvar j = Number(i);\nconsole.log('j', j); // NaN\nconsole.log(typeof j); // number\n```\n> NaN：全称 Not a Number(不是一个数字)，当一个运算经过计算本来应该得到一个Number数的时候结果报错了，就会出现NaN, typeof NaN得到的结果是\"number\"\n**Number在进行转换的时候，必须是一个合法的数字字符串，不然就会报NaN**\n\n2. 使用 parseInt() / parseFloat() 方法来进行转换\n```js\nvar a = '123';\nvar b = parseInt(a);\nconsole.log('b', b); // 123\nconsole.log(typeof b); // number\n\nvar c = '123.45';\nvar d = parseInt(c);\nvar _d = parseFloat(c);\nconsole.log('d', d); // 123\nconsole.log('_d', _d); // 123.45\nconsole.log(typeof d); // number\n\nvar e = '123.45.67';\nvar f = parseInt(e);\nvar _f = parseFloat(e);\nconsole.log('f', f); // 123\nconsole.log('_f', _f); // 123.45 \nconsole.log(typeof f); // number\n\nvar g = '项目1';\nvar h = parseInt(g);\nconsole.log('h', h); // NaN\nconsole.log(typeof h); // number\n\nvar i = '1号教室';\nvar j = parseInt(i);\nconsole.log('j', j); // i\nconsole.log(typeof j); // number\n```\n> parseInt是直接去掉小数，不做四舍五入的处理\n> parseInt或parseFloat只要前面是字符串的数字，都可以尝试去转，转换到非数字的地方就结束\n\n---\n##### 其它类型转字符串（string）类型\n\n```js\nvar a = 101;\n```\n要将上面的a转换成字符串有以下几种方法\n1. 将任何类型的数据转换成字符串，有一个最简便的方法就是直接加上一个空的字符串\n```js\na+\"\";  //结果为字符串\"101\"\n```\n\n2. 通过调用String方法来进行转换\n```js\n// 数字转字符串\nvar a = 101;\nvar b = String(a);\nconsole.log('b', b); // 字符串 101\nconsole.log(typeof b); // string\n\n// null类型转字符串\nvar c = null;\nvar d = String(c);\nconsole.log('c', c); // null\nconsole.log(typeof c); // object\n\n// 布尔值转字符串\nvar e = true;\nvar f = String(e);\nconsole.log('f', f); // 字符串 true\nconsole.log(typeof f); // string\n\n// undefined类型转字符串\nvar g = undefined;\nvar h = String(g);\nconsole.log('h', h); // undefined\nconsole.log(typeof h); // string\n```\n这一种方式与第一种方式计算结果一样，只是方法不一样而已\n\n3. 调用toString()方法来进行转换\n```js\nvar a=10;\na.toString();   //结果为\"10\"\nvar b=true;    \nb.toString();    //结果为字符串的“true”\nvar c=null;    \nvar d=undefined;\n```\n\n**注意**：null与undefined 没有 toString()的方法\n\n---\n##### 数字与布尔Boolean类型的转换\n1. 数字的0与1转换成boolean类型\n```js\nvar a=0;\nvar b=Boolean(a);   //得到布尔类型false\nvar c=1;\nvar d=Boolean(c);   //得到布尔类型true\nvar e=5;\nvar f=Boolean(e);   //得到布尔类型true\n```\n> 数字转Boolean的时候，如果这个数是明确的0，那么就是false,否则一律是true\n\n2. 字符串数字的\"0\"与\"1\"转boolean类型\n```js\nvar a=\"0\";\nvar b=Boolean(a);   //得到布尔true\nvar c=\"1\";\t\t\t\nvar d=Boolean(c);   //得到布尔类型true\n```\n针对上面的情况，我们需要将字符串的\"0\"与'1'先转换成数字的0和1，再进行操作\n```js\nvar a=\"0\";\nvar _a=Number(a);   //先转换成数字0\nvar b=Boolean(_a);  //得到结果false\n\nvar c=\"1\";\nvar _c=Number(c);\t//先转在数字1\nvar d=Boolean(_c);  //再转换成布尔true\n```\n\n3. 布尔类型转成数字 0 或 1\n```js\nvar a=true;\nvar b=Number(a);   //得到数字1\n\nvar c=false;\nvar d=Number(c);   //得到数字0\n```\n\n4. 字符串的\"true\" 与 \"false\"能否转换成 true/false 或 0/1\n```js\nvar a=\"true\";\n\nvar c=\"false\";\n```\n\n---\n#### 变量的区域性（作用域）\n1. 使用 var 定义的变量**没有块级作用域**\n```js\n/* 没有块级作用域指的是如果用花括号{}包裹起来，形成不了作用域（function里面的花括号除外） */\n\n/* JS里面的花括号形成不了变量的封闭环境 */\n\n{\n    var a=123;\n    //var定义的变量没有块级作用域\n}\nconsole.log(a);   //这是不会报错的\n```\n花括号形成不了封闭环境，所以你在前面无论加上什么如我们后期的if/else/for/while等都不会形成封闭环境\n但是加上function以后就会有封闭环境\n```js\nfunction m(){\n    var a=123;\n    //当var定义在function的花括号里面，就会有作用域了\n}\nconsole.log(a); //报错 a is not defined\n```\n\n2. script标签形成不了作用域\n```js\n/* 在一个页面里面，可以有多个script标签，但是它们仍然不具备封闭环境 */\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>变量区域性</title>\n    <script>\n        var a=101;\n    </script>\n</head>\n<body>    \n</body>\n<script>\n    console.log(a);\n</script>\n</html>\n```\n> 这个时候的代码不会报错，因为script形成不了封闭的环境，页面最终还是会将之个 script的代码合并在一起执行\n\n---\n#### JavaScript 中的操作符\n##### 加法操作符 +\n1. 数字与数字相加\n```js\nvar a=10;\nvar b=15;\nvar c=a+b; // c = 25\n```\n在数值与数值相加的情况下，以下特殊情况需要单独处理\n```js\nvar c = NaN+NaN;   //结果还是NaN\n```\n> NaN在五种基本数据类里面，除了String字符串以外，其它的都是NaN\n在JS里面，Infinity代表了无穷大正数，-Infinity代表了无穷大的负数，当它们进行运算的时候，要特别注意\n```js\nvar a = Infinity+Infinity;   //得到的结果仍然是无穷大\nvar b = 6 / 0; // 得到也是 Infinity\n```\n\n2. 字符串与数字相加\n```js\n// 字符串与数字相加，结果是字符串，它会把数字先转成字符串，然后连接在一起\nvar a = \"hello\"+123;  //结果\"hello123\"\nvar b = \"456\"+123;    //结果\"456123\"\n```\n\n3. 字符串与字符串相加\n```js\n//指的就是字符串的拼接\nvar a = \"hello\"+\"world\";   //结果\"hello world\"\nvar b = \"你好\"+\"520\";       //结果 \"你好520\"\n```\n\n4. 其他类型数据相加\n```js\nvar a = 1+null;\t\t\t\t//得到结果1\nvar b = 1+undefined;\t\t\t//NaN\nvar c = 1+false;\t\t\t//结果为1\nvar d = 1+true;\t\t\t\t//结果为2\n```\n> 可以把false与null看成是0,undefined会报NaN,true可以看成是1\n> 五种基本数据类型里面，只有string字符串与undefined相加不为NaN\n\n##### 减法操作符 -\n```js\nvar a = 10-1;  //9\nvar b = 20-false;  //20\nvar _b = 20-true;  //19\nvar c = 15-null;   //15\nvar d = 11-undefined;   //NaN\nvar f = 12-NaN;    //NaN\n\nvar g = \"hello\"-1;  //NaN\nvar f = \"a\"-\"b\";    //NaN\n```\n\n##### 乘法操作符 *\n```js\nvar a = 10*1;  //10\nvar b = 20*false;  //   0\nvar _b = 20*true;  //  20\nvar c = 15*null;   //  0\nvar d = 11*undefined;   //NaN\nvar f = 12*NaN;    //NaN\n\nvar g = \"hello\"*1;  //NaN\nvar f = \"a\"*\"b\";    //NaN\n```\n\n##### 除法操作符 /\n除法与乘法保持一致，唯独多了一个0的处理问题\n```js\nvar a = 0/0;   //结果NaN\nvar b = 10/0   //Infinity\n```\n\n##### 取余操作符 %\n一个整数操作另外一个整数的时候，取它的余数\n```js\nvar a = 10%3;   //结果1\nvar b = 10%null;   //NaN\nvar c = 10%undefined;//NaN\nvar d = 10%true;\t//结果为0\nvar e = 10%false;   //NaN\n```\n\n##### 相等操作符 ==\n在JavaScript当中，我们的相等是使用等号==来进行的，如果要判断两个变量（对象）是否相等，这个时候，我们就要使用相等操作符\n相等操作符与赋值操作符非常相像，都是使用等号，但是赋值操作符使用一个等号=，而相等操作符使用两个等号==\n```js\nvar a=1;\nvar b=1;\na==b;  //这句话是成立的\n```\n**注意以下代码**\n```js\nvar a=1,b=\"1\",c=true;\na==b; //true\nb==c; //true\na==c; //true\n```\n> **重点说明**：使用相等操作符去判断两个变量（对象）是否相等的时候，我们如果只有两个等号 == 去操作，这个时候，它会把两个等号 == 左右两边的值做类型转换（这个过程系统自动转换）以后再去执行判断操作\n\n##### 严格相等操作符 ===\n在JavaScript当中，当我们使用相等操作符==去操作的时候，这会自动的进行数据类型的转换，但是有时候，我们又不希望它进行数据类型转换 ，这个时候，我们就需要使用严格相等操作符 ===\n```js\nvar a=1,b=\"1\",c=true;\na===b; //false;\nb===c; //false\n```\n> 普通相等 == 与严格相等 === 对比，普通相等 == 只判断变量的值是否相等，而不判断变量的类型是否相等，而 ===，即要判断值相等，也要判断类型相等\n\n**注意：**NaN不与任何东西作比较，只要一比较就是false\n\n> 上面的东西如果有严格相等，全都不成立 ，都是false\n\n== 与 === 都是判断相等操作，还有一个不等的操作符 != , !== ,它跟等号反着判断就行了\n\n##### 一元操作符\n只能操作一个值的操作符，我们叫一元操 作符\n```js\nvar a=10;\na=a+1;  \nconsole.log(a);  //控制台会输出11\n```\n上面的代码如果转换成自加或自减的一元操作符以后，会变成如下代码\n```js\nvar a=10;\na++;\nconsole.log(a);  //这个时候控制台会输出11\n```\n**注意事项**：当我们在进行自加运算或自减运算的时候，我们可以把这个符号放在前面，也可以放在后面\n- 如果自加运算符在后面，则代表先使用自己，使用完以后再+1\n- 如果自加运算符在前面，则代表前把自己+1，然后再使用自己\n```js\nvar a=10;\nconsole.log(a++); // 10\nconsole.log(a); // 11\n\n说明：上面的代码执行完毕以后，控制台打印出来的结果是10，但是最终a的值为11\na先使用自己（这个时候的a还是10），使用完成以后（控制台打印完毕以后）自已再+1，这个时候最终的值为11\n```\n```js\nvar a=10;\nconsole.log(++a); // 11\nconsole.log(a); // 11\n\n说明：上面的代码执行完毕以后，控制台打印出来的结果为11，a的最终值也为11\na在使用之前就要把自己+1（10+1=11），然后再去使用自己（控制台去打印），这个时候控制台的值为11\n```\n根据一元操作符的特点，我们可以演变成如下的操作\n```js\nvar a=10;\na=a+2;   //a+=2;\na=a-5;   //a-=5;\nvar b=5;\na+=b;    //a=a+b;\na-=b;    //a=a-b;\na*=b;    //a=a*b;\na/=b;    //a=a/b;\n```\n\n##### 逻辑操作符\n在JavaScript当中，常用的逻辑操作符有三种，“与”，“或”，“非”\n1. 与的操作符是&&\n2. 或的操作符是||\n3. 非的操作符!\n\n###### 计算过程\n- 当运算的符号相同的时候\n    - 与的操作，一假一假\n    - 或的操作，一真即真\n    - 非的操作，非真即假，非假即真\n    - 必须遵守**短路原则**，当一个表达式的前面部分已经能够得到结果，就停止计算，返回结果，如果得不到结果，就继续计算，直到最后一个\n    - 处理特殊值 NaN 或 null 与 undefined 或 \"\" 字符串的时候，可以把它看成是false（但本质上并不是false）   \n```js\n/* 逻辑运算符支持短路原则：\n (表达式1）&&(表达式2) 如果表达式1为假，则表达式2不会进行运算，即表达式2“被短路”\n (表达式1）||(表达式2) 如果表达式1为真，则表达式2不会进行运算，即表达式2“被短路” */\n\nvar a=true,b=false,c=null,d=undefined;\na||b||c;   // true\nfalse||b||c;  //null  因为已经计算到最后一个\nfalse||b||true||c;   //true  计算到第3步就已经结束了\n\n//---------------------------------\na&&b&&c;    //false  \na&&c&&b;    //null\nd&&c&&b;    //undefined\n\n/* 总结：\na&& b :如果执行a后返回true，则执行b并返回b的值；如果执行a后返回false，则整个表达式返回a的值，b不执行；\na || b :如果执行a后返回true，则整个表达式返回a的值，b不执行；如果执行a后返回false，则执行b并返回b的值； */\n```\n- 当运算的符号不相同的时候\n```js\n从左往右\n根据优先级来计算 !>&&>||\n\nvar a=true,b=false,c=null,d=undefined;\ntrue||b&&c;   //true\nfalse||c&&b;   //null\nfalse||d&&c;   //undefined\n!b||c||d&&!a   //true||c||d&&false    得到结果true\n```\n- 特殊情况特殊对待\n我们在计算过程当中，可以把 0当成 false，把1当成true(不是真的是true/false)\n```js\n第一种情况\n\nvar a=true,b=false,c=null,d=undefined;\n1||b&&c;     //1\n0||b&&c;     //false\n```\n```js\n第二种情况，非0或1的情况\n\nvar a=true,b=false,c=null,d=undefined;\n\"\"||b&&c;    //假设\"\"也是false    false\n\"\"&&b&&c;    //得到 \"\"\n\"\"&&b||c;    //得到null\n!\"\"||b&&c;   //不要想太复杂 !\"\"结果为true    最后结果肯定是true\n!undefined||b&&c;   //true\n!null||b&&c;  //true\n//---------------------------------------------\n\"a\"||b&&c;   //\"a\"\n123||undefined;   //123   Boolean(123)得到true\nnull||\"hello\";    //hello;\n```\n**心得：**\n> 在上面的两种情况下面，我们可以把这些值做一次Boolean转换，然后得到true或false以后再去计算（只是把这个值看成是true或false并不是真正的true或false）\n\n> 以下内容会被当成false处理：\"\" , false , 0 , null , undefined , NaN\n\n##### 条件运算符\n条件运算符是根据某一个条件来得出某一个结果，它有固定的书写格式\n```js\nvar a = 判断条件?第一个值:第二个值;\n\n/* 在上面的格式上当，如果判断条件成立，则返回第一个值，否则返回第二个值 */\n```\n示例：\n```js\nvar a=10;\nvar b=11;\nvar c=a>b?12:13;\n```\n案例1：\n```js\nvar a=10;\nvar b=11;\nvar c;\n//要求，请将a与b作对比以后然后将其中大的一个值赋值给变量C\n\n通过条件运算符，我们可以很好的去判断上面的问题\nvar c = a>b?a:b;\n/* a小于b，所以c取值b */\n```\n\n案例2：\n```js\nvar a=10,b=11,c=12;\nvar d;\n//请将a,b,c中最大的一个值赋值给d\n\n//-------------------\n思路：首先完成第一次比较，将a与b作比较，返回a与b中大的哪一个数，我们可以定义一个变量temp，然后再拿这个temp去和C做比较（第二次对比），然后再通过条件运算符去返回其中大的一个数\nvar temp = a>b?a:b;\nvar max = temp>c?temp:c;\n/* max现在就是最大的值 */\n\n//-------------------\n现在要求把上面的两行代码换成一行代码去完成\nvar d = a>b?(a>c?a:c):(b>c?b:c);\n/* a 和 b作比较，如果 a 大，取 a 和 c 作比较；如果 b 大，取 b 和 c 作比较 */\n```\n\n案例3：\n```js\nvar a = undefined?1:2;\n// Boolean(undefined) 为false 取值2\n\nvar e = \"123\"?\"hello\":\"world\";\n// Boolean(\"123\") 为true 取值\"hello\"\n```\n> undefined，NaN可以得到false，所以条件不成立，而\"123\"不可以得到false,所以条件成立\n\n> 把前面这里的值做一次Boolean()操作，得到true就代表成立，得到false就代表不成立\n\n##### 关系操作符\n在JavaScript当中，关系操作符包含大于（>）小于（<），大于等于(>=)，小于等 于（<=）\n\n在强类型的编程语言里面，关系操作符只是对数字类型（Number类型）做比较，但是在JavaScript当中，它不仅仅可以对数字做对比，也可以做其它的类型做对比\n1. 数字和数字对比\n```js\nvar result = 1>2;\n// 得到false\n```\n2. 数字和字符串对比\n```js\nvar result = \"3\">2;\n// 得到true\n/* 说明：数字型的字符串与数字作对比，那么另一个会自动转换成我么的数字 */\n```\n3. 特殊数字NaN和其他做对比\n```js\nvar result1 = NaN>3;\nvar result2 = NaN<=3;\n/* 说明：这里结果都是false， 任何数与NaN做对比得到都是false*/\n```\n4. 字符串数字和数字符数字作对比\n```js\nvar result=\"78\">\"9\";  \n//false 字符串9的ASCII值是57 值越小越大\n/* 注意：如果对比的两边都是字符串，则需要去判断它们的字符串编码 */\n```\n> 字符串编码指是在计算当中，所有的数字，特殊符号，英文字母都有一个特殊的数字编码，这个编码我们叫Acsll编码\n\nASCII对照表：https://tool.oschina.net/commons?type=4\n\n5. 对象与对象比较\n如果这个对象有valueOf()的方法，则用valueOf()的值作对比，如果没有，则用toString()的方法做对比\n\n**思考**：如果null，undefined,\"\"与其它的数做对比的时候，结果如何？\n\n```js\n1>null;     //true;\n1>undefined;   //false;\n1>\"\";       //true;\nnull>undefined;  //false\n\"A\"<\"b\";     //65<98   true\n//最复杂的是中文\n\"我\">\"你\";    //中文字符串对比的是unicode码\n//25105 对比 20320  \n```\n**注意事项：**\n> null==undefined，同时1>null成立，所以很多人理所当然就认为1>undefined，但结果不是\n\n> 中文当中var a=\"我\" a.chatCodeAt(0)得到unicode码，然后再去对比\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js-base.md","raw":"---\ntitle: JavaScript - 基础语法\ntags: 基础语法\ncategories: js\n---\n## 基本语法\n1. JavaScript是区分大小写的（HTML和CSS不区分大小写）\n2. JavaScript必须写在<==script==>标签里面，并且制定正确的类型（type）\n```html\n<script type=\"text/javascript\"></script>\n```\n<!--more-->\n3. JavaScript如果语法出现了错误，那么会在页面上的控制台（console）报错\n4. JavaScript里面，一句代码写完了以后，请加上分号结束 “ ; ” ，不加理论上市可以的，但是不推荐\n\n---\n#### 标识符\n用来标明某一些对象或事物的特征，主要应用于**关键字**与**变量名**\n\n> 标识符一般是指变量名，方法名，关键字或保留字\n\n> 变量名相当于人的姓名，它可以变，关键字则是系统自己使用的\n\n> if,else,for,while等这些都是系统关键字，而我们用户在写代码的过程当中，自己取得名字我们叫变量名\n\n**注意：**\n1. 标识符的开头必须是字母、_下划线、$开头，不能以数字开头，后面的则没有要求，可以使用任何字符\n    - 一般我们建议把 - 换成 _ 下划线\n    - 不要使用中文做变量名，如：\n```js\n性别 = '男';\n年龄 = 25;\n```\n2. 标识符应该遵循**见名知意**的原则，JavaScript默认以**驼峰命名**为原则：\n```js\nuserName = 'tiantian'; // 账号\nuserNickName = '天天'; // 昵称\npassWord = '123456'; // 密码\n```\n> **说明**：上面的代码就很好的说明了驼峰命名的原则 ，首字母小写，后面的每个英文单词字母大写\n以下情况请注意：\n```js\n// 如果在定义的时候，我们的标识符是一个单词，那么首字母大写\nAdd(),List(),Edit(),Query(),Insert(),addUserInfo(),getUserList()\n\nvar liuserAge = 18;\n// l: local 局部的\n// i: int 整数\n// userAge: 变量名\n\nvar _gstrPwd = '123456';\n// _代表临时变量\n// g: global 全局的\n// str: 字符串string\n// pwd：密码\n```\n3. 不能以**关键字**或**保留字**为标识符\n最常见的关键字，我们现在只学到了 **==var==** 定义变量\n\n我们不能以关键字做变量名，如 var，do，while等，也不能以保留字作标识符，如 const，'import'等(参考ECMA-262)\n\n---\n#### 变量标识符\n什么是变量：变量就是在描述事情特征（属性）当中，可以变化的数据，我们叫做变量\n> 使用关键字 var 来定义的标识符，我们叫变量标识符，变量标识符用于存放一定的数据在代码当中\n```js\nvar userName = '天天';\n```\n语法格式如下：\n```js\nvar 变量名1 = 变量值1;\nvar 变量名2 = 变量值2；\n```\n> **说明：** 在上面的代码中，var 是定义变量的**关键字**，userName 是变量标识符（变量名），“天天”则是这个变量标识符的值（变量值）；\n> 所有的变量都是像上面定义的，但是，有一种情况是像下面这种方式（多个变量一起定义的时候）\n```js\nvar userName=\"天天\";\nvar userAge=18;\nvar userSex=\"女\";\n\n/* 上面的代码当中，我们定义了三个变量，这是可以的 */\n\n> 注意：在JavaScript当中，所有的语句如果写完以后要使用分号 ; 结束\n\n还可以使用如下的语法格式：\n\n```js\nvar 变量名=变量1,变量名=变量2......，变量名n=变量值n;\n\n/* 上面这种方式就把之前的var进行了省略，然后中间使用了逗号进行隔开 */\n/* 当我们定义多个变量的时候，我们就会使用这一种方式 */\n\nvar userName=\"天天\",userSex=\"女\",userAge=18;\nvar a,b=10,c;   //这个比较特殊，a,c都没有赋值，b直接赋值了\nvar nickName=\"Lucy\";\nvar isTeacher=true;\nvar money=null;  //赋空值\n```\n> **说明**：上面的代码当中，我们在定义多个变量的时候，我们使用逗号隔开，每个变量在定义的时候可以赋值，也可以不赋值，如果赋值则使用=进行赋值\n\n> =是赋值的意思，把=等号右边的东西赋值给左边\n\n> 目前阶段，所有变量的定义，我们都通过 var 来进行\n\n---\n## 数据类型\n当我们定义变量以后，再向变量赋值的过程当中，会存以几种情况的值，例如姓名是汉字，年龄又是数字等\n\n汉字：一二三四五六七八九\n\n数字：123456789\n\n变量后面接的值的数据类型主要有以下几种\n\n1. 字符串（String）\n指的是汉字，英文等其他的字符\n当定义变量赋值字符串值的时候，我们一定要加上引号 （单引号与双引号都是用来形容字符串）\n加了引号了数字不是数字类型，是字符串类型\n```js\nvar userName = '天天';\n```\n2. 数字（Number）\n指的是0~9之间的数组成的数字（可以是整数，也可以是小数，还有负数）\n```js\nvar userAge = 18;\n```\n3. 布尔类型（Boolean）\n它只有两个值true/false;\n```js\nvar flag = true;\n```\n4. 空值（Null）\n当我们在定义一个变量的时候，我们如果不想给它赋值可以直接给一个null的空值\n注意它通过typeof检测出来的结果是object\n```js\nvar timer = null;\n```\n5. 未定义（Undefined）\n当一个变量在定义的时候，没有赋值，那么，它就是会出现undefined\n```js\nvar a;\nconsole.log(a)\n```\n> 上面的五个数据类型是JavaScript当中的**基本数据类型**\n\n**总结：**\n\n变量有5种基本的数据类型，1种复杂的数据类型\n\n---\n\n#### JavaScript数据类型检测\n在JS当中，我们有五种基本数据类型 ，后期我们还会根据这五种基本数据类型去完成**复杂的数据类型**（对象，数组【它是属于对象的一种】，方法）\n\n在JS里在，当我们定义了一个变量标识符以后，我们这个变量就存在了，但是有时候，如果我们需要去检测一下这个变量的类型就需要使用我们的typeof去检测\n\n---\n\n##### typeof 关键字\n这个关键字是用于检测JS当中的变量数据类型，它的语法格式如下\n\n```js\ntypeof 变量名\n```\n> 上面的代码运行以后就会得出我们的数据类型\n\n通过typeof我们可以检测出如下的几种数据类型\n1. number 数字类型\n2. string 字符串类型\n3. boolean 布尔类型\n4. undefined 未定义类型\n5. object 对象类型（null，数组，对象，正则表达式）\n6. function 方法类型\n\n> **说明**：typeof可以检测出任何数据类型，不管是基本的数据类型，还是复杂的数据类型\n\n> **注意**：关于对象的数据类型检测，我们后面有其它的方法进一步检测(instanceof,isArray等）\n\n---\n##### JavaScript数据类型的可变性\nJS的数据类型并不是一定不变的，它的数据类型是由后面的值来决定的，你进行什么类型的赋值，这个变量就是一个什么数据类型\n\n```js\nvar a=123;\ntypeof a;//得到的是number数据类型\na=\"hello world\";\ntypeof a; //得到的是string数据类型\n```\n**注意**：在其它的C/Java/C++/C#等编程语言里面，数据类型是不可变的，定义变量标识符必须在变量的前面先指定变量的数型如（int,string,boolean等）,可是在JS里面，所以的变量定义都是使用var来进行的，这个时候，变量的数据类型就不由前面的关键var决定了，而是由后面的值来决定的，后面接什么值就指定了它是什么类型。\n\n通过这一种区别，我们可以把JS语言和其它的语言做一个区分\n\n如果在定义变量的时候，变量的类型由前面的关键字决定的，我们把这种编程语言叫**强类型编程语言**\n\n如果变量的数据类型是由后面的值来决定的，这种编程语言我们叫**弱类型编程语言**\n\n---\n#### JavaScript 数据类型转换\n##### 字符串string转数字number\n1. 使用Number这个方法来进行\n```js\nvar a = '123';\nvar b = Number(a);\nconsole.log('b', b); // 123\nconsole.log(typeof b); // number\n\nvar c = '123.45';\nvar d = Number(c);\nconsole.log('d', d); // 123.45\nconsole.log(typeof d); // number\n\nvar e = '123.45.67';\nvar f = Number(e);\nconsole.log('f', f); // NaN \nconsole.log(typeof f); // number\n\nvar g = '项目1';\nvar h = Number(g);\nconsole.log('h', h); // NaN\nconsole.log(typeof h); // number\n\nvar i = '1号教室';\nvar j = Number(i);\nconsole.log('j', j); // NaN\nconsole.log(typeof j); // number\n```\n> NaN：全称 Not a Number(不是一个数字)，当一个运算经过计算本来应该得到一个Number数的时候结果报错了，就会出现NaN, typeof NaN得到的结果是\"number\"\n**Number在进行转换的时候，必须是一个合法的数字字符串，不然就会报NaN**\n\n2. 使用 parseInt() / parseFloat() 方法来进行转换\n```js\nvar a = '123';\nvar b = parseInt(a);\nconsole.log('b', b); // 123\nconsole.log(typeof b); // number\n\nvar c = '123.45';\nvar d = parseInt(c);\nvar _d = parseFloat(c);\nconsole.log('d', d); // 123\nconsole.log('_d', _d); // 123.45\nconsole.log(typeof d); // number\n\nvar e = '123.45.67';\nvar f = parseInt(e);\nvar _f = parseFloat(e);\nconsole.log('f', f); // 123\nconsole.log('_f', _f); // 123.45 \nconsole.log(typeof f); // number\n\nvar g = '项目1';\nvar h = parseInt(g);\nconsole.log('h', h); // NaN\nconsole.log(typeof h); // number\n\nvar i = '1号教室';\nvar j = parseInt(i);\nconsole.log('j', j); // i\nconsole.log(typeof j); // number\n```\n> parseInt是直接去掉小数，不做四舍五入的处理\n> parseInt或parseFloat只要前面是字符串的数字，都可以尝试去转，转换到非数字的地方就结束\n\n---\n##### 其它类型转字符串（string）类型\n\n```js\nvar a = 101;\n```\n要将上面的a转换成字符串有以下几种方法\n1. 将任何类型的数据转换成字符串，有一个最简便的方法就是直接加上一个空的字符串\n```js\na+\"\";  //结果为字符串\"101\"\n```\n\n2. 通过调用String方法来进行转换\n```js\n// 数字转字符串\nvar a = 101;\nvar b = String(a);\nconsole.log('b', b); // 字符串 101\nconsole.log(typeof b); // string\n\n// null类型转字符串\nvar c = null;\nvar d = String(c);\nconsole.log('c', c); // null\nconsole.log(typeof c); // object\n\n// 布尔值转字符串\nvar e = true;\nvar f = String(e);\nconsole.log('f', f); // 字符串 true\nconsole.log(typeof f); // string\n\n// undefined类型转字符串\nvar g = undefined;\nvar h = String(g);\nconsole.log('h', h); // undefined\nconsole.log(typeof h); // string\n```\n这一种方式与第一种方式计算结果一样，只是方法不一样而已\n\n3. 调用toString()方法来进行转换\n```js\nvar a=10;\na.toString();   //结果为\"10\"\nvar b=true;    \nb.toString();    //结果为字符串的“true”\nvar c=null;    \nvar d=undefined;\n```\n\n**注意**：null与undefined 没有 toString()的方法\n\n---\n##### 数字与布尔Boolean类型的转换\n1. 数字的0与1转换成boolean类型\n```js\nvar a=0;\nvar b=Boolean(a);   //得到布尔类型false\nvar c=1;\nvar d=Boolean(c);   //得到布尔类型true\nvar e=5;\nvar f=Boolean(e);   //得到布尔类型true\n```\n> 数字转Boolean的时候，如果这个数是明确的0，那么就是false,否则一律是true\n\n2. 字符串数字的\"0\"与\"1\"转boolean类型\n```js\nvar a=\"0\";\nvar b=Boolean(a);   //得到布尔true\nvar c=\"1\";\t\t\t\nvar d=Boolean(c);   //得到布尔类型true\n```\n针对上面的情况，我们需要将字符串的\"0\"与'1'先转换成数字的0和1，再进行操作\n```js\nvar a=\"0\";\nvar _a=Number(a);   //先转换成数字0\nvar b=Boolean(_a);  //得到结果false\n\nvar c=\"1\";\nvar _c=Number(c);\t//先转在数字1\nvar d=Boolean(_c);  //再转换成布尔true\n```\n\n3. 布尔类型转成数字 0 或 1\n```js\nvar a=true;\nvar b=Number(a);   //得到数字1\n\nvar c=false;\nvar d=Number(c);   //得到数字0\n```\n\n4. 字符串的\"true\" 与 \"false\"能否转换成 true/false 或 0/1\n```js\nvar a=\"true\";\n\nvar c=\"false\";\n```\n\n---\n#### 变量的区域性（作用域）\n1. 使用 var 定义的变量**没有块级作用域**\n```js\n/* 没有块级作用域指的是如果用花括号{}包裹起来，形成不了作用域（function里面的花括号除外） */\n\n/* JS里面的花括号形成不了变量的封闭环境 */\n\n{\n    var a=123;\n    //var定义的变量没有块级作用域\n}\nconsole.log(a);   //这是不会报错的\n```\n花括号形成不了封闭环境，所以你在前面无论加上什么如我们后期的if/else/for/while等都不会形成封闭环境\n但是加上function以后就会有封闭环境\n```js\nfunction m(){\n    var a=123;\n    //当var定义在function的花括号里面，就会有作用域了\n}\nconsole.log(a); //报错 a is not defined\n```\n\n2. script标签形成不了作用域\n```js\n/* 在一个页面里面，可以有多个script标签，但是它们仍然不具备封闭环境 */\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>变量区域性</title>\n    <script>\n        var a=101;\n    </script>\n</head>\n<body>    \n</body>\n<script>\n    console.log(a);\n</script>\n</html>\n```\n> 这个时候的代码不会报错，因为script形成不了封闭的环境，页面最终还是会将之个 script的代码合并在一起执行\n\n---\n#### JavaScript 中的操作符\n##### 加法操作符 +\n1. 数字与数字相加\n```js\nvar a=10;\nvar b=15;\nvar c=a+b; // c = 25\n```\n在数值与数值相加的情况下，以下特殊情况需要单独处理\n```js\nvar c = NaN+NaN;   //结果还是NaN\n```\n> NaN在五种基本数据类里面，除了String字符串以外，其它的都是NaN\n在JS里面，Infinity代表了无穷大正数，-Infinity代表了无穷大的负数，当它们进行运算的时候，要特别注意\n```js\nvar a = Infinity+Infinity;   //得到的结果仍然是无穷大\nvar b = 6 / 0; // 得到也是 Infinity\n```\n\n2. 字符串与数字相加\n```js\n// 字符串与数字相加，结果是字符串，它会把数字先转成字符串，然后连接在一起\nvar a = \"hello\"+123;  //结果\"hello123\"\nvar b = \"456\"+123;    //结果\"456123\"\n```\n\n3. 字符串与字符串相加\n```js\n//指的就是字符串的拼接\nvar a = \"hello\"+\"world\";   //结果\"hello world\"\nvar b = \"你好\"+\"520\";       //结果 \"你好520\"\n```\n\n4. 其他类型数据相加\n```js\nvar a = 1+null;\t\t\t\t//得到结果1\nvar b = 1+undefined;\t\t\t//NaN\nvar c = 1+false;\t\t\t//结果为1\nvar d = 1+true;\t\t\t\t//结果为2\n```\n> 可以把false与null看成是0,undefined会报NaN,true可以看成是1\n> 五种基本数据类型里面，只有string字符串与undefined相加不为NaN\n\n##### 减法操作符 -\n```js\nvar a = 10-1;  //9\nvar b = 20-false;  //20\nvar _b = 20-true;  //19\nvar c = 15-null;   //15\nvar d = 11-undefined;   //NaN\nvar f = 12-NaN;    //NaN\n\nvar g = \"hello\"-1;  //NaN\nvar f = \"a\"-\"b\";    //NaN\n```\n\n##### 乘法操作符 *\n```js\nvar a = 10*1;  //10\nvar b = 20*false;  //   0\nvar _b = 20*true;  //  20\nvar c = 15*null;   //  0\nvar d = 11*undefined;   //NaN\nvar f = 12*NaN;    //NaN\n\nvar g = \"hello\"*1;  //NaN\nvar f = \"a\"*\"b\";    //NaN\n```\n\n##### 除法操作符 /\n除法与乘法保持一致，唯独多了一个0的处理问题\n```js\nvar a = 0/0;   //结果NaN\nvar b = 10/0   //Infinity\n```\n\n##### 取余操作符 %\n一个整数操作另外一个整数的时候，取它的余数\n```js\nvar a = 10%3;   //结果1\nvar b = 10%null;   //NaN\nvar c = 10%undefined;//NaN\nvar d = 10%true;\t//结果为0\nvar e = 10%false;   //NaN\n```\n\n##### 相等操作符 ==\n在JavaScript当中，我们的相等是使用等号==来进行的，如果要判断两个变量（对象）是否相等，这个时候，我们就要使用相等操作符\n相等操作符与赋值操作符非常相像，都是使用等号，但是赋值操作符使用一个等号=，而相等操作符使用两个等号==\n```js\nvar a=1;\nvar b=1;\na==b;  //这句话是成立的\n```\n**注意以下代码**\n```js\nvar a=1,b=\"1\",c=true;\na==b; //true\nb==c; //true\na==c; //true\n```\n> **重点说明**：使用相等操作符去判断两个变量（对象）是否相等的时候，我们如果只有两个等号 == 去操作，这个时候，它会把两个等号 == 左右两边的值做类型转换（这个过程系统自动转换）以后再去执行判断操作\n\n##### 严格相等操作符 ===\n在JavaScript当中，当我们使用相等操作符==去操作的时候，这会自动的进行数据类型的转换，但是有时候，我们又不希望它进行数据类型转换 ，这个时候，我们就需要使用严格相等操作符 ===\n```js\nvar a=1,b=\"1\",c=true;\na===b; //false;\nb===c; //false\n```\n> 普通相等 == 与严格相等 === 对比，普通相等 == 只判断变量的值是否相等，而不判断变量的类型是否相等，而 ===，即要判断值相等，也要判断类型相等\n\n**注意：**NaN不与任何东西作比较，只要一比较就是false\n\n> 上面的东西如果有严格相等，全都不成立 ，都是false\n\n== 与 === 都是判断相等操作，还有一个不等的操作符 != , !== ,它跟等号反着判断就行了\n\n##### 一元操作符\n只能操作一个值的操作符，我们叫一元操 作符\n```js\nvar a=10;\na=a+1;  \nconsole.log(a);  //控制台会输出11\n```\n上面的代码如果转换成自加或自减的一元操作符以后，会变成如下代码\n```js\nvar a=10;\na++;\nconsole.log(a);  //这个时候控制台会输出11\n```\n**注意事项**：当我们在进行自加运算或自减运算的时候，我们可以把这个符号放在前面，也可以放在后面\n- 如果自加运算符在后面，则代表先使用自己，使用完以后再+1\n- 如果自加运算符在前面，则代表前把自己+1，然后再使用自己\n```js\nvar a=10;\nconsole.log(a++); // 10\nconsole.log(a); // 11\n\n说明：上面的代码执行完毕以后，控制台打印出来的结果是10，但是最终a的值为11\na先使用自己（这个时候的a还是10），使用完成以后（控制台打印完毕以后）自已再+1，这个时候最终的值为11\n```\n```js\nvar a=10;\nconsole.log(++a); // 11\nconsole.log(a); // 11\n\n说明：上面的代码执行完毕以后，控制台打印出来的结果为11，a的最终值也为11\na在使用之前就要把自己+1（10+1=11），然后再去使用自己（控制台去打印），这个时候控制台的值为11\n```\n根据一元操作符的特点，我们可以演变成如下的操作\n```js\nvar a=10;\na=a+2;   //a+=2;\na=a-5;   //a-=5;\nvar b=5;\na+=b;    //a=a+b;\na-=b;    //a=a-b;\na*=b;    //a=a*b;\na/=b;    //a=a/b;\n```\n\n##### 逻辑操作符\n在JavaScript当中，常用的逻辑操作符有三种，“与”，“或”，“非”\n1. 与的操作符是&&\n2. 或的操作符是||\n3. 非的操作符!\n\n###### 计算过程\n- 当运算的符号相同的时候\n    - 与的操作，一假一假\n    - 或的操作，一真即真\n    - 非的操作，非真即假，非假即真\n    - 必须遵守**短路原则**，当一个表达式的前面部分已经能够得到结果，就停止计算，返回结果，如果得不到结果，就继续计算，直到最后一个\n    - 处理特殊值 NaN 或 null 与 undefined 或 \"\" 字符串的时候，可以把它看成是false（但本质上并不是false）   \n```js\n/* 逻辑运算符支持短路原则：\n (表达式1）&&(表达式2) 如果表达式1为假，则表达式2不会进行运算，即表达式2“被短路”\n (表达式1）||(表达式2) 如果表达式1为真，则表达式2不会进行运算，即表达式2“被短路” */\n\nvar a=true,b=false,c=null,d=undefined;\na||b||c;   // true\nfalse||b||c;  //null  因为已经计算到最后一个\nfalse||b||true||c;   //true  计算到第3步就已经结束了\n\n//---------------------------------\na&&b&&c;    //false  \na&&c&&b;    //null\nd&&c&&b;    //undefined\n\n/* 总结：\na&& b :如果执行a后返回true，则执行b并返回b的值；如果执行a后返回false，则整个表达式返回a的值，b不执行；\na || b :如果执行a后返回true，则整个表达式返回a的值，b不执行；如果执行a后返回false，则执行b并返回b的值； */\n```\n- 当运算的符号不相同的时候\n```js\n从左往右\n根据优先级来计算 !>&&>||\n\nvar a=true,b=false,c=null,d=undefined;\ntrue||b&&c;   //true\nfalse||c&&b;   //null\nfalse||d&&c;   //undefined\n!b||c||d&&!a   //true||c||d&&false    得到结果true\n```\n- 特殊情况特殊对待\n我们在计算过程当中，可以把 0当成 false，把1当成true(不是真的是true/false)\n```js\n第一种情况\n\nvar a=true,b=false,c=null,d=undefined;\n1||b&&c;     //1\n0||b&&c;     //false\n```\n```js\n第二种情况，非0或1的情况\n\nvar a=true,b=false,c=null,d=undefined;\n\"\"||b&&c;    //假设\"\"也是false    false\n\"\"&&b&&c;    //得到 \"\"\n\"\"&&b||c;    //得到null\n!\"\"||b&&c;   //不要想太复杂 !\"\"结果为true    最后结果肯定是true\n!undefined||b&&c;   //true\n!null||b&&c;  //true\n//---------------------------------------------\n\"a\"||b&&c;   //\"a\"\n123||undefined;   //123   Boolean(123)得到true\nnull||\"hello\";    //hello;\n```\n**心得：**\n> 在上面的两种情况下面，我们可以把这些值做一次Boolean转换，然后得到true或false以后再去计算（只是把这个值看成是true或false并不是真正的true或false）\n\n> 以下内容会被当成false处理：\"\" , false , 0 , null , undefined , NaN\n\n##### 条件运算符\n条件运算符是根据某一个条件来得出某一个结果，它有固定的书写格式\n```js\nvar a = 判断条件?第一个值:第二个值;\n\n/* 在上面的格式上当，如果判断条件成立，则返回第一个值，否则返回第二个值 */\n```\n示例：\n```js\nvar a=10;\nvar b=11;\nvar c=a>b?12:13;\n```\n案例1：\n```js\nvar a=10;\nvar b=11;\nvar c;\n//要求，请将a与b作对比以后然后将其中大的一个值赋值给变量C\n\n通过条件运算符，我们可以很好的去判断上面的问题\nvar c = a>b?a:b;\n/* a小于b，所以c取值b */\n```\n\n案例2：\n```js\nvar a=10,b=11,c=12;\nvar d;\n//请将a,b,c中最大的一个值赋值给d\n\n//-------------------\n思路：首先完成第一次比较，将a与b作比较，返回a与b中大的哪一个数，我们可以定义一个变量temp，然后再拿这个temp去和C做比较（第二次对比），然后再通过条件运算符去返回其中大的一个数\nvar temp = a>b?a:b;\nvar max = temp>c?temp:c;\n/* max现在就是最大的值 */\n\n//-------------------\n现在要求把上面的两行代码换成一行代码去完成\nvar d = a>b?(a>c?a:c):(b>c?b:c);\n/* a 和 b作比较，如果 a 大，取 a 和 c 作比较；如果 b 大，取 b 和 c 作比较 */\n```\n\n案例3：\n```js\nvar a = undefined?1:2;\n// Boolean(undefined) 为false 取值2\n\nvar e = \"123\"?\"hello\":\"world\";\n// Boolean(\"123\") 为true 取值\"hello\"\n```\n> undefined，NaN可以得到false，所以条件不成立，而\"123\"不可以得到false,所以条件成立\n\n> 把前面这里的值做一次Boolean()操作，得到true就代表成立，得到false就代表不成立\n\n##### 关系操作符\n在JavaScript当中，关系操作符包含大于（>）小于（<），大于等于(>=)，小于等 于（<=）\n\n在强类型的编程语言里面，关系操作符只是对数字类型（Number类型）做比较，但是在JavaScript当中，它不仅仅可以对数字做对比，也可以做其它的类型做对比\n1. 数字和数字对比\n```js\nvar result = 1>2;\n// 得到false\n```\n2. 数字和字符串对比\n```js\nvar result = \"3\">2;\n// 得到true\n/* 说明：数字型的字符串与数字作对比，那么另一个会自动转换成我么的数字 */\n```\n3. 特殊数字NaN和其他做对比\n```js\nvar result1 = NaN>3;\nvar result2 = NaN<=3;\n/* 说明：这里结果都是false， 任何数与NaN做对比得到都是false*/\n```\n4. 字符串数字和数字符数字作对比\n```js\nvar result=\"78\">\"9\";  \n//false 字符串9的ASCII值是57 值越小越大\n/* 注意：如果对比的两边都是字符串，则需要去判断它们的字符串编码 */\n```\n> 字符串编码指是在计算当中，所有的数字，特殊符号，英文字母都有一个特殊的数字编码，这个编码我们叫Acsll编码\n\nASCII对照表：https://tool.oschina.net/commons?type=4\n\n5. 对象与对象比较\n如果这个对象有valueOf()的方法，则用valueOf()的值作对比，如果没有，则用toString()的方法做对比\n\n**思考**：如果null，undefined,\"\"与其它的数做对比的时候，结果如何？\n\n```js\n1>null;     //true;\n1>undefined;   //false;\n1>\"\";       //true;\nnull>undefined;  //false\n\"A\"<\"b\";     //65<98   true\n//最复杂的是中文\n\"我\">\"你\";    //中文字符串对比的是unicode码\n//25105 对比 20320  \n```\n**注意事项：**\n> null==undefined，同时1>null成立，所以很多人理所当然就认为1>undefined，但结果不是\n\n> 中文当中var a=\"我\" a.chatCodeAt(0)得到unicode码，然后再去对比\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js-base","published":1,"date":"2022-06-29T08:20:23.165Z","updated":"2022-06-29T08:57:34.394Z","_id":"cl4zbylde0000d3x6fdxqe2zo","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><ol>\n<li>JavaScript是区分大小写的（HTML和CSS不区分大小写）</li>\n<li>JavaScript必须写在&lt;==script==&gt;标签里面，并且制定正确的类型（type）<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<span id=\"more\"></span></li>\n<li>JavaScript如果语法出现了错误，那么会在页面上的控制台（console）报错</li>\n<li>JavaScript里面，一句代码写完了以后，请加上分号结束 “ ; ” ，不加理论上市可以的，但是不推荐</li>\n</ol>\n<hr>\n<h4 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h4><p>用来标明某一些对象或事物的特征，主要应用于<strong>关键字</strong>与<strong>变量名</strong></p>\n<blockquote>\n<p>标识符一般是指变量名，方法名，关键字或保留字</p>\n</blockquote>\n<blockquote>\n<p>变量名相当于人的姓名，它可以变，关键字则是系统自己使用的</p>\n</blockquote>\n<blockquote>\n<p>if,else,for,while等这些都是系统关键字，而我们用户在写代码的过程当中，自己取得名字我们叫变量名</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<ol>\n<li>标识符的开头必须是字母、_下划线、$开头，不能以数字开头，后面的则没有要求，可以使用任何字符<ul>\n<li>一般我们建议把 - 换成 _ 下划线</li>\n<li>不要使用中文做变量名，如：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">性别 <span class=\"token operator\">=</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">;</span>\n年龄 <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>标识符应该遵循<strong>见名知意</strong>的原则，JavaScript默认以<strong>驼峰命名</strong>为原则：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">userName <span class=\"token operator\">=</span> <span class=\"token string\">'tiantian'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 账号</span>\nuserNickName <span class=\"token operator\">=</span> <span class=\"token string\">'天天'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 昵称</span>\npassWord <span class=\"token operator\">=</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 密码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>说明</strong>：上面的代码就很好的说明了驼峰命名的原则 ，首字母小写，后面的每个英文单词字母大写<br>以下情况请注意：</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 如果在定义的时候，我们的标识符是一个单词，那么首字母大写</span>\n<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">addUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getUserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> liuserAge <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// l: local 局部的</span>\n<span class=\"token comment\">// i: int 整数</span>\n<span class=\"token comment\">// userAge: 变量名</span>\n\n<span class=\"token keyword\">var</span> _gstrPwd <span class=\"token operator\">=</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// _代表临时变量</span>\n<span class=\"token comment\">// g: global 全局的</span>\n<span class=\"token comment\">// str: 字符串string</span>\n<span class=\"token comment\">// pwd：密码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>不能以<strong>关键字</strong>或<strong>保留字</strong>为标识符<br>最常见的关键字，我们现在只学到了 <strong>==var==</strong> 定义变量</li>\n</ol>\n<p>我们不能以关键字做变量名，如 var，do，while等，也不能以保留字作标识符，如 const，’import’等(参考ECMA-262)</p>\n<hr>\n<h4 id=\"变量标识符\"><a href=\"#变量标识符\" class=\"headerlink\" title=\"变量标识符\"></a>变量标识符</h4><p>什么是变量：变量就是在描述事情特征（属性）当中，可以变化的数据，我们叫做变量</p>\n<blockquote>\n<p>使用关键字 var 来定义的标识符，我们叫变量标识符，变量标识符用于存放一定的数据在代码当中</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userName <span class=\"token operator\">=</span> <span class=\"token string\">'天天'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>语法格式如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> 变量名<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 变量值<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> 变量名<span class=\"token number\">2</span> <span class=\"token operator\">=</span> 变量值<span class=\"token number\">2</span>；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>说明：</strong> 在上面的代码中，var 是定义变量的<strong>关键字</strong>，userName 是变量标识符（变量名），“天天”则是这个变量标识符的值（变量值）；<br>所有的变量都是像上面定义的，但是，有一种情况是像下面这种方式（多个变量一起定义的时候）</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userName<span class=\"token operator\">=</span><span class=\"token string\">\"天天\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> userAge<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> userSex<span class=\"token operator\">=</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 上面的代码当中，我们定义了三个变量，这是可以的 */</span>\n\n<span class=\"token operator\">></span> 注意：在JavaScript当中，所有的语句如果写完以后要使用分号 <span class=\"token punctuation\">;</span> 结束\n\n还可以使用如下的语法格式：\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token keyword\">var</span> 变量名<span class=\"token operator\">=</span>变量<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>变量名<span class=\"token operator\">=</span>变量<span class=\"token number\">2.</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>，变量名n<span class=\"token operator\">=</span>变量值n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 上面这种方式就把之前的var进行了省略，然后中间使用了逗号进行隔开 */</span>\n<span class=\"token comment\">/* 当我们定义多个变量的时候，我们就会使用这一种方式 */</span>\n\n<span class=\"token keyword\">var</span> userName<span class=\"token operator\">=</span><span class=\"token string\">\"天天\"</span><span class=\"token punctuation\">,</span>userSex<span class=\"token operator\">=</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span>userAge<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//这个比较特殊，a,c都没有赋值，b直接赋值了</span>\n<span class=\"token keyword\">var</span> nickName<span class=\"token operator\">=</span><span class=\"token string\">\"Lucy\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> isTeacher<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> money<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//赋空值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>说明</strong>：上面的代码当中，我们在定义多个变量的时候，我们使用逗号隔开，每个变量在定义的时候可以赋值，也可以不赋值，如果赋值则使用=进行赋值</p>\n</blockquote>\n<blockquote>\n<p>=是赋值的意思，把=等号右边的东西赋值给左边</p>\n</blockquote>\n<blockquote>\n<p>目前阶段，所有变量的定义，我们都通过 var 来进行</p>\n</blockquote>\n<hr>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>当我们定义变量以后，再向变量赋值的过程当中，会存以几种情况的值，例如姓名是汉字，年龄又是数字等</p>\n<p>汉字：一二三四五六七八九</p>\n<p>数字：123456789</p>\n<p>变量后面接的值的数据类型主要有以下几种</p>\n<ol>\n<li>字符串（String）<br>指的是汉字，英文等其他的字符<br>当定义变量赋值字符串值的时候，我们一定要加上引号 （单引号与双引号都是用来形容字符串）<br>加了引号了数字不是数字类型，是字符串类型<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userName <span class=\"token operator\">=</span> <span class=\"token string\">'天天'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>数字（Number）<br>指的是0~9之间的数组成的数字（可以是整数，也可以是小数，还有负数）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userAge <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>布尔类型（Boolean）<br>它只有两个值true/false;<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>空值（Null）<br>当我们在定义一个变量的时候，我们如果不想给它赋值可以直接给一个null的空值<br>注意它通过typeof检测出来的结果是object<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>未定义（Undefined）<br>当一个变量在定义的时候，没有赋值，那么，它就是会出现undefined<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>上面的五个数据类型是JavaScript当中的<strong>基本数据类型</strong></p>\n</blockquote>\n</li>\n</ol>\n<p><strong>总结：</strong></p>\n<p>变量有5种基本的数据类型，1种复杂的数据类型</p>\n<hr>\n<h4 id=\"JavaScript数据类型检测\"><a href=\"#JavaScript数据类型检测\" class=\"headerlink\" title=\"JavaScript数据类型检测\"></a>JavaScript数据类型检测</h4><p>在JS当中，我们有五种基本数据类型 ，后期我们还会根据这五种基本数据类型去完成<strong>复杂的数据类型</strong>（对象，数组【它是属于对象的一种】，方法）</p>\n<p>在JS里在，当我们定义了一个变量标识符以后，我们这个变量就存在了，但是有时候，如果我们需要去检测一下这个变量的类型就需要使用我们的typeof去检测</p>\n<hr>\n<h5 id=\"typeof-关键字\"><a href=\"#typeof-关键字\" class=\"headerlink\" title=\"typeof 关键字\"></a>typeof 关键字</h5><p>这个关键字是用于检测JS当中的变量数据类型，它的语法格式如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> 变量名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>上面的代码运行以后就会得出我们的数据类型</p>\n</blockquote>\n<p>通过typeof我们可以检测出如下的几种数据类型</p>\n<ol>\n<li>number 数字类型</li>\n<li>string 字符串类型</li>\n<li>boolean 布尔类型</li>\n<li>undefined 未定义类型</li>\n<li>object 对象类型（null，数组，对象，正则表达式）</li>\n<li>function 方法类型</li>\n</ol>\n<blockquote>\n<p><strong>说明</strong>：typeof可以检测出任何数据类型，不管是基本的数据类型，还是复杂的数据类型</p>\n</blockquote>\n<blockquote>\n<p><strong>注意</strong>：关于对象的数据类型检测，我们后面有其它的方法进一步检测(instanceof,isArray等）</p>\n</blockquote>\n<hr>\n<h5 id=\"JavaScript数据类型的可变性\"><a href=\"#JavaScript数据类型的可变性\" class=\"headerlink\" title=\"JavaScript数据类型的可变性\"></a>JavaScript数据类型的可变性</h5><p>JS的数据类型并不是一定不变的，它的数据类型是由后面的值来决定的，你进行什么类型的赋值，这个变量就是一个什么数据类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span><span class=\"token comment\">//得到的是number数据类型</span>\na<span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//得到的是string数据类型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意</strong>：在其它的C/Java/C++/C#等编程语言里面，数据类型是不可变的，定义变量标识符必须在变量的前面先指定变量的数型如（int,string,boolean等）,可是在JS里面，所以的变量定义都是使用var来进行的，这个时候，变量的数据类型就不由前面的关键var决定了，而是由后面的值来决定的，后面接什么值就指定了它是什么类型。</p>\n<p>通过这一种区别，我们可以把JS语言和其它的语言做一个区分</p>\n<p>如果在定义变量的时候，变量的类型由前面的关键字决定的，我们把这种编程语言叫<strong>强类型编程语言</strong></p>\n<p>如果变量的数据类型是由后面的值来决定的，这种编程语言我们叫<strong>弱类型编程语言</strong></p>\n<hr>\n<h4 id=\"JavaScript-数据类型转换\"><a href=\"#JavaScript-数据类型转换\" class=\"headerlink\" title=\"JavaScript 数据类型转换\"></a>JavaScript 数据类型转换</h4><h5 id=\"字符串string转数字number\"><a href=\"#字符串string转数字number\" class=\"headerlink\" title=\"字符串string转数字number\"></a>字符串string转数字number</h5><ol>\n<li>使用Number这个方法来进行<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'123.45'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123.45</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token string\">'123.45.67'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">'项目1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token string\">'1号教室'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>NaN：全称 Not a Number(不是一个数字)，当一个运算经过计算本来应该得到一个Number数的时候结果报错了，就会出现NaN, typeof NaN得到的结果是”number”</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>Number在进行转换的时候，必须是一个合法的数字字符串，不然就会报NaN</strong></p>\n<ol start=\"2\">\n<li>使用 parseInt() / parseFloat() 方法来进行转换<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'123.45'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _d <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_d'</span><span class=\"token punctuation\">,</span> _d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123.45</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token string\">'123.45.67'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _f <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_f'</span><span class=\"token punctuation\">,</span> _f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123.45 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">'项目1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token string\">'1号教室'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// i</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>parseInt是直接去掉小数，不做四舍五入的处理<br>parseInt或parseFloat只要前面是字符串的数字，都可以尝试去转，转换到非数字的地方就结束</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h5 id=\"其它类型转字符串（string）类型\"><a href=\"#其它类型转字符串（string）类型\" class=\"headerlink\" title=\"其它类型转字符串（string）类型\"></a>其它类型转字符串（string）类型</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>要将上面的a转换成字符串有以下几种方法</p>\n<ol>\n<li><p>将任何类型的数据转换成字符串，有一个最简便的方法就是直接加上一个空的字符串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">a<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//结果为字符串\"101\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>通过调用String方法来进行转换</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 数字转字符串</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串 101</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n\n<span class=\"token comment\">// null类型转字符串</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\n\n<span class=\"token comment\">// 布尔值转字符串</span>\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串 true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n\n<span class=\"token comment\">// undefined类型转字符串</span>\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这一种方式与第一种方式计算结果一样，只是方法不一样而已</p>\n</li>\n<li><p>调用toString()方法来进行转换</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//结果为\"10\"</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>    \nb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//结果为字符串的“true”</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>    \n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>注意</strong>：null与undefined 没有 toString()的方法</p>\n<hr>\n<h5 id=\"数字与布尔Boolean类型的转换\"><a href=\"#数字与布尔Boolean类型的转换\" class=\"headerlink\" title=\"数字与布尔Boolean类型的转换\"></a>数字与布尔Boolean类型的转换</h5><ol>\n<li><p>数字的0与1转换成boolean类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到布尔类型false</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到布尔类型true</span>\n<span class=\"token keyword\">var</span> e<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到布尔类型true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>数字转Boolean的时候，如果这个数是明确的0，那么就是false,否则一律是true</p>\n</blockquote>\n</li>\n<li><p>字符串数字的”0”与”1”转boolean类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到布尔true</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\t\t\t\n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到布尔类型true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>针对上面的情况，我们需要将字符串的”0”与’1’先转换成数字的0和1，再进行操作</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _a<span class=\"token operator\">=</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//先转换成数字0</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//得到结果false</span>\n\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _c<span class=\"token operator\">=</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//先转在数字1</span>\n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>_c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//再转换成布尔true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>布尔类型转成数字 0 或 1</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到数字1</span>\n\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到数字0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>字符串的”true” 与 “false”能否转换成 true/false 或 0/1</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"变量的区域性（作用域）\"><a href=\"#变量的区域性（作用域）\" class=\"headerlink\" title=\"变量的区域性（作用域）\"></a>变量的区域性（作用域）</h4><ol>\n<li><p>使用 var 定义的变量<strong>没有块级作用域</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 没有块级作用域指的是如果用花括号&#123;&#125;包裹起来，形成不了作用域（function里面的花括号除外） */</span>\n\n<span class=\"token comment\">/* JS里面的花括号形成不了变量的封闭环境 */</span>\n\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//var定义的变量没有块级作用域</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//这是不会报错的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>花括号形成不了封闭环境，所以你在前面无论加上什么如我们后期的if/else/for/while等都不会形成封闭环境<br>但是加上function以后就会有封闭环境</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//当var定义在function的花括号里面，就会有作用域了</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//报错 a is not defined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>script标签形成不了作用域</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 在一个页面里面，可以有多个script标签，但是它们仍然不具备封闭环境 */</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>变量区域性<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n        <span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">101</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>    \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>这个时候的代码不会报错，因为script形成不了封闭的环境，页面最终还是会将之个 script的代码合并在一起执行</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h4 id=\"JavaScript-中的操作符\"><a href=\"#JavaScript-中的操作符\" class=\"headerlink\" title=\"JavaScript 中的操作符\"></a>JavaScript 中的操作符</h4><h5 id=\"加法操作符\"><a href=\"#加法操作符\" class=\"headerlink\" title=\"加法操作符 +\"></a>加法操作符 +</h5><ol>\n<li><p>数字与数字相加</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// c = 25</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在数值与数值相加的情况下，以下特殊情况需要单独处理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token operator\">+</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//结果还是NaN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>NaN在五种基本数据类里面，除了String字符串以外，其它的都是NaN<br>在JS里面，Infinity代表了无穷大正数，-Infinity代表了无穷大的负数，当它们进行运算的时候，要特别注意</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token operator\">+</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到的结果仍然是无穷大</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">6</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到也是 Infinity</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>字符串与数字相加</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 字符串与数字相加，结果是字符串，它会把数字先转成字符串，然后连接在一起</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">+</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//结果\"hello123\"</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"456\"</span><span class=\"token operator\">+</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//结果\"456123\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>字符串与字符串相加</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//指的就是字符串的拼接</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//结果\"hello world\"</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"你好\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"520\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//结果 \"你好520\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>其他类型数据相加</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//得到结果1</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//结果为1</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//结果为2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>可以把false与null看成是0,undefined会报NaN,true可以看成是1<br>五种基本数据类型里面，只有string字符串与undefined相加不为NaN</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"减法操作符\"><a href=\"#减法操作符\" class=\"headerlink\" title=\"减法操作符 -\"></a>减法操作符 -</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//9</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token operator\">-</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//20</span>\n<span class=\"token keyword\">var</span> _b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token operator\">-</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//19</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token operator\">-</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//15</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token operator\">-</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//NaN</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">-</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//NaN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"乘法操作符\"><a href=\"#乘法操作符\" class=\"headerlink\" title=\"乘法操作符 *\"></a>乘法操作符 *</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//10</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//   0</span>\n<span class=\"token keyword\">var</span> _b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  20</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token operator\">*</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//  0</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token operator\">*</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token operator\">*</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//NaN</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//NaN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"除法操作符\"><a href=\"#除法操作符\" class=\"headerlink\" title=\"除法操作符 /\"></a>除法操作符 /</h5><p>除法与乘法保持一致，唯独多了一个0的处理问题</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//结果NaN</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">0</span>   <span class=\"token comment\">//Infinity</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"取余操作符\"><a href=\"#取余操作符\" class=\"headerlink\" title=\"取余操作符 %\"></a>取余操作符 %</h5><p>一个整数操作另外一个整数的时候，取它的余数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//结果1</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//结果为0</span>\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//NaN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"相等操作符\"><a href=\"#相等操作符\" class=\"headerlink\" title=\"相等操作符 ==\"></a>相等操作符 ==</h5><p>在JavaScript当中，我们的相等是使用等号==来进行的，如果要判断两个变量（对象）是否相等，这个时候，我们就要使用相等操作符<br>相等操作符与赋值操作符非常相像，都是使用等号，但是赋值操作符使用一个等号=，而相等操作符使用两个等号==</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">==</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这句话是成立的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意以下代码</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">==</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\nb<span class=\"token operator\">==</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\na<span class=\"token operator\">==</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>重点说明</strong>：使用相等操作符去判断两个变量（对象）是否相等的时候，我们如果只有两个等号 == 去操作，这个时候，它会把两个等号 == 左右两边的值做类型转换（这个过程系统自动转换）以后再去执行判断操作</p>\n</blockquote>\n<h5 id=\"严格相等操作符\"><a href=\"#严格相等操作符\" class=\"headerlink\" title=\"严格相等操作符 ===\"></a>严格相等操作符 ===</h5><p>在JavaScript当中，当我们使用相等操作符==去操作的时候，这会自动的进行数据类型的转换，但是有时候，我们又不希望它进行数据类型转换 ，这个时候，我们就需要使用严格相等操作符 ===</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">===</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//false;</span>\nb<span class=\"token operator\">===</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>普通相等 == 与严格相等 === 对比，普通相等 == 只判断变量的值是否相等，而不判断变量的类型是否相等，而 ===，即要判断值相等，也要判断类型相等</p>\n</blockquote>\n<p><strong>注意：</strong>NaN不与任何东西作比较，只要一比较就是false</p>\n<blockquote>\n<p>上面的东西如果有严格相等，全都不成立 ，都是false</p>\n</blockquote>\n<p>== 与 === 都是判断相等操作，还有一个不等的操作符 != , !== ,它跟等号反着判断就行了</p>\n<h5 id=\"一元操作符\"><a href=\"#一元操作符\" class=\"headerlink\" title=\"一元操作符\"></a>一元操作符</h5><p>只能操作一个值的操作符，我们叫一元操 作符</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//控制台会输出11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码如果转换成自加或自减的一元操作符以后，会变成如下代码</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这个时候控制台会输出11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意事项</strong>：当我们在进行自加运算或自减运算的时候，我们可以把这个符号放在前面，也可以放在后面</p>\n<ul>\n<li>如果自加运算符在后面，则代表先使用自己，使用完以后再+1</li>\n<li>如果自加运算符在前面，则代表前把自己+1，然后再使用自己<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\n\n说明：上面的代码执行完毕以后，控制台打印出来的结果是<span class=\"token number\">10</span>，但是最终a的值为<span class=\"token number\">11</span>\na先使用自己（这个时候的a还是<span class=\"token number\">10</span>），使用完成以后（控制台打印完毕以后）自已再<span class=\"token operator\">+</span><span class=\"token number\">1</span>，这个时候最终的值为<span class=\"token number\">11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\n\n说明：上面的代码执行完毕以后，控制台打印出来的结果为<span class=\"token number\">11</span>，a的最终值也为<span class=\"token number\">11</span>\na在使用之前就要把自己<span class=\"token operator\">+</span><span class=\"token number\">1</span>（<span class=\"token number\">10</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">11</span>），然后再去使用自己（控制台去打印），这个时候控制台的值为<span class=\"token number\">11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n根据一元操作符的特点，我们可以演变成如下的操作<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//a+=2;</span>\na<span class=\"token operator\">=</span>a<span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//a-=5;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">+=</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//a=a+b;</span>\na<span class=\"token operator\">-=</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//a=a-b;</span>\na<span class=\"token operator\">*=</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//a=a*b;</span>\na<span class=\"token operator\">/=</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//a=a/b;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h5 id=\"逻辑操作符\"><a href=\"#逻辑操作符\" class=\"headerlink\" title=\"逻辑操作符\"></a>逻辑操作符</h5><p>在JavaScript当中，常用的逻辑操作符有三种，“与”，“或”，“非”</p>\n<ol>\n<li>与的操作符是&amp;&amp;</li>\n<li>或的操作符是||</li>\n<li>非的操作符!</li>\n</ol>\n<h6 id=\"计算过程\"><a href=\"#计算过程\" class=\"headerlink\" title=\"计算过程\"></a>计算过程</h6><ul>\n<li>当运算的符号相同的时候<ul>\n<li>与的操作，一假一假</li>\n<li>或的操作，一真即真</li>\n<li>非的操作，非真即假，非假即真</li>\n<li>必须遵守<strong>短路原则</strong>，当一个表达式的前面部分已经能够得到结果，就停止计算，返回结果，如果得不到结果，就继续计算，直到最后一个</li>\n<li>处理特殊值 NaN 或 null 与 undefined 或 “” 字符串的时候，可以把它看成是false（但本质上并不是false）   <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 逻辑运算符支持短路原则：\n (表达式1）&amp;&amp;(表达式2) 如果表达式1为假，则表达式2不会进行运算，即表达式2“被短路”\n (表达式1）||(表达式2) 如果表达式1为真，则表达式2不会进行运算，即表达式2“被短路” */</span>\n\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">||</span>b<span class=\"token operator\">||</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n<span class=\"token boolean\">false</span><span class=\"token operator\">||</span>b<span class=\"token operator\">||</span>c<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//null  因为已经计算到最后一个</span>\n<span class=\"token boolean\">false</span><span class=\"token operator\">||</span>b<span class=\"token operator\">||</span><span class=\"token boolean\">true</span><span class=\"token operator\">||</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//true  计算到第3步就已经结束了</span>\n\n<span class=\"token comment\">//---------------------------------</span>\na<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//false  </span>\na<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//null</span>\nd<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//undefined</span>\n\n<span class=\"token comment\">/* 总结：\na&amp;&amp; b :如果执行a后返回true，则执行b并返回b的值；如果执行a后返回false，则整个表达式返回a的值，b不执行；\na || b :如果执行a后返回true，则整个表达式返回a的值，b不执行；如果执行a后返回false，则执行b并返回b的值； */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>当运算的符号不相同的时候<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">从左往右\n根据优先级来计算 <span class=\"token operator\">!</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">></span><span class=\"token operator\">||</span>\n\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token boolean\">true</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//true</span>\n<span class=\"token boolean\">false</span><span class=\"token operator\">||</span>c<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//null</span>\n<span class=\"token boolean\">false</span><span class=\"token operator\">||</span>d<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//undefined</span>\n<span class=\"token operator\">!</span>b<span class=\"token operator\">||</span>c<span class=\"token operator\">||</span>d<span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>a   <span class=\"token comment\">//true||c||d&amp;&amp;false    得到结果true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>特殊情况特殊对待<br>我们在计算过程当中，可以把 0当成 false，把1当成true(不是真的是true/false)<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">第一种情况\n\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//1</span>\n<span class=\"token number\">0</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">第二种情况，非<span class=\"token number\">0</span>或<span class=\"token number\">1</span>的情况\n\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"\"</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//假设\"\"也是false    false</span>\n<span class=\"token string\">\"\"</span><span class=\"token operator\">&amp;&amp;</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//得到 \"\"</span>\n<span class=\"token string\">\"\"</span><span class=\"token operator\">&amp;&amp;</span>b<span class=\"token operator\">||</span>c<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//得到null</span>\n<span class=\"token operator\">!</span><span class=\"token string\">\"\"</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//不要想太复杂 !\"\"结果为true    最后结果肯定是true</span>\n<span class=\"token operator\">!</span><span class=\"token keyword\">undefined</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//true</span>\n<span class=\"token operator\">!</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//true</span>\n<span class=\"token comment\">//---------------------------------------------</span>\n<span class=\"token string\">\"a\"</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"a\"</span>\n<span class=\"token number\">123</span><span class=\"token operator\">||</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//123   Boolean(123)得到true</span>\n<span class=\"token keyword\">null</span><span class=\"token operator\">||</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//hello;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><strong>心得：</strong></p>\n<blockquote>\n<p>在上面的两种情况下面，我们可以把这些值做一次Boolean转换，然后得到true或false以后再去计算（只是把这个值看成是true或false并不是真正的true或false）</p>\n</blockquote>\n<blockquote>\n<p>以下内容会被当成false处理：”” , false , 0 , null , undefined , NaN</p>\n</blockquote>\n<h5 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h5><p>条件运算符是根据某一个条件来得出某一个结果，它有固定的书写格式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> 判断条件<span class=\"token operator\">?</span>第一个值<span class=\"token operator\">:</span>第二个值<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 在上面的格式上当，如果判断条件成立，则返回第一个值，否则返回第二个值 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span>a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span><span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>案例1：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//要求，请将a与b作对比以后然后将其中大的一个值赋值给变量C</span>\n\n通过条件运算符，我们可以很好的去判断上面的问题\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* a小于b，所以c取值b */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>案例2：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//请将a,b,c中最大的一个值赋值给d</span>\n\n<span class=\"token comment\">//-------------------</span>\n思路：首先完成第一次比较，将a与b作比较，返回a与b中大的哪一个数，我们可以定义一个变量temp，然后再拿这个temp去和<span class=\"token constant\">C</span>做比较（第二次对比），然后再通过条件运算符去返回其中大的一个数\n<span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> temp<span class=\"token operator\">></span>c<span class=\"token operator\">?</span>temp<span class=\"token operator\">:</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* max现在就是最大的值 */</span>\n\n<span class=\"token comment\">//-------------------</span>\n现在要求把上面的两行代码换成一行代码去完成\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>c<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">></span>c<span class=\"token operator\">?</span>b<span class=\"token operator\">:</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* a 和 b作比较，如果 a 大，取 a 和 c 作比较；如果 b 大，取 b 和 c 作比较 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>案例3：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">?</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Boolean(undefined) 为false 取值2</span>\n\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token operator\">?</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Boolean(\"123\") 为true 取值\"hello\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>undefined，NaN可以得到false，所以条件不成立，而”123”不可以得到false,所以条件成立</p>\n</blockquote>\n<blockquote>\n<p>把前面这里的值做一次Boolean()操作，得到true就代表成立，得到false就代表不成立</p>\n</blockquote>\n<h5 id=\"关系操作符\"><a href=\"#关系操作符\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h5><p>在JavaScript当中，关系操作符包含大于（&gt;）小于（&lt;），大于等于(&gt;=)，小于等 于（&lt;=）</p>\n<p>在强类型的编程语言里面，关系操作符只是对数字类型（Number类型）做比较，但是在JavaScript当中，它不仅仅可以对数字做对比，也可以做其它的类型做对比</p>\n<ol>\n<li>数字和数字对比<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 得到false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>数字和字符串对比<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 得到true</span>\n<span class=\"token comment\">/* 说明：数字型的字符串与数字作对比，那么另一个会自动转换成我么的数字 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>特殊数字NaN和其他做对比<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 说明：这里结果都是false， 任何数与NaN做对比得到都是false*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>字符串数字和数字符数字作对比<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result<span class=\"token operator\">=</span><span class=\"token string\">\"78\"</span><span class=\"token operator\">></span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">//false 字符串9的ASCII值是57 值越小越大</span>\n<span class=\"token comment\">/* 注意：如果对比的两边都是字符串，则需要去判断它们的字符串编码 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>字符串编码指是在计算当中，所有的数字，特殊符号，英文字母都有一个特殊的数字编码，这个编码我们叫Acsll编码</p>\n</blockquote>\n</li>\n</ol>\n<p>ASCII对照表：<a href=\"https://tool.oschina.net/commons?type=4\">https://tool.oschina.net/commons?type=4</a></p>\n<ol start=\"5\">\n<li>对象与对象比较<br>如果这个对象有valueOf()的方法，则用valueOf()的值作对比，如果没有，则用toString()的方法做对比</li>\n</ol>\n<p><strong>思考</strong>：如果null，undefined,””与其它的数做对比的时候，结果如何？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//true;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//false;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//true;</span>\n<span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//false</span>\n<span class=\"token string\">\"A\"</span><span class=\"token operator\">&lt;</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//65&lt;98   true</span>\n<span class=\"token comment\">//最复杂的是中文</span>\n<span class=\"token string\">\"我\"</span><span class=\"token operator\">></span><span class=\"token string\">\"你\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//中文字符串对比的是unicode码</span>\n<span class=\"token comment\">//25105 对比 20320  </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意事项：</strong></p>\n<blockquote>\n<p>null==undefined，同时1&gt;null成立，所以很多人理所当然就认为1&gt;undefined，但结果不是</p>\n</blockquote>\n<blockquote>\n<p>中文当中var a=”我” a.chatCodeAt(0)得到unicode码，然后再去对比</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><ol>\n<li>JavaScript是区分大小写的（HTML和CSS不区分大小写）</li>\n<li>JavaScript必须写在&lt;==script==&gt;标签里面，并且制定正确的类型（type）<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","more":"</li>\n<li>JavaScript如果语法出现了错误，那么会在页面上的控制台（console）报错</li>\n<li>JavaScript里面，一句代码写完了以后，请加上分号结束 “ ; ” ，不加理论上市可以的，但是不推荐</li>\n</ol>\n<hr>\n<h4 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h4><p>用来标明某一些对象或事物的特征，主要应用于<strong>关键字</strong>与<strong>变量名</strong></p>\n<blockquote>\n<p>标识符一般是指变量名，方法名，关键字或保留字</p>\n</blockquote>\n<blockquote>\n<p>变量名相当于人的姓名，它可以变，关键字则是系统自己使用的</p>\n</blockquote>\n<blockquote>\n<p>if,else,for,while等这些都是系统关键字，而我们用户在写代码的过程当中，自己取得名字我们叫变量名</p>\n</blockquote>\n<p><strong>注意：</strong></p>\n<ol>\n<li>标识符的开头必须是字母、_下划线、$开头，不能以数字开头，后面的则没有要求，可以使用任何字符<ul>\n<li>一般我们建议把 - 换成 _ 下划线</li>\n<li>不要使用中文做变量名，如：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">性别 <span class=\"token operator\">=</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">;</span>\n年龄 <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>标识符应该遵循<strong>见名知意</strong>的原则，JavaScript默认以<strong>驼峰命名</strong>为原则：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">userName <span class=\"token operator\">=</span> <span class=\"token string\">'tiantian'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 账号</span>\nuserNickName <span class=\"token operator\">=</span> <span class=\"token string\">'天天'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 昵称</span>\npassWord <span class=\"token operator\">=</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 密码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>说明</strong>：上面的代码就很好的说明了驼峰命名的原则 ，首字母小写，后面的每个英文单词字母大写<br>以下情况请注意：</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 如果在定义的时候，我们的标识符是一个单词，那么首字母大写</span>\n<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">addUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getUserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> liuserAge <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// l: local 局部的</span>\n<span class=\"token comment\">// i: int 整数</span>\n<span class=\"token comment\">// userAge: 变量名</span>\n\n<span class=\"token keyword\">var</span> _gstrPwd <span class=\"token operator\">=</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// _代表临时变量</span>\n<span class=\"token comment\">// g: global 全局的</span>\n<span class=\"token comment\">// str: 字符串string</span>\n<span class=\"token comment\">// pwd：密码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>不能以<strong>关键字</strong>或<strong>保留字</strong>为标识符<br>最常见的关键字，我们现在只学到了 <strong>==var==</strong> 定义变量</li>\n</ol>\n<p>我们不能以关键字做变量名，如 var，do，while等，也不能以保留字作标识符，如 const，’import’等(参考ECMA-262)</p>\n<hr>\n<h4 id=\"变量标识符\"><a href=\"#变量标识符\" class=\"headerlink\" title=\"变量标识符\"></a>变量标识符</h4><p>什么是变量：变量就是在描述事情特征（属性）当中，可以变化的数据，我们叫做变量</p>\n<blockquote>\n<p>使用关键字 var 来定义的标识符，我们叫变量标识符，变量标识符用于存放一定的数据在代码当中</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userName <span class=\"token operator\">=</span> <span class=\"token string\">'天天'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>语法格式如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> 变量名<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 变量值<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> 变量名<span class=\"token number\">2</span> <span class=\"token operator\">=</span> 变量值<span class=\"token number\">2</span>；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>说明：</strong> 在上面的代码中，var 是定义变量的<strong>关键字</strong>，userName 是变量标识符（变量名），“天天”则是这个变量标识符的值（变量值）；<br>所有的变量都是像上面定义的，但是，有一种情况是像下面这种方式（多个变量一起定义的时候）</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userName<span class=\"token operator\">=</span><span class=\"token string\">\"天天\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> userAge<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> userSex<span class=\"token operator\">=</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 上面的代码当中，我们定义了三个变量，这是可以的 */</span>\n\n<span class=\"token operator\">></span> 注意：在JavaScript当中，所有的语句如果写完以后要使用分号 <span class=\"token punctuation\">;</span> 结束\n\n还可以使用如下的语法格式：\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token keyword\">var</span> 变量名<span class=\"token operator\">=</span>变量<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>变量名<span class=\"token operator\">=</span>变量<span class=\"token number\">2.</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>，变量名n<span class=\"token operator\">=</span>变量值n<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 上面这种方式就把之前的var进行了省略，然后中间使用了逗号进行隔开 */</span>\n<span class=\"token comment\">/* 当我们定义多个变量的时候，我们就会使用这一种方式 */</span>\n\n<span class=\"token keyword\">var</span> userName<span class=\"token operator\">=</span><span class=\"token string\">\"天天\"</span><span class=\"token punctuation\">,</span>userSex<span class=\"token operator\">=</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span>userAge<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//这个比较特殊，a,c都没有赋值，b直接赋值了</span>\n<span class=\"token keyword\">var</span> nickName<span class=\"token operator\">=</span><span class=\"token string\">\"Lucy\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> isTeacher<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> money<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//赋空值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>说明</strong>：上面的代码当中，我们在定义多个变量的时候，我们使用逗号隔开，每个变量在定义的时候可以赋值，也可以不赋值，如果赋值则使用=进行赋值</p>\n</blockquote>\n<blockquote>\n<p>=是赋值的意思，把=等号右边的东西赋值给左边</p>\n</blockquote>\n<blockquote>\n<p>目前阶段，所有变量的定义，我们都通过 var 来进行</p>\n</blockquote>\n<hr>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>当我们定义变量以后，再向变量赋值的过程当中，会存以几种情况的值，例如姓名是汉字，年龄又是数字等</p>\n<p>汉字：一二三四五六七八九</p>\n<p>数字：123456789</p>\n<p>变量后面接的值的数据类型主要有以下几种</p>\n<ol>\n<li>字符串（String）<br>指的是汉字，英文等其他的字符<br>当定义变量赋值字符串值的时候，我们一定要加上引号 （单引号与双引号都是用来形容字符串）<br>加了引号了数字不是数字类型，是字符串类型<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userName <span class=\"token operator\">=</span> <span class=\"token string\">'天天'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>数字（Number）<br>指的是0~9之间的数组成的数字（可以是整数，也可以是小数，还有负数）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> userAge <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>布尔类型（Boolean）<br>它只有两个值true/false;<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>空值（Null）<br>当我们在定义一个变量的时候，我们如果不想给它赋值可以直接给一个null的空值<br>注意它通过typeof检测出来的结果是object<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>未定义（Undefined）<br>当一个变量在定义的时候，没有赋值，那么，它就是会出现undefined<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>上面的五个数据类型是JavaScript当中的<strong>基本数据类型</strong></p>\n</blockquote>\n</li>\n</ol>\n<p><strong>总结：</strong></p>\n<p>变量有5种基本的数据类型，1种复杂的数据类型</p>\n<hr>\n<h4 id=\"JavaScript数据类型检测\"><a href=\"#JavaScript数据类型检测\" class=\"headerlink\" title=\"JavaScript数据类型检测\"></a>JavaScript数据类型检测</h4><p>在JS当中，我们有五种基本数据类型 ，后期我们还会根据这五种基本数据类型去完成<strong>复杂的数据类型</strong>（对象，数组【它是属于对象的一种】，方法）</p>\n<p>在JS里在，当我们定义了一个变量标识符以后，我们这个变量就存在了，但是有时候，如果我们需要去检测一下这个变量的类型就需要使用我们的typeof去检测</p>\n<hr>\n<h5 id=\"typeof-关键字\"><a href=\"#typeof-关键字\" class=\"headerlink\" title=\"typeof 关键字\"></a>typeof 关键字</h5><p>这个关键字是用于检测JS当中的变量数据类型，它的语法格式如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> 变量名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>上面的代码运行以后就会得出我们的数据类型</p>\n</blockquote>\n<p>通过typeof我们可以检测出如下的几种数据类型</p>\n<ol>\n<li>number 数字类型</li>\n<li>string 字符串类型</li>\n<li>boolean 布尔类型</li>\n<li>undefined 未定义类型</li>\n<li>object 对象类型（null，数组，对象，正则表达式）</li>\n<li>function 方法类型</li>\n</ol>\n<blockquote>\n<p><strong>说明</strong>：typeof可以检测出任何数据类型，不管是基本的数据类型，还是复杂的数据类型</p>\n</blockquote>\n<blockquote>\n<p><strong>注意</strong>：关于对象的数据类型检测，我们后面有其它的方法进一步检测(instanceof,isArray等）</p>\n</blockquote>\n<hr>\n<h5 id=\"JavaScript数据类型的可变性\"><a href=\"#JavaScript数据类型的可变性\" class=\"headerlink\" title=\"JavaScript数据类型的可变性\"></a>JavaScript数据类型的可变性</h5><p>JS的数据类型并不是一定不变的，它的数据类型是由后面的值来决定的，你进行什么类型的赋值，这个变量就是一个什么数据类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span><span class=\"token comment\">//得到的是number数据类型</span>\na<span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">//得到的是string数据类型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意</strong>：在其它的C/Java/C++/C#等编程语言里面，数据类型是不可变的，定义变量标识符必须在变量的前面先指定变量的数型如（int,string,boolean等）,可是在JS里面，所以的变量定义都是使用var来进行的，这个时候，变量的数据类型就不由前面的关键var决定了，而是由后面的值来决定的，后面接什么值就指定了它是什么类型。</p>\n<p>通过这一种区别，我们可以把JS语言和其它的语言做一个区分</p>\n<p>如果在定义变量的时候，变量的类型由前面的关键字决定的，我们把这种编程语言叫<strong>强类型编程语言</strong></p>\n<p>如果变量的数据类型是由后面的值来决定的，这种编程语言我们叫<strong>弱类型编程语言</strong></p>\n<hr>\n<h4 id=\"JavaScript-数据类型转换\"><a href=\"#JavaScript-数据类型转换\" class=\"headerlink\" title=\"JavaScript 数据类型转换\"></a>JavaScript 数据类型转换</h4><h5 id=\"字符串string转数字number\"><a href=\"#字符串string转数字number\" class=\"headerlink\" title=\"字符串string转数字number\"></a>字符串string转数字number</h5><ol>\n<li>使用Number这个方法来进行<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'123.45'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123.45</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token string\">'123.45.67'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">'项目1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token string\">'1号教室'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>NaN：全称 Not a Number(不是一个数字)，当一个运算经过计算本来应该得到一个Number数的时候结果报错了，就会出现NaN, typeof NaN得到的结果是”number”</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>Number在进行转换的时候，必须是一个合法的数字字符串，不然就会报NaN</strong></p>\n<ol start=\"2\">\n<li>使用 parseInt() / parseFloat() 方法来进行转换<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'123.45'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _d <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_d'</span><span class=\"token punctuation\">,</span> _d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123.45</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token string\">'123.45.67'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _f <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_f'</span><span class=\"token punctuation\">,</span> _f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123.45 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">'项目1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\n\n<span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token string\">'1号教室'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// i</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>parseInt是直接去掉小数，不做四舍五入的处理<br>parseInt或parseFloat只要前面是字符串的数字，都可以尝试去转，转换到非数字的地方就结束</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h5 id=\"其它类型转字符串（string）类型\"><a href=\"#其它类型转字符串（string）类型\" class=\"headerlink\" title=\"其它类型转字符串（string）类型\"></a>其它类型转字符串（string）类型</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>要将上面的a转换成字符串有以下几种方法</p>\n<ol>\n<li><p>将任何类型的数据转换成字符串，有一个最简便的方法就是直接加上一个空的字符串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">a<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//结果为字符串\"101\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>通过调用String方法来进行转换</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 数字转字符串</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串 101</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n\n<span class=\"token comment\">// null类型转字符串</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\n\n<span class=\"token comment\">// 布尔值转字符串</span>\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符串 true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n\n<span class=\"token comment\">// undefined类型转字符串</span>\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这一种方式与第一种方式计算结果一样，只是方法不一样而已</p>\n</li>\n<li><p>调用toString()方法来进行转换</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//结果为\"10\"</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>    \nb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//结果为字符串的“true”</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>    \n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>注意</strong>：null与undefined 没有 toString()的方法</p>\n<hr>\n<h5 id=\"数字与布尔Boolean类型的转换\"><a href=\"#数字与布尔Boolean类型的转换\" class=\"headerlink\" title=\"数字与布尔Boolean类型的转换\"></a>数字与布尔Boolean类型的转换</h5><ol>\n<li><p>数字的0与1转换成boolean类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到布尔类型false</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到布尔类型true</span>\n<span class=\"token keyword\">var</span> e<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到布尔类型true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>数字转Boolean的时候，如果这个数是明确的0，那么就是false,否则一律是true</p>\n</blockquote>\n</li>\n<li><p>字符串数字的”0”与”1”转boolean类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到布尔true</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\t\t\t\n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到布尔类型true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>针对上面的情况，我们需要将字符串的”0”与’1’先转换成数字的0和1，再进行操作</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _a<span class=\"token operator\">=</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//先转换成数字0</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//得到结果false</span>\n\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _c<span class=\"token operator\">=</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//先转在数字1</span>\n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>_c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//再转换成布尔true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>布尔类型转成数字 0 或 1</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到数字1</span>\n\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d<span class=\"token operator\">=</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到数字0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>字符串的”true” 与 “false”能否转换成 true/false 或 0/1</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"变量的区域性（作用域）\"><a href=\"#变量的区域性（作用域）\" class=\"headerlink\" title=\"变量的区域性（作用域）\"></a>变量的区域性（作用域）</h4><ol>\n<li><p>使用 var 定义的变量<strong>没有块级作用域</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 没有块级作用域指的是如果用花括号&#123;&#125;包裹起来，形成不了作用域（function里面的花括号除外） */</span>\n\n<span class=\"token comment\">/* JS里面的花括号形成不了变量的封闭环境 */</span>\n\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//var定义的变量没有块级作用域</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//这是不会报错的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>花括号形成不了封闭环境，所以你在前面无论加上什么如我们后期的if/else/for/while等都不会形成封闭环境<br>但是加上function以后就会有封闭环境</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//当var定义在function的花括号里面，就会有作用域了</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//报错 a is not defined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>script标签形成不了作用域</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 在一个页面里面，可以有多个script标签，但是它们仍然不具备封闭环境 */</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>变量区域性<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n        <span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">101</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>    \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>这个时候的代码不会报错，因为script形成不了封闭的环境，页面最终还是会将之个 script的代码合并在一起执行</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h4 id=\"JavaScript-中的操作符\"><a href=\"#JavaScript-中的操作符\" class=\"headerlink\" title=\"JavaScript 中的操作符\"></a>JavaScript 中的操作符</h4><h5 id=\"加法操作符\"><a href=\"#加法操作符\" class=\"headerlink\" title=\"加法操作符 +\"></a>加法操作符 +</h5><ol>\n<li><p>数字与数字相加</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// c = 25</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在数值与数值相加的情况下，以下特殊情况需要单独处理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token operator\">+</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//结果还是NaN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>NaN在五种基本数据类里面，除了String字符串以外，其它的都是NaN<br>在JS里面，Infinity代表了无穷大正数，-Infinity代表了无穷大的负数，当它们进行运算的时候，要特别注意</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token operator\">+</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到的结果仍然是无穷大</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">6</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到也是 Infinity</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>字符串与数字相加</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 字符串与数字相加，结果是字符串，它会把数字先转成字符串，然后连接在一起</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">+</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//结果\"hello123\"</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"456\"</span><span class=\"token operator\">+</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//结果\"456123\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>字符串与字符串相加</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//指的就是字符串的拼接</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//结果\"hello world\"</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"你好\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"520\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//结果 \"你好520\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>其他类型数据相加</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//得到结果1</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//结果为1</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//结果为2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>可以把false与null看成是0,undefined会报NaN,true可以看成是1<br>五种基本数据类型里面，只有string字符串与undefined相加不为NaN</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"减法操作符\"><a href=\"#减法操作符\" class=\"headerlink\" title=\"减法操作符 -\"></a>减法操作符 -</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//9</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token operator\">-</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//20</span>\n<span class=\"token keyword\">var</span> _b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token operator\">-</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//19</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token operator\">-</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//15</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token operator\">-</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//NaN</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">-</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//NaN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"乘法操作符\"><a href=\"#乘法操作符\" class=\"headerlink\" title=\"乘法操作符 *\"></a>乘法操作符 *</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//10</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//   0</span>\n<span class=\"token keyword\">var</span> _b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  20</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token operator\">*</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//  0</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token operator\">*</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token operator\">*</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//NaN</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//NaN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"除法操作符\"><a href=\"#除法操作符\" class=\"headerlink\" title=\"除法操作符 /\"></a>除法操作符 /</h5><p>除法与乘法保持一致，唯独多了一个0的处理问题</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//结果NaN</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">0</span>   <span class=\"token comment\">//Infinity</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"取余操作符\"><a href=\"#取余操作符\" class=\"headerlink\" title=\"取余操作符 %\"></a>取余操作符 %</h5><p>一个整数操作另外一个整数的时候，取它的余数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//结果1</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//结果为0</span>\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">%</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//NaN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"相等操作符\"><a href=\"#相等操作符\" class=\"headerlink\" title=\"相等操作符 ==\"></a>相等操作符 ==</h5><p>在JavaScript当中，我们的相等是使用等号==来进行的，如果要判断两个变量（对象）是否相等，这个时候，我们就要使用相等操作符<br>相等操作符与赋值操作符非常相像，都是使用等号，但是赋值操作符使用一个等号=，而相等操作符使用两个等号==</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">==</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这句话是成立的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意以下代码</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">==</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\nb<span class=\"token operator\">==</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\na<span class=\"token operator\">==</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>重点说明</strong>：使用相等操作符去判断两个变量（对象）是否相等的时候，我们如果只有两个等号 == 去操作，这个时候，它会把两个等号 == 左右两边的值做类型转换（这个过程系统自动转换）以后再去执行判断操作</p>\n</blockquote>\n<h5 id=\"严格相等操作符\"><a href=\"#严格相等操作符\" class=\"headerlink\" title=\"严格相等操作符 ===\"></a>严格相等操作符 ===</h5><p>在JavaScript当中，当我们使用相等操作符==去操作的时候，这会自动的进行数据类型的转换，但是有时候，我们又不希望它进行数据类型转换 ，这个时候，我们就需要使用严格相等操作符 ===</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">===</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//false;</span>\nb<span class=\"token operator\">===</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>普通相等 == 与严格相等 === 对比，普通相等 == 只判断变量的值是否相等，而不判断变量的类型是否相等，而 ===，即要判断值相等，也要判断类型相等</p>\n</blockquote>\n<p><strong>注意：</strong>NaN不与任何东西作比较，只要一比较就是false</p>\n<blockquote>\n<p>上面的东西如果有严格相等，全都不成立 ，都是false</p>\n</blockquote>\n<p>== 与 === 都是判断相等操作，还有一个不等的操作符 != , !== ,它跟等号反着判断就行了</p>\n<h5 id=\"一元操作符\"><a href=\"#一元操作符\" class=\"headerlink\" title=\"一元操作符\"></a>一元操作符</h5><p>只能操作一个值的操作符，我们叫一元操 作符</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//控制台会输出11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码如果转换成自加或自减的一元操作符以后，会变成如下代码</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这个时候控制台会输出11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意事项</strong>：当我们在进行自加运算或自减运算的时候，我们可以把这个符号放在前面，也可以放在后面</p>\n<ul>\n<li>如果自加运算符在后面，则代表先使用自己，使用完以后再+1</li>\n<li>如果自加运算符在前面，则代表前把自己+1，然后再使用自己<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\n\n说明：上面的代码执行完毕以后，控制台打印出来的结果是<span class=\"token number\">10</span>，但是最终a的值为<span class=\"token number\">11</span>\na先使用自己（这个时候的a还是<span class=\"token number\">10</span>），使用完成以后（控制台打印完毕以后）自已再<span class=\"token operator\">+</span><span class=\"token number\">1</span>，这个时候最终的值为<span class=\"token number\">11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span>\n\n说明：上面的代码执行完毕以后，控制台打印出来的结果为<span class=\"token number\">11</span>，a的最终值也为<span class=\"token number\">11</span>\na在使用之前就要把自己<span class=\"token operator\">+</span><span class=\"token number\">1</span>（<span class=\"token number\">10</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">11</span>），然后再去使用自己（控制台去打印），这个时候控制台的值为<span class=\"token number\">11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n根据一元操作符的特点，我们可以演变成如下的操作<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//a+=2;</span>\na<span class=\"token operator\">=</span>a<span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//a-=5;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">+=</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//a=a+b;</span>\na<span class=\"token operator\">-=</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//a=a-b;</span>\na<span class=\"token operator\">*=</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//a=a*b;</span>\na<span class=\"token operator\">/=</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//a=a/b;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h5 id=\"逻辑操作符\"><a href=\"#逻辑操作符\" class=\"headerlink\" title=\"逻辑操作符\"></a>逻辑操作符</h5><p>在JavaScript当中，常用的逻辑操作符有三种，“与”，“或”，“非”</p>\n<ol>\n<li>与的操作符是&amp;&amp;</li>\n<li>或的操作符是||</li>\n<li>非的操作符!</li>\n</ol>\n<h6 id=\"计算过程\"><a href=\"#计算过程\" class=\"headerlink\" title=\"计算过程\"></a>计算过程</h6><ul>\n<li>当运算的符号相同的时候<ul>\n<li>与的操作，一假一假</li>\n<li>或的操作，一真即真</li>\n<li>非的操作，非真即假，非假即真</li>\n<li>必须遵守<strong>短路原则</strong>，当一个表达式的前面部分已经能够得到结果，就停止计算，返回结果，如果得不到结果，就继续计算，直到最后一个</li>\n<li>处理特殊值 NaN 或 null 与 undefined 或 “” 字符串的时候，可以把它看成是false（但本质上并不是false）   <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 逻辑运算符支持短路原则：\n (表达式1）&amp;&amp;(表达式2) 如果表达式1为假，则表达式2不会进行运算，即表达式2“被短路”\n (表达式1）||(表达式2) 如果表达式1为真，则表达式2不会进行运算，即表达式2“被短路” */</span>\n\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">||</span>b<span class=\"token operator\">||</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n<span class=\"token boolean\">false</span><span class=\"token operator\">||</span>b<span class=\"token operator\">||</span>c<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//null  因为已经计算到最后一个</span>\n<span class=\"token boolean\">false</span><span class=\"token operator\">||</span>b<span class=\"token operator\">||</span><span class=\"token boolean\">true</span><span class=\"token operator\">||</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//true  计算到第3步就已经结束了</span>\n\n<span class=\"token comment\">//---------------------------------</span>\na<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//false  </span>\na<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//null</span>\nd<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//undefined</span>\n\n<span class=\"token comment\">/* 总结：\na&amp;&amp; b :如果执行a后返回true，则执行b并返回b的值；如果执行a后返回false，则整个表达式返回a的值，b不执行；\na || b :如果执行a后返回true，则整个表达式返回a的值，b不执行；如果执行a后返回false，则执行b并返回b的值； */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>当运算的符号不相同的时候<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">从左往右\n根据优先级来计算 <span class=\"token operator\">!</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">></span><span class=\"token operator\">||</span>\n\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token boolean\">true</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//true</span>\n<span class=\"token boolean\">false</span><span class=\"token operator\">||</span>c<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//null</span>\n<span class=\"token boolean\">false</span><span class=\"token operator\">||</span>d<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//undefined</span>\n<span class=\"token operator\">!</span>b<span class=\"token operator\">||</span>c<span class=\"token operator\">||</span>d<span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>a   <span class=\"token comment\">//true||c||d&amp;&amp;false    得到结果true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>特殊情况特殊对待<br>我们在计算过程当中，可以把 0当成 false，把1当成true(不是真的是true/false)<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">第一种情况\n\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//1</span>\n<span class=\"token number\">0</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">第二种情况，非<span class=\"token number\">0</span>或<span class=\"token number\">1</span>的情况\n\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"\"</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//假设\"\"也是false    false</span>\n<span class=\"token string\">\"\"</span><span class=\"token operator\">&amp;&amp;</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//得到 \"\"</span>\n<span class=\"token string\">\"\"</span><span class=\"token operator\">&amp;&amp;</span>b<span class=\"token operator\">||</span>c<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//得到null</span>\n<span class=\"token operator\">!</span><span class=\"token string\">\"\"</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//不要想太复杂 !\"\"结果为true    最后结果肯定是true</span>\n<span class=\"token operator\">!</span><span class=\"token keyword\">undefined</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//true</span>\n<span class=\"token operator\">!</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//true</span>\n<span class=\"token comment\">//---------------------------------------------</span>\n<span class=\"token string\">\"a\"</span><span class=\"token operator\">||</span>b<span class=\"token operator\">&amp;&amp;</span>c<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"a\"</span>\n<span class=\"token number\">123</span><span class=\"token operator\">||</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//123   Boolean(123)得到true</span>\n<span class=\"token keyword\">null</span><span class=\"token operator\">||</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//hello;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><strong>心得：</strong></p>\n<blockquote>\n<p>在上面的两种情况下面，我们可以把这些值做一次Boolean转换，然后得到true或false以后再去计算（只是把这个值看成是true或false并不是真正的true或false）</p>\n</blockquote>\n<blockquote>\n<p>以下内容会被当成false处理：”” , false , 0 , null , undefined , NaN</p>\n</blockquote>\n<h5 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h5><p>条件运算符是根据某一个条件来得出某一个结果，它有固定的书写格式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> 判断条件<span class=\"token operator\">?</span>第一个值<span class=\"token operator\">:</span>第二个值<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 在上面的格式上当，如果判断条件成立，则返回第一个值，否则返回第二个值 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span>a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span><span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>案例1：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//要求，请将a与b作对比以后然后将其中大的一个值赋值给变量C</span>\n\n通过条件运算符，我们可以很好的去判断上面的问题\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* a小于b，所以c取值b */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>案例2：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//请将a,b,c中最大的一个值赋值给d</span>\n\n<span class=\"token comment\">//-------------------</span>\n思路：首先完成第一次比较，将a与b作比较，返回a与b中大的哪一个数，我们可以定义一个变量temp，然后再拿这个temp去和<span class=\"token constant\">C</span>做比较（第二次对比），然后再通过条件运算符去返回其中大的一个数\n<span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> temp<span class=\"token operator\">></span>c<span class=\"token operator\">?</span>temp<span class=\"token operator\">:</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* max现在就是最大的值 */</span>\n\n<span class=\"token comment\">//-------------------</span>\n现在要求把上面的两行代码换成一行代码去完成\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>c<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>c<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">></span>c<span class=\"token operator\">?</span>b<span class=\"token operator\">:</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* a 和 b作比较，如果 a 大，取 a 和 c 作比较；如果 b 大，取 b 和 c 作比较 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>案例3：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">?</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Boolean(undefined) 为false 取值2</span>\n\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token operator\">?</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Boolean(\"123\") 为true 取值\"hello\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>undefined，NaN可以得到false，所以条件不成立，而”123”不可以得到false,所以条件成立</p>\n</blockquote>\n<blockquote>\n<p>把前面这里的值做一次Boolean()操作，得到true就代表成立，得到false就代表不成立</p>\n</blockquote>\n<h5 id=\"关系操作符\"><a href=\"#关系操作符\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h5><p>在JavaScript当中，关系操作符包含大于（&gt;）小于（&lt;），大于等于(&gt;=)，小于等 于（&lt;=）</p>\n<p>在强类型的编程语言里面，关系操作符只是对数字类型（Number类型）做比较，但是在JavaScript当中，它不仅仅可以对数字做对比，也可以做其它的类型做对比</p>\n<ol>\n<li>数字和数字对比<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 得到false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>数字和字符串对比<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 得到true</span>\n<span class=\"token comment\">/* 说明：数字型的字符串与数字作对比，那么另一个会自动转换成我么的数字 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>特殊数字NaN和其他做对比<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 说明：这里结果都是false， 任何数与NaN做对比得到都是false*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>字符串数字和数字符数字作对比<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result<span class=\"token operator\">=</span><span class=\"token string\">\"78\"</span><span class=\"token operator\">></span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">;</span>  \n<span class=\"token comment\">//false 字符串9的ASCII值是57 值越小越大</span>\n<span class=\"token comment\">/* 注意：如果对比的两边都是字符串，则需要去判断它们的字符串编码 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>字符串编码指是在计算当中，所有的数字，特殊符号，英文字母都有一个特殊的数字编码，这个编码我们叫Acsll编码</p>\n</blockquote>\n</li>\n</ol>\n<p>ASCII对照表：<a href=\"https://tool.oschina.net/commons?type=4\">https://tool.oschina.net/commons?type=4</a></p>\n<ol start=\"5\">\n<li>对象与对象比较<br>如果这个对象有valueOf()的方法，则用valueOf()的值作对比，如果没有，则用toString()的方法做对比</li>\n</ol>\n<p><strong>思考</strong>：如果null，undefined,””与其它的数做对比的时候，结果如何？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//true;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//false;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//true;</span>\n<span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//false</span>\n<span class=\"token string\">\"A\"</span><span class=\"token operator\">&lt;</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//65&lt;98   true</span>\n<span class=\"token comment\">//最复杂的是中文</span>\n<span class=\"token string\">\"我\"</span><span class=\"token operator\">></span><span class=\"token string\">\"你\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//中文字符串对比的是unicode码</span>\n<span class=\"token comment\">//25105 对比 20320  </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意事项：</strong></p>\n<blockquote>\n<p>null==undefined，同时1&gt;null成立，所以很多人理所当然就认为1&gt;undefined，但结果不是</p>\n</blockquote>\n<blockquote>\n<p>中文当中var a=”我” a.chatCodeAt(0)得到unicode码，然后再去对比</p>\n</blockquote>"},{"title":"JavaScript - 数组","_content":"## 数组\n> 什么是数组？通过字面的意义直面理解数组就是把数据组合在一起\n\nJavaScript里面的数定义:\n\n**数组是存放一系列数据的集合**\n<!--more-->\n---\n#### 数组的定义\n##### 第一种方式Array\n这一种方式，我们可以直接使用JS的内置对象Array来进行\n\n在使用这一种方式的时候，它非常简单，如下所示就可以了\n\n```js\nvar nums = new Array();\n// 这样我们就创建了一个数组nums\n\n在上面的代码里面，我们看到了一个关键字 new\n我们在控制台打印出nums的时候，我们会看到有一个 [] ，这是数组表示形式上的特点\n```\n通过上面的方式创建的数组，我们会发现它是一个空的数组，它是一个空的数组里面没有任何元素，所以，我们可以把这个数组的长度理解为0\n\n**小技巧：** 一个数组如果要得到它的长度，我们可以使用一个属性**数组.length**\n\n```js\nvar nums = new Array();\nnums.length; // 这个时候会得到数字0，因为数组的长度为0，而length则代表这个数组的长度\n```\n在我们定义数组的时候，我们还可以直接就定义数组的长度\n\n```js\nvar nums = new Array(5);\n// 我们会得到一个长度为5的数组\nnums.length; // 得到结果为5\n```\n**注意：**\n创建数组如果要确定长度，那么你放进去的只可能是正整数，不能是小数，也不能是负数，并且只能有一个数字\n\n```js\nvar a=new Array(3.14); // 错误的定义方式，会提示“非法的数组长度”\nvar b=new Array(-3); // 错误的定义方式，会提示“非法的数组长度”\n```\n\n当我们在定义数组的时候，如果已经确定了数组里面的内容 ，我们可以直接的把数组内容放进去\n\n```js\nvar f=new Array(\"香蕉\",\"苹果\",\"哈密瓜\",\"草莓\",\"梨\");\n// 现在我们定义数组的时候，我就直接把里面放了5个水果\n```\n当我们去通过Array定义数组的时候，最常见的三种情况就是上面的三种情况：\n1. 第一种直接定义一个空数组，这个空数组的长度为0，\n2. 第二种定义了一个有长度的数组，但这个数组里面每个值都是空的，\n3. 第三个则在定义数组的时候，就把需要放到数组里面的元素直接丢进去了\n```js\nvar a=new Array();\nvar b=new Array(5);\nvar c=new Array(\"香蕉\",\"苹果\",\"哈密瓜\",\"草莓\",\"梨\");\n```\n**细节注意：**\n我们要确定一点，new Array(\"值\")放一个值的时候，它首先会通过一次typeof 值的检测，如果这个值是number类型，再去判断这个值是否是正整数，如果是，则表示数组定义的长度，否则就是数组的值\n\n```js\nvar a=new Array(\"5\");   //代表定义数组，直接把\"5\"放进去\n/*\n\ttypeof \"5\"  得到\"string\"  不是number类型 ，所以它代表数组里面的值\n*/\nvar b=new Array(5);     //代表定义一个长度为5的数组\n/*\n\ttypeof 5 得到\"number\"类型 ，然后判断是否大于或等于0，第三步是否是整数\n*/\n```\n\n---\n\n##### 第二种方式 []\n当我们通过第一种方式定义好数组以后，我们在控制打输出这个数组，我们会发现数组使用的是中括号 [] 来表示,通过这点我们在以后定义数组的时候可以直接使用中括号来定义\n\n```js\nvar nums=new Array();\nvar nums2=[];\n\n/* 这一种方式就相当于定义了一个空的数组，上面的两行代码最终得到的结果是一样的 */\n```\n我们也可以像第一种一样，直接去定义数组里面的值\n\n```js\nvar a=new Array(\"香蕉\",\"苹果\",\"哈密瓜\",\"草莓\",\"梨\");\nvar b=[\"香蕉\",\"苹果\",\"哈密瓜\",\"草莓\",\"梨\"];\n\n可以理解为：new Array() = [];\n```\n**小细节注意：**\n\n在我们使用Array去定义数组的时候，我们可以直接定义数组的长度\n\n```js\nvar a=new Array(5);\n//这代表定义了一个数组，它的长度为5\na.length;   //得到的结果是5\n```\n但是我们在通过[]去定义数组的时候，不能够直接定义数组的长度\n\n```js\nvar b=[5];\n//这不代表数组的长度。而代表数组里面有一个值，这个值是5\nb.length;   //得到结果1  里面有个元素是5\n```\n==**解决方案：**==\n\n```js\n我们都知道数组的长度是使用length来表示的，现在我们就通过它来解决\n\n//第一种定义的情况\nvar a=new Array(5);\n\n//如果转化成第二种定义情况\nvar b=[];   //定义了一个长度为0的数组\nb.length=5;   //重新设定数组的长度为5\n```\n\n---\n#### JS数组与其他变成语言的异同\n##### 数组的取值与赋值相同\n1. JS数组的取值与赋值跟其它的编程言是一样的，它们都是通过下标取值与赋值（下标也叫索引，可以把它理解书本上面的页码，通过索引，可以快速的定位到数组里面的值）\n2. JS数组与其它编程语言数组一样，它的索引（下标）是从0开始的，它们的取值与赋值都是 **数组[索引值]**\n```js\nvar a=['苹果', '香蕉', '梨'];\na[0]; //苹果\na[1]; //香蕉\na[2]; //梨\na[2] = '哈密瓜'; //把值赋值到数组的第三个位置\nconsole.log(a); //得到['苹果', '香蕉', '哈密瓜'];\n```\n##### 数据类型的区别\n在其它的编程语言里面，数组里面的值使用的是同一个数组类型，**而在JS的数组里面，里面的值的数据类型可以不相同**\n```js\nvar arr=[\"张三\",18,true,null,undefined,\"\",NaN];\n//现在上面的数组里面，放了多个值，这些值包含了我们JS里面的5种基本数据类型\n```\n把上面的代码在控制台运行以后，没有报错，并且我们展开数组以后发现所有的值都存进去了，所以我们可以得出结论：**JS数组里面值的数据类型 ，我们可以不相同**\n\n##### 数组长度与最大索引的区别\n在其它的编程语言里面，数组的长度决定了最大索引，例如如果在C/C++/Java等编程语言（强类型语言）里面，如果数组的长度为6，那么它最大的索引应该是5（长度决定最大索引）\n\n**在JavaScript里面的数组，最大索引决定了数组当前的长度**\n\n> 通过上面的相同点与不同点的结论，我们可以得出一个，JS数组不限定长度，也不限制数据类型!(正是因为这个特点，所以JS把数组也当成了集合)\n\n---\n#### 数组类型的检测\n我们可以通过typeof关键字来检测数据类型，typeof 只能检测了基本的数据类型与对象类型 ，而不能够具体的检测出数组\n\n如果判断这个变量是否是数组，我们还需要做一次检测\n\n##### 使用 instanceof 关键字\ninstanceof 主要的作用与 typeof 相似，typeof 主要用于检测基本数据类型，而instanceof主要用于检测对象类型\n\n```js\nvar num=new Array();\nnum instanceof Array; // 判断num是否是Array new出来的\n```\n>如果， **变量 instanceof Array** 得到的值为true，则代表它是一个数组，否则就不是一个数组\n\n##### Array.isArray() 检测\n除了通过之前的instanceof关键字以外，我们还可以使用自带的方法去检测\n\n```js\nvar num=new Array();\nArray.isArray(num); // 判断num是否为数组\n```\n> 如果上面的结果为true，则说明num是数组，如果得到false，则说明num不是数组\n\n当我们检测出一个变量为数组以后，我们就可以让这个数组来解决我们工作当中遇到的问题，例如将元素添加到数组，删除数组里面的值，遍历数组等方式\n\n---\n\n#### 数组的取值与赋值\n当我们创建一个数组以后，这个数组里面可以存放任意多个值，这些数组里面的值，我们叫“元素”\n\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\n// 在上面的stu数组里面，我们可以把\"张三，李四，王五\"这三个值叫元素\n```\n当一个数组好了以后，我们可以通过下标（索引）来进行赋值与赋值\n\n```js\nstu[0];   //取出了第一个元素的值  \"张三\"\nstu[1]=\"丁六\";   //对数组的第一个元素进行赋值\n```\n\n```js\n//如果我现在想在刚刚的数组后面添加一个元素（”哈哈“）\nvar stu=[\"张三\",\"李四\",\"王五\"];\nvar length=stu.length;  //取到数组的长度 length = 3\nstu[length]=\"哈哈\"; // stu[3] 就是第四个值\n```\n++如果向前面添加元素，就会很麻烦 ，所以，我们除了使用数组的下标来取值或赋值以外，我们还需要使用一些特殊的技术来对数组的元素进行添加或删除等相关操作++\n\n> 数组提供了一系列的方法来进行操作，这些方法是提供给用户的使用的，可以提高我们操作数组的简便程度\n\n---\n\n#### 数组的常用方法与属性\n> 方法：用于使用（调用）\n\n> 属性：用于描述一些事物的特征（特性）\n\n1. length 属性：用于获取或设置数组的长度\n```js\nvar num=new Array(5);\nnum.length;\n```\n\n2. push() 方法：直接向当前的数组后面去追加新的元素\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\nstu.push('赵六'); // 把赵六添加到当前数组的最后面去\n\nstu.push('哈哈', '嘻嘻'); // 可以同时添加多个元素\n```\n\n3. pop() 方法：移除当前数组的最后一个元素，并且可以得到这个元素\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\nvar a = stu.pop();\nconsole.log(a); // 王五\n//上面的代码执行了两个过程\n//第一个过程是移除了stu数组的最后一个元素“王五”\n//第二个过程，把移出来的这个元素”李昊“赋值给了变量a\n```\n\n4. unshift() 方法：在数组的最前面去添加元素\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\nstu.unshift('老李');//在数组的最前面添加元素\"老李\"\n\n//unshift与push一样，都可以一次性添加多个元素\nstu.unshift(\"小李\",\"小王\");\n```\n\n5. shift() 方法：在数组的前面移除一个元素，并且可以得到这个元素\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\nvar a=stu.shift(); \nconsole.log(a); //张三\n//上面的代码也执行了两个过程 \n//第一个过程是把最前面的“张三”移出来\n//第二个过程则是把移出来的“张三”赋值给了变量a\n```\n\n6. reverse()方法：该方法会将当前数组里面的元素进行反转\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\nstu.reverse();\n// 这个时候，里面的数组会进行反转\n```\n\n7. concat() 方法：将多个数组里面的元素进行合并，然后得到一个心得数组\n```js\nvar arr1=[\"a\",\"b\",\"c\"];\nvar arr2=[1,2,3];\nvar arr3=[true,false,null];\nvar _a=arr1.concat(arr2);   //它将arr1与arr2进行相连，得到一个新的数组_a，不影响原来的数组\nvar _b = arr1.concat(arr2,arr3); \n//它也可以同时连接多个数组\n```\n\n8. toString() 方法：该方法讲数组转换成字符串，里面的原则用“逗号” **,** 来隔开\n```js\nvar arr=[\"a\",\"b\",\"c\"];\narr.toString();   //\"a,b,c\";   \nvar arr1=[1,2,3,4,5];\narr1.toString();  //\"1,2,3,4,5\"\n```\n\n9. join() 方法：将元素转换成字符串，然后按指定的符号隔开，如果未指定符号，则默认使用逗号 , 隔开\n```js\nvar arr=[\"a\",\"b\",\"c\"];\narr.join(\"#\");   //\"a#b#c\";\nvar arr1=[1,2,3,4,5];\narr.join();   //\"1,2,3,4,5\";  不添加符号，则默认使用逗号来进行\n```\n\n10. splice() 方法：替换数组里面的元素\n```js\nvar arr=[100,200,300,400,500];\narr.splice(1,2,'aaa','bbb');\n// [100, 'aaa', 'bbb', 400, 500]\n/*\n\t第一个1代表开始替换的索引\n\t第二个2代表替换元素的个数\n\t后面的\"aaa\",\"bbbb\"代表替换以后新的元素\n*/\narr.splice(1,3,'aaa','bbb','ccc');\n// [100, 'aaa', 'bbb', 'ccc', 500];\n```\n扩展第一种情况\n```js\nvar arr=[100,200,300,400,500];\narr.splice(1,2);\n\n/*\n    在上面的代码里面，我们可以看从，第一个参数代表开始索引，第二个参数代表要替换的元素个数\n    这个时候，如果我们只是替换元素出来而不向里面添加元素，这个时候这个过程就相当于删除过程\n*/\n```\n扩展第二种情况\n```js\nvar arr=[100,200,300,400,500];\narr.splice(2); //[100,200]\n// 从索引2开始，后面的全部删掉\n```\n扩展第三种情况\n```js\n向数组的特定位置添加元素\n\nvar arr=[\"张三\",\"李四\",\"曾七\",\"王八\"];\n//现在请将\"王五\"，\"赵六\"插入到”李四“与”曾七“的中间\narr.splice(2,0,\"王五\",\"赵六\");\n/*\n    索引2的位置，没有替换元素，而是添加了两个元素\n    原来索引2的“曾七”变成了添加的“王五”\n*/\n```\n\n11. indexOf() 方法：查询数组当中某个元素的索引的位置，默认从0的索引开始查询，一直查询到最后一个，如果找到多个，则返回第一个的位置\n```js\nvar arr=[\"张三\",\"李四\",\"李四\",\"曾七\"];\narr.indexOf('张三'); // 0\n\n如果找到这个元素就得到这个元素所在的索引值，如果没有找到则得到一个“-1”\n```\n\n12. slice() 方法：提取现有数组里面的元素，得到一个新的数组，它不会影响到原来的数组\n```js\narr.slice(start,end)\n第一个参数代表起始索引\n第二个参数代表结束索引的前一个\n\nvar arr=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];\nvar arr2 = arr.slice(1,4);\n// 起始索引1 元素为\"b\"，结束索引4 元素为\"e\"，\"e\"的前一个为\"d\"\n// arr2的结束就是 [\"b\",\"c\",\"d\"]  \n```\n```js\n如果start是负数，那么规定从数组尾部开始算起。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。\n如果end是负数，那么规定的是从数组尾部开始算起的参数。\n\nvar arr=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];\narr.slice(-1); // f\narr.slice(-4); // c d e f\narr.slice(-4,1); // [] 得不到结果，在我开始之前了\narr.slice(-4,3); // ['c']\narr.slice(-4,-2); // ?\n```\n\n##### 数组练习\n\n```js\n给你一个数组[1,8,6,2,7,9,9,4,8,2,6]，请把这个数组变成手机号：18627994826\n\nvar telArr = ['1','8','6','2','7','9','9','4','8','2','6'];\nvar tel = Number(telArr.join(''));\nconsole.log('我的手机号', tel);\n```\n\n---\n#### 循环得到数组里面的每一个元素\n\n```js\nvar arr=[1,4,7,9,2,8,3,6,11,54,23];\n```\n> 首先经过学习我们已经知道数组元素的取值与赋值都是通过索引来进行，如果我们需要把数组里面的每个元素都取到，那么我们就要把里面的每个索引都拿一次\n\n> 我们也都知道索引是从0开始，到length-1结束，所以我们要在这个范围里面不停的去拿，这个地方我们做了一件重复的事情，就需要for循环了\n\n##### for 循环\n经过分析，我们知道循环的起始条件就应该是数组的初始索引值为0，结束条件就是数组的最大索引length-1\n\n```js\n//循环生成，i是从0开始 到length-1  指的是数组的每一个索引值\nfor(var i=0;i<=arr.length-1;i++){\n    console.log(arr[i]);\n}\n\n// i<=arr.length-1可以换成i<arr.length\n```\n##### for...in\n\n```js\nvar arr = [1,2,3,4,5];\nfor(var i in arr){\n    console.log(i);// 0-4 \n    // i 代表数组里面的每一项索引\n    console.log(arr[i]); // 1-5\n}\n\n上面的for...in 也是一种数组的遍历方式\n```\n\n---\n\n#### 数组的迭代方法\n数组可以使用第三方的方式来遍历里面的元素（for或for...in）,同时也可以使用数组自带的方法来进行遍历\n\n1. forEach 方法\n```js\narr.forEach(function(item,index,arr){\n    // item代表当前元素\n    // index代表当前索引 \n    // arr代表当前正在遍历的数组\n    console.log(item,index);\n});\n\n1.数组的forEach回调函数中写入执行代码段就可以\n2.这里回调函数有三个参数，第一个 表示数组的每一个值，第二个表示下标，第三个表示当前数组\n3.注意forEach 不能使用break与continue等方法终止遍历\n```\n\n2. map 方法\n```js\nmap 会为数组的每一个值去执行代码块，对返回的结果组成一个数组，作为整个遍历返回的值\n\nvar arr = [0,1,2,3,4];\nvar newArr = arr.map(function(item, index, arr){\n   return item/2; \n});\nconsole.log(newArr); // [0, 0.5, 1, 1.5, 2]\n```\n\n3. filter 过滤方法\n```js\nfilter对数组中的每一项运行给定函数，返回该函数符合要求的项组成的数组\n\nvar arr = [1,3,3,4,5];\nvar arr2 = arr.filter(function(item, index, arr){\n    // 通过找到当前的index索引和item索引相同，就说明是同一个元素，如果不相同就是重复的元素\n    // index: 0 1 2 3 4\n    // arr.indexOf(item): 0 1 1 3 4 \n    //因为通过indexOf方法查询到了两个相同的元素3，这个时候返回第一个的位置 1\n    // filter直接过滤掉了我们重复索引的元素3，因此得到了一个去重的数组\n    if(index == arr.indexOf(item)){\n        return item;\n    }\n})\nconsole.log(arr2); // [1,3,4,5]\n```\n\n4. some 方法\n```js\n这个遍布方法也有一个返回值，它的返回是布尔类型\n\nsome方法类似于 || 的逻辑语句判断，会为数组每一个值执行判断语句，只要有一个满足条件，整个遍历的返回值就为true\n\nvar arr3 = [2,3,4,5];\nvar arr4 = arr3.some(function(item, index){\n    return (item > 2)\n})\nconsole.log('arr4', arr4); // true\n```\n\n5. every 方法\n```js\n该方法与上面的some方法相对，相当于执行了且的运算\n\nevery的遍历会对数组的每一个值执行回调函数中的语句，只有在每一个值都为true时，整个遍历返回值为true，否则为false\n\nvar arr3 = [2,3,4,5];\nvar arr4 = arr3.some(function(item, index){\n    return (item > 2)\n})\nconsole.log('arr4', arr4); // false\n```\n\n---\n\n#### 归并方法 reduce()\n归并方法\n归并方法也是迭代方法的一种，但也不完全的迭代方法，它的回调方法里面有四个参数\n\n```js\narr.reduce(function(prev,cur,index,arr){\n...\n}, init);\n\narr：表示原数组；\n\nprev：表示上一次调用回调时的返回值，或者初始值 init;\n\ncur：表示当前正在处理的数组元素；\n\nindex：表示当前正在处理的数组元素的索引，若提供 init 值，则索引为0，否则索引为1；\n\ninit：表示初始值。\n\n常用参数：prev 和 cur\n```\n实例：\n先提供一个数组\n\n```js\nvar arr = [3,9,4,3,6,0,9];\n```\n##### 求数组项之和\n\n```js\nvar sum = arr.reduce(function(){\n    return prev + cur;\n}, 0);\nconsole.log('sum', sum); // 34\n```\n由于传入了初始值0，所以开始时prev的值为0，cur的值为数组的第一项，相加之后返回值为3，作为下一轮回调的prev值，然后再继续与下一个数组项相加，以此类推，直至完成所有数组项的和并返回。\n\n---\n\n#### 排序方法 sort()\nsort() 方法能够根据一定条件对数组元素进行排序。\n\n如果调用 sort() 方法时没有传递参数，则按字母顺序对数组中的元素进行排序。\n\n```js\nvar sortA = ['a','c','b','d'];\nsortA.sort();\nconsole.log(sortA); // ['a','b','c','d']\n```\n使用 sort() 方法时，应该注意下面几个问题。\n1. 所谓的字母顺序，实际上是根据字母在字符编码表中的顺序进行排列的，每个字符在字符表中都有一个唯一的编号。\n2. 如果元素不是字符串，则 sort() 方法试图把数组元素都转换成字符串，以便进行比较。\n3. sort() 方法将根据元素值进行逐位比较，而不是根据字符串的个数进行排序。\n```js\nvar a = [\"aba\",\"baa\",\"aab\"];  定义数组\na.sort();  //按字母顺序对元素进行排序\nconsole.log(a);  //返回数组[aab,aba,baa]\n\n/* 在排序时，首先比较每个元素的第 1 个字符，在第 1 个字符相同的情况下，再比较第 2 个字符，以此类推。 */\n```\n\n4. 在任何情况下，数组中 undefined 的元素都被排序在末尾。\n5. sort() 方法是在原数组基础上进行排序操作的，不会创建新的数组。\nsort() 方法不仅按字母顺序进行排序，还可以根据其他顺序执行操作。\n如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：\n    - 如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；\n    - 如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。\n    - 如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。\n    - compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。\n比较函数格式如下：\n```js\nfunction compare(a, b) {\n  if (a < b ) {           \n    // 按某种排序标准进行比较, a 小于 b\n    return -1;\n  }\n  if (a > b ) {\n    return 1;\n  }\n  return 0;\n}\n```\n要比较数字而非字符串，比较函数可以简单的以a-b，如下的函数将会将数组升序排列（由小大大）\n```js\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// a - b < 0  顺序a b 说明a小 = 2 - 4 顺序 2 4\n// a - b > 0  顺序b a 说明b小 = 4 - 2 顺序 2 4\n// a - b 就是小的值在前，用来做升序排列\n```\nsort 方法可以使用函数表达式方便书写为：\n```js\nvar numbers = [4, 2, 5, 1, 3];\nnumbers.sort(function(a, b) {\n  return a - b;\n});\nconsole.log(numbers); // [1, 2, 3, 4, 5]\n```\n降序处理（由大到小）\n```js\nfunction compareNumbers(a, b) {\n  return b - a;\n}\n\n// b - a < 0 顺序 a b 说明a大 = 2 - 4 顺序 4 2\n// b - a > 0 顺序 b a 说明b大 = 4 - 2 顺序 4 2\n// b - a 就是大的值在前，用来做降序排列\n```\n```js\n冒泡排序：\nvar ltArr = [3, 4, 8, 1];\nvar temp;\nfor(var i=0; i<ltArr.length; i++){\n    for(var j=i; j<ltArr.length; j++){\n        if(ltArr[i] > ltArr[j]){\n            temp = ltArr[i];\n            ltArr[i] = ltArr[j];\n            ltArr[j] = temp;\n        }\n        /* if(ltArr[i] < ltArr[j]){\n            temp = ltArr[i];\n            ltArr[i] = ltArr[j];\n            ltArr[j] = temp;\n        } */\n    }\n}\nconsole.log('ltArr', ltArr);\n```\n\n---\n\n## 二维数组\n> js在严格的意义上面来说是没有二维数组的概念，它只有多维数组概念\n\n\n```js\nvar name0=\"张三\";\nvar name1=\"李四\";\nvar name2=\"王五\";\nvar name3=\"赵六\";\n//现在我们有四人变量，这样写义很麻烦 ，所以我们可以通过数组的形式来定义，集中管理\nvar names=[\"张三\",\"李四\",\"王五\",\"赵六\"];\n\n通过数组，我们可以将上面的变量数据做集中式管理\n\n//----------------------------\n\nvar age0=18;\nvar age1=19;\nvar age2=29;\nvar age3=25;\n//现在又有了四个变量，我们这样定也很麻烦 ，这个时候，又可能通过数组\nvar ages=[18,19,29,25]\n\n当我们如果还需要将学生的性别，籍贯等信息也保存下来，做集中式管理的时候，又需要再次定义两个数组，\n但是我们都知道，这些数据在这里都是用于形容学生信息的，当变量名过多的时候，我们就不好管理\n\n//----------------------------\n\nvar stus=[names,ages]; \n\n现在我们将学生的姓名和年纪做了一次数组的组合，这个时候我们就可以通过数组名stus去管理这个班级的数据了\n\n//上面的代码等同于\nvar stus = [[\"张三\",\"李四\",\"王五\",\"赵六\"],[18,19,29,25];\n```\n\n---\n\n#### 二维数组的定义\n1. 通过 **Array** 的方法来定义\n```js\nvar stus = new Array();\nstus[0] = new Array();\nstus[1] = new Array();\n\n// 上面的方式我们采用的是一步一步去定义的方式 ，先定义一维的普通的数组，然后里面的值又是一个数组\n\n//----------------------------\nvar stus = new Array([],[]); \n//-----------------------------\nvar stus = new Array(new Array(), new Array());\n//-----------------------------\nvar stus = new Array(new Array(4), new Array(4));\n//-----------------------------\nvar stus = new Array(new Array(\"张三\",\"李四\",\"王五\",\"赵六\"),new Array(18,19,29,25));\n```\n\n2. 通过 **[ ]** 来定义\n```js\nvar stus = [[1,2,3,4],[\"a\",\"b\"],[true,false]];\n```\n\n---\n\n#### 二维数组的取值和赋值\n在数组里面，我们的取值方式是通过数组名[索引]来取值\n\n```js\n// 如果我想取到里面的“李四”，以及 29 应该怎么取？\nvar stus=[[\"张三\",\"李四\",\"王五\",\"赵六\"],[18,19,29,25]];\nvar names = stus[0]; // 取到了stus里面的第一个值，也就是第一个数组\nvar name1 = names[1]; // 再通过数组取值的方式去取它里面的“李四”\n\n//----------------------------\n二维数组的取值我们划分成了两部分\n\nvar name1 = stus[0][1]; // “李四”\nvar age1 = stus[1][2]; // 29\n```\n我们可以把取值与赋值看成一个表（先行后列）\n\nJS为什么会存在二维数组的概念是因为JS如果在内部要实现表的数据结构是通过二维数组来进行的，但是JS又不是一个完整意义上的表\n\n```js\nvar stus=[[\"张三\",\"李四\",\"王五\",\"赵六\"],[18,19,29]];\n\n在上面的数组里面，我们可以看到姓名在这里是四个元素，而年龄则是三个，\n在其它的编程语言这是不允许的，但是在JS里面，因为JS没有限定数组的长度，所以这是正常的\n```\n\n```js\nvar stus = [[\"张三\",\"李四\",\"王五\",\"赵六\"],[18,19,29],true,\"hello world\"];\n// 这种也是可以的\n```\n**JS没有严格意义上面的二维数组，它有只有多维**\n\n```js\nvar infos = [[\"张三\", \"李四\", \"王五\", \"赵六\", [\"小李\",\"老李\"]], [18, 19, 29]];\n// 现在如果要取“小李”\nvar names = info[0][4][0];\n\n// infos长度结果\ninfos.length; // 2\n```\n**思考？**\n现有如下数组，请遍历出数组当中的所有元素\n\n```js\nvar infos = [[\"张金\",\"张民龙\",\"邓俊峰\",\"方振锋\",[\"杨欢\",\"杜金雪\"]],[18,19,29],true,\n\"hello\",[\"陈昭文\",\"兰砣\",[\"胡定超\",\"甘才志\"]]];\n```\n\n```js\ninfos.forEach(function(item, index){\n    if(Array.isArray(item)){\n        item.forEach(function(item, index){\n            console.log(item)\n            if(Array.isArray(item)){\n                item.forEach(function(item, index){\n                    console.log(item);\n                });\n            } else{\n                console.log(item);\n            } \n        })\n    } else{\n        console.log(item);\n    }\n});\n```\n\n\n","source":"_posts/array.md","raw":"---\ntitle: JavaScript - 数组\ntags: 数组\ncategories: js\n---\n## 数组\n> 什么是数组？通过字面的意义直面理解数组就是把数据组合在一起\n\nJavaScript里面的数定义:\n\n**数组是存放一系列数据的集合**\n<!--more-->\n---\n#### 数组的定义\n##### 第一种方式Array\n这一种方式，我们可以直接使用JS的内置对象Array来进行\n\n在使用这一种方式的时候，它非常简单，如下所示就可以了\n\n```js\nvar nums = new Array();\n// 这样我们就创建了一个数组nums\n\n在上面的代码里面，我们看到了一个关键字 new\n我们在控制台打印出nums的时候，我们会看到有一个 [] ，这是数组表示形式上的特点\n```\n通过上面的方式创建的数组，我们会发现它是一个空的数组，它是一个空的数组里面没有任何元素，所以，我们可以把这个数组的长度理解为0\n\n**小技巧：** 一个数组如果要得到它的长度，我们可以使用一个属性**数组.length**\n\n```js\nvar nums = new Array();\nnums.length; // 这个时候会得到数字0，因为数组的长度为0，而length则代表这个数组的长度\n```\n在我们定义数组的时候，我们还可以直接就定义数组的长度\n\n```js\nvar nums = new Array(5);\n// 我们会得到一个长度为5的数组\nnums.length; // 得到结果为5\n```\n**注意：**\n创建数组如果要确定长度，那么你放进去的只可能是正整数，不能是小数，也不能是负数，并且只能有一个数字\n\n```js\nvar a=new Array(3.14); // 错误的定义方式，会提示“非法的数组长度”\nvar b=new Array(-3); // 错误的定义方式，会提示“非法的数组长度”\n```\n\n当我们在定义数组的时候，如果已经确定了数组里面的内容 ，我们可以直接的把数组内容放进去\n\n```js\nvar f=new Array(\"香蕉\",\"苹果\",\"哈密瓜\",\"草莓\",\"梨\");\n// 现在我们定义数组的时候，我就直接把里面放了5个水果\n```\n当我们去通过Array定义数组的时候，最常见的三种情况就是上面的三种情况：\n1. 第一种直接定义一个空数组，这个空数组的长度为0，\n2. 第二种定义了一个有长度的数组，但这个数组里面每个值都是空的，\n3. 第三个则在定义数组的时候，就把需要放到数组里面的元素直接丢进去了\n```js\nvar a=new Array();\nvar b=new Array(5);\nvar c=new Array(\"香蕉\",\"苹果\",\"哈密瓜\",\"草莓\",\"梨\");\n```\n**细节注意：**\n我们要确定一点，new Array(\"值\")放一个值的时候，它首先会通过一次typeof 值的检测，如果这个值是number类型，再去判断这个值是否是正整数，如果是，则表示数组定义的长度，否则就是数组的值\n\n```js\nvar a=new Array(\"5\");   //代表定义数组，直接把\"5\"放进去\n/*\n\ttypeof \"5\"  得到\"string\"  不是number类型 ，所以它代表数组里面的值\n*/\nvar b=new Array(5);     //代表定义一个长度为5的数组\n/*\n\ttypeof 5 得到\"number\"类型 ，然后判断是否大于或等于0，第三步是否是整数\n*/\n```\n\n---\n\n##### 第二种方式 []\n当我们通过第一种方式定义好数组以后，我们在控制打输出这个数组，我们会发现数组使用的是中括号 [] 来表示,通过这点我们在以后定义数组的时候可以直接使用中括号来定义\n\n```js\nvar nums=new Array();\nvar nums2=[];\n\n/* 这一种方式就相当于定义了一个空的数组，上面的两行代码最终得到的结果是一样的 */\n```\n我们也可以像第一种一样，直接去定义数组里面的值\n\n```js\nvar a=new Array(\"香蕉\",\"苹果\",\"哈密瓜\",\"草莓\",\"梨\");\nvar b=[\"香蕉\",\"苹果\",\"哈密瓜\",\"草莓\",\"梨\"];\n\n可以理解为：new Array() = [];\n```\n**小细节注意：**\n\n在我们使用Array去定义数组的时候，我们可以直接定义数组的长度\n\n```js\nvar a=new Array(5);\n//这代表定义了一个数组，它的长度为5\na.length;   //得到的结果是5\n```\n但是我们在通过[]去定义数组的时候，不能够直接定义数组的长度\n\n```js\nvar b=[5];\n//这不代表数组的长度。而代表数组里面有一个值，这个值是5\nb.length;   //得到结果1  里面有个元素是5\n```\n==**解决方案：**==\n\n```js\n我们都知道数组的长度是使用length来表示的，现在我们就通过它来解决\n\n//第一种定义的情况\nvar a=new Array(5);\n\n//如果转化成第二种定义情况\nvar b=[];   //定义了一个长度为0的数组\nb.length=5;   //重新设定数组的长度为5\n```\n\n---\n#### JS数组与其他变成语言的异同\n##### 数组的取值与赋值相同\n1. JS数组的取值与赋值跟其它的编程言是一样的，它们都是通过下标取值与赋值（下标也叫索引，可以把它理解书本上面的页码，通过索引，可以快速的定位到数组里面的值）\n2. JS数组与其它编程语言数组一样，它的索引（下标）是从0开始的，它们的取值与赋值都是 **数组[索引值]**\n```js\nvar a=['苹果', '香蕉', '梨'];\na[0]; //苹果\na[1]; //香蕉\na[2]; //梨\na[2] = '哈密瓜'; //把值赋值到数组的第三个位置\nconsole.log(a); //得到['苹果', '香蕉', '哈密瓜'];\n```\n##### 数据类型的区别\n在其它的编程语言里面，数组里面的值使用的是同一个数组类型，**而在JS的数组里面，里面的值的数据类型可以不相同**\n```js\nvar arr=[\"张三\",18,true,null,undefined,\"\",NaN];\n//现在上面的数组里面，放了多个值，这些值包含了我们JS里面的5种基本数据类型\n```\n把上面的代码在控制台运行以后，没有报错，并且我们展开数组以后发现所有的值都存进去了，所以我们可以得出结论：**JS数组里面值的数据类型 ，我们可以不相同**\n\n##### 数组长度与最大索引的区别\n在其它的编程语言里面，数组的长度决定了最大索引，例如如果在C/C++/Java等编程语言（强类型语言）里面，如果数组的长度为6，那么它最大的索引应该是5（长度决定最大索引）\n\n**在JavaScript里面的数组，最大索引决定了数组当前的长度**\n\n> 通过上面的相同点与不同点的结论，我们可以得出一个，JS数组不限定长度，也不限制数据类型!(正是因为这个特点，所以JS把数组也当成了集合)\n\n---\n#### 数组类型的检测\n我们可以通过typeof关键字来检测数据类型，typeof 只能检测了基本的数据类型与对象类型 ，而不能够具体的检测出数组\n\n如果判断这个变量是否是数组，我们还需要做一次检测\n\n##### 使用 instanceof 关键字\ninstanceof 主要的作用与 typeof 相似，typeof 主要用于检测基本数据类型，而instanceof主要用于检测对象类型\n\n```js\nvar num=new Array();\nnum instanceof Array; // 判断num是否是Array new出来的\n```\n>如果， **变量 instanceof Array** 得到的值为true，则代表它是一个数组，否则就不是一个数组\n\n##### Array.isArray() 检测\n除了通过之前的instanceof关键字以外，我们还可以使用自带的方法去检测\n\n```js\nvar num=new Array();\nArray.isArray(num); // 判断num是否为数组\n```\n> 如果上面的结果为true，则说明num是数组，如果得到false，则说明num不是数组\n\n当我们检测出一个变量为数组以后，我们就可以让这个数组来解决我们工作当中遇到的问题，例如将元素添加到数组，删除数组里面的值，遍历数组等方式\n\n---\n\n#### 数组的取值与赋值\n当我们创建一个数组以后，这个数组里面可以存放任意多个值，这些数组里面的值，我们叫“元素”\n\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\n// 在上面的stu数组里面，我们可以把\"张三，李四，王五\"这三个值叫元素\n```\n当一个数组好了以后，我们可以通过下标（索引）来进行赋值与赋值\n\n```js\nstu[0];   //取出了第一个元素的值  \"张三\"\nstu[1]=\"丁六\";   //对数组的第一个元素进行赋值\n```\n\n```js\n//如果我现在想在刚刚的数组后面添加一个元素（”哈哈“）\nvar stu=[\"张三\",\"李四\",\"王五\"];\nvar length=stu.length;  //取到数组的长度 length = 3\nstu[length]=\"哈哈\"; // stu[3] 就是第四个值\n```\n++如果向前面添加元素，就会很麻烦 ，所以，我们除了使用数组的下标来取值或赋值以外，我们还需要使用一些特殊的技术来对数组的元素进行添加或删除等相关操作++\n\n> 数组提供了一系列的方法来进行操作，这些方法是提供给用户的使用的，可以提高我们操作数组的简便程度\n\n---\n\n#### 数组的常用方法与属性\n> 方法：用于使用（调用）\n\n> 属性：用于描述一些事物的特征（特性）\n\n1. length 属性：用于获取或设置数组的长度\n```js\nvar num=new Array(5);\nnum.length;\n```\n\n2. push() 方法：直接向当前的数组后面去追加新的元素\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\nstu.push('赵六'); // 把赵六添加到当前数组的最后面去\n\nstu.push('哈哈', '嘻嘻'); // 可以同时添加多个元素\n```\n\n3. pop() 方法：移除当前数组的最后一个元素，并且可以得到这个元素\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\nvar a = stu.pop();\nconsole.log(a); // 王五\n//上面的代码执行了两个过程\n//第一个过程是移除了stu数组的最后一个元素“王五”\n//第二个过程，把移出来的这个元素”李昊“赋值给了变量a\n```\n\n4. unshift() 方法：在数组的最前面去添加元素\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\nstu.unshift('老李');//在数组的最前面添加元素\"老李\"\n\n//unshift与push一样，都可以一次性添加多个元素\nstu.unshift(\"小李\",\"小王\");\n```\n\n5. shift() 方法：在数组的前面移除一个元素，并且可以得到这个元素\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\nvar a=stu.shift(); \nconsole.log(a); //张三\n//上面的代码也执行了两个过程 \n//第一个过程是把最前面的“张三”移出来\n//第二个过程则是把移出来的“张三”赋值给了变量a\n```\n\n6. reverse()方法：该方法会将当前数组里面的元素进行反转\n```js\nvar stu=[\"张三\",\"李四\",\"王五\"];\nstu.reverse();\n// 这个时候，里面的数组会进行反转\n```\n\n7. concat() 方法：将多个数组里面的元素进行合并，然后得到一个心得数组\n```js\nvar arr1=[\"a\",\"b\",\"c\"];\nvar arr2=[1,2,3];\nvar arr3=[true,false,null];\nvar _a=arr1.concat(arr2);   //它将arr1与arr2进行相连，得到一个新的数组_a，不影响原来的数组\nvar _b = arr1.concat(arr2,arr3); \n//它也可以同时连接多个数组\n```\n\n8. toString() 方法：该方法讲数组转换成字符串，里面的原则用“逗号” **,** 来隔开\n```js\nvar arr=[\"a\",\"b\",\"c\"];\narr.toString();   //\"a,b,c\";   \nvar arr1=[1,2,3,4,5];\narr1.toString();  //\"1,2,3,4,5\"\n```\n\n9. join() 方法：将元素转换成字符串，然后按指定的符号隔开，如果未指定符号，则默认使用逗号 , 隔开\n```js\nvar arr=[\"a\",\"b\",\"c\"];\narr.join(\"#\");   //\"a#b#c\";\nvar arr1=[1,2,3,4,5];\narr.join();   //\"1,2,3,4,5\";  不添加符号，则默认使用逗号来进行\n```\n\n10. splice() 方法：替换数组里面的元素\n```js\nvar arr=[100,200,300,400,500];\narr.splice(1,2,'aaa','bbb');\n// [100, 'aaa', 'bbb', 400, 500]\n/*\n\t第一个1代表开始替换的索引\n\t第二个2代表替换元素的个数\n\t后面的\"aaa\",\"bbbb\"代表替换以后新的元素\n*/\narr.splice(1,3,'aaa','bbb','ccc');\n// [100, 'aaa', 'bbb', 'ccc', 500];\n```\n扩展第一种情况\n```js\nvar arr=[100,200,300,400,500];\narr.splice(1,2);\n\n/*\n    在上面的代码里面，我们可以看从，第一个参数代表开始索引，第二个参数代表要替换的元素个数\n    这个时候，如果我们只是替换元素出来而不向里面添加元素，这个时候这个过程就相当于删除过程\n*/\n```\n扩展第二种情况\n```js\nvar arr=[100,200,300,400,500];\narr.splice(2); //[100,200]\n// 从索引2开始，后面的全部删掉\n```\n扩展第三种情况\n```js\n向数组的特定位置添加元素\n\nvar arr=[\"张三\",\"李四\",\"曾七\",\"王八\"];\n//现在请将\"王五\"，\"赵六\"插入到”李四“与”曾七“的中间\narr.splice(2,0,\"王五\",\"赵六\");\n/*\n    索引2的位置，没有替换元素，而是添加了两个元素\n    原来索引2的“曾七”变成了添加的“王五”\n*/\n```\n\n11. indexOf() 方法：查询数组当中某个元素的索引的位置，默认从0的索引开始查询，一直查询到最后一个，如果找到多个，则返回第一个的位置\n```js\nvar arr=[\"张三\",\"李四\",\"李四\",\"曾七\"];\narr.indexOf('张三'); // 0\n\n如果找到这个元素就得到这个元素所在的索引值，如果没有找到则得到一个“-1”\n```\n\n12. slice() 方法：提取现有数组里面的元素，得到一个新的数组，它不会影响到原来的数组\n```js\narr.slice(start,end)\n第一个参数代表起始索引\n第二个参数代表结束索引的前一个\n\nvar arr=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];\nvar arr2 = arr.slice(1,4);\n// 起始索引1 元素为\"b\"，结束索引4 元素为\"e\"，\"e\"的前一个为\"d\"\n// arr2的结束就是 [\"b\",\"c\",\"d\"]  \n```\n```js\n如果start是负数，那么规定从数组尾部开始算起。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。\n如果end是负数，那么规定的是从数组尾部开始算起的参数。\n\nvar arr=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];\narr.slice(-1); // f\narr.slice(-4); // c d e f\narr.slice(-4,1); // [] 得不到结果，在我开始之前了\narr.slice(-4,3); // ['c']\narr.slice(-4,-2); // ?\n```\n\n##### 数组练习\n\n```js\n给你一个数组[1,8,6,2,7,9,9,4,8,2,6]，请把这个数组变成手机号：18627994826\n\nvar telArr = ['1','8','6','2','7','9','9','4','8','2','6'];\nvar tel = Number(telArr.join(''));\nconsole.log('我的手机号', tel);\n```\n\n---\n#### 循环得到数组里面的每一个元素\n\n```js\nvar arr=[1,4,7,9,2,8,3,6,11,54,23];\n```\n> 首先经过学习我们已经知道数组元素的取值与赋值都是通过索引来进行，如果我们需要把数组里面的每个元素都取到，那么我们就要把里面的每个索引都拿一次\n\n> 我们也都知道索引是从0开始，到length-1结束，所以我们要在这个范围里面不停的去拿，这个地方我们做了一件重复的事情，就需要for循环了\n\n##### for 循环\n经过分析，我们知道循环的起始条件就应该是数组的初始索引值为0，结束条件就是数组的最大索引length-1\n\n```js\n//循环生成，i是从0开始 到length-1  指的是数组的每一个索引值\nfor(var i=0;i<=arr.length-1;i++){\n    console.log(arr[i]);\n}\n\n// i<=arr.length-1可以换成i<arr.length\n```\n##### for...in\n\n```js\nvar arr = [1,2,3,4,5];\nfor(var i in arr){\n    console.log(i);// 0-4 \n    // i 代表数组里面的每一项索引\n    console.log(arr[i]); // 1-5\n}\n\n上面的for...in 也是一种数组的遍历方式\n```\n\n---\n\n#### 数组的迭代方法\n数组可以使用第三方的方式来遍历里面的元素（for或for...in）,同时也可以使用数组自带的方法来进行遍历\n\n1. forEach 方法\n```js\narr.forEach(function(item,index,arr){\n    // item代表当前元素\n    // index代表当前索引 \n    // arr代表当前正在遍历的数组\n    console.log(item,index);\n});\n\n1.数组的forEach回调函数中写入执行代码段就可以\n2.这里回调函数有三个参数，第一个 表示数组的每一个值，第二个表示下标，第三个表示当前数组\n3.注意forEach 不能使用break与continue等方法终止遍历\n```\n\n2. map 方法\n```js\nmap 会为数组的每一个值去执行代码块，对返回的结果组成一个数组，作为整个遍历返回的值\n\nvar arr = [0,1,2,3,4];\nvar newArr = arr.map(function(item, index, arr){\n   return item/2; \n});\nconsole.log(newArr); // [0, 0.5, 1, 1.5, 2]\n```\n\n3. filter 过滤方法\n```js\nfilter对数组中的每一项运行给定函数，返回该函数符合要求的项组成的数组\n\nvar arr = [1,3,3,4,5];\nvar arr2 = arr.filter(function(item, index, arr){\n    // 通过找到当前的index索引和item索引相同，就说明是同一个元素，如果不相同就是重复的元素\n    // index: 0 1 2 3 4\n    // arr.indexOf(item): 0 1 1 3 4 \n    //因为通过indexOf方法查询到了两个相同的元素3，这个时候返回第一个的位置 1\n    // filter直接过滤掉了我们重复索引的元素3，因此得到了一个去重的数组\n    if(index == arr.indexOf(item)){\n        return item;\n    }\n})\nconsole.log(arr2); // [1,3,4,5]\n```\n\n4. some 方法\n```js\n这个遍布方法也有一个返回值，它的返回是布尔类型\n\nsome方法类似于 || 的逻辑语句判断，会为数组每一个值执行判断语句，只要有一个满足条件，整个遍历的返回值就为true\n\nvar arr3 = [2,3,4,5];\nvar arr4 = arr3.some(function(item, index){\n    return (item > 2)\n})\nconsole.log('arr4', arr4); // true\n```\n\n5. every 方法\n```js\n该方法与上面的some方法相对，相当于执行了且的运算\n\nevery的遍历会对数组的每一个值执行回调函数中的语句，只有在每一个值都为true时，整个遍历返回值为true，否则为false\n\nvar arr3 = [2,3,4,5];\nvar arr4 = arr3.some(function(item, index){\n    return (item > 2)\n})\nconsole.log('arr4', arr4); // false\n```\n\n---\n\n#### 归并方法 reduce()\n归并方法\n归并方法也是迭代方法的一种，但也不完全的迭代方法，它的回调方法里面有四个参数\n\n```js\narr.reduce(function(prev,cur,index,arr){\n...\n}, init);\n\narr：表示原数组；\n\nprev：表示上一次调用回调时的返回值，或者初始值 init;\n\ncur：表示当前正在处理的数组元素；\n\nindex：表示当前正在处理的数组元素的索引，若提供 init 值，则索引为0，否则索引为1；\n\ninit：表示初始值。\n\n常用参数：prev 和 cur\n```\n实例：\n先提供一个数组\n\n```js\nvar arr = [3,9,4,3,6,0,9];\n```\n##### 求数组项之和\n\n```js\nvar sum = arr.reduce(function(){\n    return prev + cur;\n}, 0);\nconsole.log('sum', sum); // 34\n```\n由于传入了初始值0，所以开始时prev的值为0，cur的值为数组的第一项，相加之后返回值为3，作为下一轮回调的prev值，然后再继续与下一个数组项相加，以此类推，直至完成所有数组项的和并返回。\n\n---\n\n#### 排序方法 sort()\nsort() 方法能够根据一定条件对数组元素进行排序。\n\n如果调用 sort() 方法时没有传递参数，则按字母顺序对数组中的元素进行排序。\n\n```js\nvar sortA = ['a','c','b','d'];\nsortA.sort();\nconsole.log(sortA); // ['a','b','c','d']\n```\n使用 sort() 方法时，应该注意下面几个问题。\n1. 所谓的字母顺序，实际上是根据字母在字符编码表中的顺序进行排列的，每个字符在字符表中都有一个唯一的编号。\n2. 如果元素不是字符串，则 sort() 方法试图把数组元素都转换成字符串，以便进行比较。\n3. sort() 方法将根据元素值进行逐位比较，而不是根据字符串的个数进行排序。\n```js\nvar a = [\"aba\",\"baa\",\"aab\"];  定义数组\na.sort();  //按字母顺序对元素进行排序\nconsole.log(a);  //返回数组[aab,aba,baa]\n\n/* 在排序时，首先比较每个元素的第 1 个字符，在第 1 个字符相同的情况下，再比较第 2 个字符，以此类推。 */\n```\n\n4. 在任何情况下，数组中 undefined 的元素都被排序在末尾。\n5. sort() 方法是在原数组基础上进行排序操作的，不会创建新的数组。\nsort() 方法不仅按字母顺序进行排序，还可以根据其他顺序执行操作。\n如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：\n    - 如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；\n    - 如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。\n    - 如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。\n    - compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。\n比较函数格式如下：\n```js\nfunction compare(a, b) {\n  if (a < b ) {           \n    // 按某种排序标准进行比较, a 小于 b\n    return -1;\n  }\n  if (a > b ) {\n    return 1;\n  }\n  return 0;\n}\n```\n要比较数字而非字符串，比较函数可以简单的以a-b，如下的函数将会将数组升序排列（由小大大）\n```js\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// a - b < 0  顺序a b 说明a小 = 2 - 4 顺序 2 4\n// a - b > 0  顺序b a 说明b小 = 4 - 2 顺序 2 4\n// a - b 就是小的值在前，用来做升序排列\n```\nsort 方法可以使用函数表达式方便书写为：\n```js\nvar numbers = [4, 2, 5, 1, 3];\nnumbers.sort(function(a, b) {\n  return a - b;\n});\nconsole.log(numbers); // [1, 2, 3, 4, 5]\n```\n降序处理（由大到小）\n```js\nfunction compareNumbers(a, b) {\n  return b - a;\n}\n\n// b - a < 0 顺序 a b 说明a大 = 2 - 4 顺序 4 2\n// b - a > 0 顺序 b a 说明b大 = 4 - 2 顺序 4 2\n// b - a 就是大的值在前，用来做降序排列\n```\n```js\n冒泡排序：\nvar ltArr = [3, 4, 8, 1];\nvar temp;\nfor(var i=0; i<ltArr.length; i++){\n    for(var j=i; j<ltArr.length; j++){\n        if(ltArr[i] > ltArr[j]){\n            temp = ltArr[i];\n            ltArr[i] = ltArr[j];\n            ltArr[j] = temp;\n        }\n        /* if(ltArr[i] < ltArr[j]){\n            temp = ltArr[i];\n            ltArr[i] = ltArr[j];\n            ltArr[j] = temp;\n        } */\n    }\n}\nconsole.log('ltArr', ltArr);\n```\n\n---\n\n## 二维数组\n> js在严格的意义上面来说是没有二维数组的概念，它只有多维数组概念\n\n\n```js\nvar name0=\"张三\";\nvar name1=\"李四\";\nvar name2=\"王五\";\nvar name3=\"赵六\";\n//现在我们有四人变量，这样写义很麻烦 ，所以我们可以通过数组的形式来定义，集中管理\nvar names=[\"张三\",\"李四\",\"王五\",\"赵六\"];\n\n通过数组，我们可以将上面的变量数据做集中式管理\n\n//----------------------------\n\nvar age0=18;\nvar age1=19;\nvar age2=29;\nvar age3=25;\n//现在又有了四个变量，我们这样定也很麻烦 ，这个时候，又可能通过数组\nvar ages=[18,19,29,25]\n\n当我们如果还需要将学生的性别，籍贯等信息也保存下来，做集中式管理的时候，又需要再次定义两个数组，\n但是我们都知道，这些数据在这里都是用于形容学生信息的，当变量名过多的时候，我们就不好管理\n\n//----------------------------\n\nvar stus=[names,ages]; \n\n现在我们将学生的姓名和年纪做了一次数组的组合，这个时候我们就可以通过数组名stus去管理这个班级的数据了\n\n//上面的代码等同于\nvar stus = [[\"张三\",\"李四\",\"王五\",\"赵六\"],[18,19,29,25];\n```\n\n---\n\n#### 二维数组的定义\n1. 通过 **Array** 的方法来定义\n```js\nvar stus = new Array();\nstus[0] = new Array();\nstus[1] = new Array();\n\n// 上面的方式我们采用的是一步一步去定义的方式 ，先定义一维的普通的数组，然后里面的值又是一个数组\n\n//----------------------------\nvar stus = new Array([],[]); \n//-----------------------------\nvar stus = new Array(new Array(), new Array());\n//-----------------------------\nvar stus = new Array(new Array(4), new Array(4));\n//-----------------------------\nvar stus = new Array(new Array(\"张三\",\"李四\",\"王五\",\"赵六\"),new Array(18,19,29,25));\n```\n\n2. 通过 **[ ]** 来定义\n```js\nvar stus = [[1,2,3,4],[\"a\",\"b\"],[true,false]];\n```\n\n---\n\n#### 二维数组的取值和赋值\n在数组里面，我们的取值方式是通过数组名[索引]来取值\n\n```js\n// 如果我想取到里面的“李四”，以及 29 应该怎么取？\nvar stus=[[\"张三\",\"李四\",\"王五\",\"赵六\"],[18,19,29,25]];\nvar names = stus[0]; // 取到了stus里面的第一个值，也就是第一个数组\nvar name1 = names[1]; // 再通过数组取值的方式去取它里面的“李四”\n\n//----------------------------\n二维数组的取值我们划分成了两部分\n\nvar name1 = stus[0][1]; // “李四”\nvar age1 = stus[1][2]; // 29\n```\n我们可以把取值与赋值看成一个表（先行后列）\n\nJS为什么会存在二维数组的概念是因为JS如果在内部要实现表的数据结构是通过二维数组来进行的，但是JS又不是一个完整意义上的表\n\n```js\nvar stus=[[\"张三\",\"李四\",\"王五\",\"赵六\"],[18,19,29]];\n\n在上面的数组里面，我们可以看到姓名在这里是四个元素，而年龄则是三个，\n在其它的编程语言这是不允许的，但是在JS里面，因为JS没有限定数组的长度，所以这是正常的\n```\n\n```js\nvar stus = [[\"张三\",\"李四\",\"王五\",\"赵六\"],[18,19,29],true,\"hello world\"];\n// 这种也是可以的\n```\n**JS没有严格意义上面的二维数组，它有只有多维**\n\n```js\nvar infos = [[\"张三\", \"李四\", \"王五\", \"赵六\", [\"小李\",\"老李\"]], [18, 19, 29]];\n// 现在如果要取“小李”\nvar names = info[0][4][0];\n\n// infos长度结果\ninfos.length; // 2\n```\n**思考？**\n现有如下数组，请遍历出数组当中的所有元素\n\n```js\nvar infos = [[\"张金\",\"张民龙\",\"邓俊峰\",\"方振锋\",[\"杨欢\",\"杜金雪\"]],[18,19,29],true,\n\"hello\",[\"陈昭文\",\"兰砣\",[\"胡定超\",\"甘才志\"]]];\n```\n\n```js\ninfos.forEach(function(item, index){\n    if(Array.isArray(item)){\n        item.forEach(function(item, index){\n            console.log(item)\n            if(Array.isArray(item)){\n                item.forEach(function(item, index){\n                    console.log(item);\n                });\n            } else{\n                console.log(item);\n            } \n        })\n    } else{\n        console.log(item);\n    }\n});\n```\n\n\n","slug":"array","published":1,"date":"2022-06-29T09:09:02.238Z","updated":"2022-06-29T09:22:55.878Z","_id":"cl4zdmdq8000gd3x66pgvatgy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><blockquote>\n<p>什么是数组？通过字面的意义直面理解数组就是把数据组合在一起</p>\n</blockquote>\n<p>JavaScript里面的数定义:</p>\n<p><strong>数组是存放一系列数据的集合</strong></p>\n<span id=\"more\"></span>\n<hr>\n<h4 id=\"数组的定义\"><a href=\"#数组的定义\" class=\"headerlink\" title=\"数组的定义\"></a>数组的定义</h4><h5 id=\"第一种方式Array\"><a href=\"#第一种方式Array\" class=\"headerlink\" title=\"第一种方式Array\"></a>第一种方式Array</h5><p>这一种方式，我们可以直接使用JS的内置对象Array来进行</p>\n<p>在使用这一种方式的时候，它非常简单，如下所示就可以了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这样我们就创建了一个数组nums</span>\n\n在上面的代码里面，我们看到了一个关键字 <span class=\"token keyword\">new</span>\n我们在控制台打印出nums的时候，我们会看到有一个 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ，这是数组表示形式上的特点<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过上面的方式创建的数组，我们会发现它是一个空的数组，它是一个空的数组里面没有任何元素，所以，我们可以把这个数组的长度理解为0</p>\n<p><strong>小技巧：</strong> 一个数组如果要得到它的长度，我们可以使用一个属性<strong>数组.length</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这个时候会得到数字0，因为数组的长度为0，而length则代表这个数组的长度</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>在我们定义数组的时候，我们还可以直接就定义数组的长度</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 我们会得到一个长度为5的数组</span>\nnums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到结果为5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：</strong><br>创建数组如果要确定长度，那么你放进去的只可能是正整数，不能是小数，也不能是负数，并且只能有一个数字</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误的定义方式，会提示“非法的数组长度”</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误的定义方式，会提示“非法的数组长度”</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当我们在定义数组的时候，如果已经确定了数组里面的内容 ，我们可以直接的把数组内容放进去</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> f<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"哈密瓜\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"草莓\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"梨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 现在我们定义数组的时候，我就直接把里面放了5个水果</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>当我们去通过Array定义数组的时候，最常见的三种情况就是上面的三种情况：</p>\n<ol>\n<li>第一种直接定义一个空数组，这个空数组的长度为0，</li>\n<li>第二种定义了一个有长度的数组，但这个数组里面每个值都是空的，</li>\n<li>第三个则在定义数组的时候，就把需要放到数组里面的元素直接丢进去了<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"哈密瓜\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"草莓\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"梨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>细节注意：</strong><br>我们要确定一点，new Array(“值”)放一个值的时候，它首先会通过一次typeof 值的检测，如果这个值是number类型，再去判断这个值是否是正整数，如果是，则表示数组定义的长度，否则就是数组的值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//代表定义数组，直接把\"5\"放进去</span>\n<span class=\"token comment\">/*\n\ttypeof \"5\"  得到\"string\"  不是number类型 ，所以它代表数组里面的值\n*/</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//代表定义一个长度为5的数组</span>\n<span class=\"token comment\">/*\n\ttypeof 5 得到\"number\"类型 ，然后判断是否大于或等于0，第三步是否是整数\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h5 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式 []\"></a>第二种方式 []</h5><p>当我们通过第一种方式定义好数组以后，我们在控制打输出这个数组，我们会发现数组使用的是中括号 [] 来表示,通过这点我们在以后定义数组的时候可以直接使用中括号来定义</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nums<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> nums2<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 这一种方式就相当于定义了一个空的数组，上面的两行代码最终得到的结果是一样的 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们也可以像第一种一样，直接去定义数组里面的值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"哈密瓜\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"草莓\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"梨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"哈密瓜\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"草莓\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"梨\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n可以理解为：<span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>小细节注意：</strong></p>\n<p>在我们使用Array去定义数组的时候，我们可以直接定义数组的长度</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这代表定义了一个数组，它的长度为5</span>\na<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到的结果是5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>但是我们在通过[]去定义数组的时候，不能够直接定义数组的长度</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这不代表数组的长度。而代表数组里面有一个值，这个值是5</span>\nb<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到结果1  里面有个元素是5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>==<strong>解决方案：</strong>==</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">我们都知道数组的长度是使用length来表示的，现在我们就通过它来解决\n\n<span class=\"token comment\">//第一种定义的情况</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//如果转化成第二种定义情况</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//定义了一个长度为0的数组</span>\nb<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//重新设定数组的长度为5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"JS数组与其他变成语言的异同\"><a href=\"#JS数组与其他变成语言的异同\" class=\"headerlink\" title=\"JS数组与其他变成语言的异同\"></a>JS数组与其他变成语言的异同</h4><h5 id=\"数组的取值与赋值相同\"><a href=\"#数组的取值与赋值相同\" class=\"headerlink\" title=\"数组的取值与赋值相同\"></a>数组的取值与赋值相同</h5><ol>\n<li>JS数组的取值与赋值跟其它的编程言是一样的，它们都是通过下标取值与赋值（下标也叫索引，可以把它理解书本上面的页码，通过索引，可以快速的定位到数组里面的值）</li>\n<li>JS数组与其它编程语言数组一样，它的索引（下标）是从0开始的，它们的取值与赋值都是 <strong>数组[索引值]</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'苹果'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'香蕉'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'梨'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//苹果</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//香蕉</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//梨</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'哈密瓜'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把值赋值到数组的第三个位置</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//得到['苹果', '香蕉', '哈密瓜'];</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"数据类型的区别\"><a href=\"#数据类型的区别\" class=\"headerlink\" title=\"数据类型的区别\"></a>数据类型的区别</h5>在其它的编程语言里面，数组里面的值使用的是同一个数组类型，<strong>而在JS的数组里面，里面的值的数据类型可以不相同</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//现在上面的数组里面，放了多个值，这些值包含了我们JS里面的5种基本数据类型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n把上面的代码在控制台运行以后，没有报错，并且我们展开数组以后发现所有的值都存进去了，所以我们可以得出结论：<strong>JS数组里面值的数据类型 ，我们可以不相同</strong></li>\n</ol>\n<h5 id=\"数组长度与最大索引的区别\"><a href=\"#数组长度与最大索引的区别\" class=\"headerlink\" title=\"数组长度与最大索引的区别\"></a>数组长度与最大索引的区别</h5><p>在其它的编程语言里面，数组的长度决定了最大索引，例如如果在C/C++/Java等编程语言（强类型语言）里面，如果数组的长度为6，那么它最大的索引应该是5（长度决定最大索引）</p>\n<p><strong>在JavaScript里面的数组，最大索引决定了数组当前的长度</strong></p>\n<blockquote>\n<p>通过上面的相同点与不同点的结论，我们可以得出一个，JS数组不限定长度，也不限制数据类型!(正是因为这个特点，所以JS把数组也当成了集合)</p>\n</blockquote>\n<hr>\n<h4 id=\"数组类型的检测\"><a href=\"#数组类型的检测\" class=\"headerlink\" title=\"数组类型的检测\"></a>数组类型的检测</h4><p>我们可以通过typeof关键字来检测数据类型，typeof 只能检测了基本的数据类型与对象类型 ，而不能够具体的检测出数组</p>\n<p>如果判断这个变量是否是数组，我们还需要做一次检测</p>\n<h5 id=\"使用-instanceof-关键字\"><a href=\"#使用-instanceof-关键字\" class=\"headerlink\" title=\"使用 instanceof 关键字\"></a>使用 instanceof 关键字</h5><p>instanceof 主要的作用与 typeof 相似，typeof 主要用于检测基本数据类型，而instanceof主要用于检测对象类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnum <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断num是否是Array new出来的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果， <strong>变量 instanceof Array</strong> 得到的值为true，则代表它是一个数组，否则就不是一个数组</p>\n</blockquote>\n<h5 id=\"Array-isArray-检测\"><a href=\"#Array-isArray-检测\" class=\"headerlink\" title=\"Array.isArray() 检测\"></a>Array.isArray() 检测</h5><p>除了通过之前的instanceof关键字以外，我们还可以使用自带的方法去检测</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断num是否为数组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果上面的结果为true，则说明num是数组，如果得到false，则说明num不是数组</p>\n</blockquote>\n<p>当我们检测出一个变量为数组以后，我们就可以让这个数组来解决我们工作当中遇到的问题，例如将元素添加到数组，删除数组里面的值，遍历数组等方式</p>\n<hr>\n<h4 id=\"数组的取值与赋值\"><a href=\"#数组的取值与赋值\" class=\"headerlink\" title=\"数组的取值与赋值\"></a>数组的取值与赋值</h4><p>当我们创建一个数组以后，这个数组里面可以存放任意多个值，这些数组里面的值，我们叫“元素”</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在上面的stu数组里面，我们可以把\"张三，李四，王五\"这三个值叫元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>当一个数组好了以后，我们可以通过下标（索引）来进行赋值与赋值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">stu<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//取出了第一个元素的值  \"张三\"</span>\nstu<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"丁六\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//对数组的第一个元素进行赋值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//如果我现在想在刚刚的数组后面添加一个元素（”哈哈“）</span>\n<span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> length<span class=\"token operator\">=</span>stu<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//取到数组的长度 length = 3</span>\nstu<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"哈哈\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// stu[3] 就是第四个值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>++如果向前面添加元素，就会很麻烦 ，所以，我们除了使用数组的下标来取值或赋值以外，我们还需要使用一些特殊的技术来对数组的元素进行添加或删除等相关操作++</p>\n<blockquote>\n<p>数组提供了一系列的方法来进行操作，这些方法是提供给用户的使用的，可以提高我们操作数组的简便程度</p>\n</blockquote>\n<hr>\n<h4 id=\"数组的常用方法与属性\"><a href=\"#数组的常用方法与属性\" class=\"headerlink\" title=\"数组的常用方法与属性\"></a>数组的常用方法与属性</h4><blockquote>\n<p>方法：用于使用（调用）</p>\n</blockquote>\n<blockquote>\n<p>属性：用于描述一些事物的特征（特性）</p>\n</blockquote>\n<ol>\n<li><p>length 属性：用于获取或设置数组的长度</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnum<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>push() 方法：直接向当前的数组后面去追加新的元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'赵六'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把赵六添加到当前数组的最后面去</span>\n\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'哈哈'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'嘻嘻'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以同时添加多个元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>pop() 方法：移除当前数组的最后一个元素，并且可以得到这个元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 王五</span>\n<span class=\"token comment\">//上面的代码执行了两个过程</span>\n<span class=\"token comment\">//第一个过程是移除了stu数组的最后一个元素“王五”</span>\n<span class=\"token comment\">//第二个过程，把移出来的这个元素”李昊“赋值给了变量a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>unshift() 方法：在数组的最前面去添加元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">'老李'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在数组的最前面添加元素\"老李\"</span>\n\n<span class=\"token comment\">//unshift与push一样，都可以一次性添加多个元素</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小李\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>shift() 方法：在数组的前面移除一个元素，并且可以得到这个元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span>stu<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//张三</span>\n<span class=\"token comment\">//上面的代码也执行了两个过程 </span>\n<span class=\"token comment\">//第一个过程是把最前面的“张三”移出来</span>\n<span class=\"token comment\">//第二个过程则是把移出来的“张三”赋值给了变量a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>reverse()方法：该方法会将当前数组里面的元素进行反转</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这个时候，里面的数组会进行反转</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>concat() 方法：将多个数组里面的元素进行合并，然后得到一个心得数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr3<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _a<span class=\"token operator\">=</span>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//它将arr1与arr2进行相连，得到一个新的数组_a，不影响原来的数组</span>\n<span class=\"token keyword\">var</span> _b <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">,</span>arr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//它也可以同时连接多个数组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>toString() 方法：该方法讲数组转换成字符串，里面的原则用“逗号” <strong>,</strong> 来隔开</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"a,b,c\";   </span>\n<span class=\"token keyword\">var</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//\"1,2,3,4,5\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>join() 方法：将元素转换成字符串，然后按指定的符号隔开，如果未指定符号，则默认使用逗号 , 隔开</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"a#b#c\";</span>\n<span class=\"token keyword\">var</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"1,2,3,4,5\";  不添加符号，则默认使用逗号来进行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>splice() 方法：替换数组里面的元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bbb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [100, 'aaa', 'bbb', 400, 500]</span>\n<span class=\"token comment\">/*\n\t第一个1代表开始替换的索引\n\t第二个2代表替换元素的个数\n\t后面的\"aaa\",\"bbbb\"代表替换以后新的元素\n*/</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bbb'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ccc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [100, 'aaa', 'bbb', 'ccc', 500];</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>扩展第一种情况</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    在上面的代码里面，我们可以看从，第一个参数代表开始索引，第二个参数代表要替换的元素个数\n    这个时候，如果我们只是替换元素出来而不向里面添加元素，这个时候这个过程就相当于删除过程\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>扩展第二种情况</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[100,200]</span>\n<span class=\"token comment\">// 从索引2开始，后面的全部删掉</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>扩展第三种情况</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">向数组的特定位置添加元素\n\n<span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"曾七\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王八\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//现在请将\"王五\"，\"赵六\"插入到”李四“与”曾七“的中间</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n    索引2的位置，没有替换元素，而是添加了两个元素\n    原来索引2的“曾七”变成了添加的“王五”\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>indexOf() 方法：查询数组当中某个元素的索引的位置，默认从0的索引开始查询，一直查询到最后一个，如果找到多个，则返回第一个的位置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"曾七\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n如果找到这个元素就得到这个元素所在的索引值，如果没有找到则得到一个“<span class=\"token operator\">-</span><span class=\"token number\">1</span>”<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>slice() 方法：提取现有数组里面的元素，得到一个新的数组，它不会影响到原来的数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span>\n第一个参数代表起始索引\n第二个参数代表结束索引的前一个\n\n<span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 起始索引1 元素为\"b\"，结束索引4 元素为\"e\"，\"e\"的前一个为\"d\"</span>\n<span class=\"token comment\">// arr2的结束就是 [\"b\",\"c\",\"d\"]  </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">如果start是负数，那么规定从数组尾部开始算起。也就是说，<span class=\"token operator\">-</span><span class=\"token number\">1</span> 指最后一个元素，<span class=\"token operator\">-</span><span class=\"token number\">2</span> 指倒数第二个元素，以此类推。\n如果end是负数，那么规定的是从数组尾部开始算起的参数。\n\n<span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c d e f</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [] 得不到结果，在我开始之前了</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['c']</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"数组练习\"><a href=\"#数组练习\" class=\"headerlink\" title=\"数组练习\"></a>数组练习</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">给你一个数组<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>，请把这个数组变成手机号：<span class=\"token number\">18627994826</span>\n\n<span class=\"token keyword\">var</span> telArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> tel <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>telArr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我的手机号'</span><span class=\"token punctuation\">,</span> tel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"循环得到数组里面的每一个元素\"><a href=\"#循环得到数组里面的每一个元素\" class=\"headerlink\" title=\"循环得到数组里面的每一个元素\"></a>循环得到数组里面的每一个元素</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>首先经过学习我们已经知道数组元素的取值与赋值都是通过索引来进行，如果我们需要把数组里面的每个元素都取到，那么我们就要把里面的每个索引都拿一次</p>\n</blockquote>\n<blockquote>\n<p>我们也都知道索引是从0开始，到length-1结束，所以我们要在这个范围里面不停的去拿，这个地方我们做了一件重复的事情，就需要for循环了</p>\n</blockquote>\n<h5 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h5><p>经过分析，我们知道循环的起始条件就应该是数组的初始索引值为0，结束条件就是数组的最大索引length-1</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//循环生成，i是从0开始 到length-1  指的是数组的每一个索引值</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// i&lt;=arr.length-1可以换成i&lt;arr.length</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 0-4 </span>\n    <span class=\"token comment\">// i 代表数组里面的每一项索引</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1-5</span>\n<span class=\"token punctuation\">&#125;</span>\n\n上面的<span class=\"token keyword\">for</span><span class=\"token operator\">...</span><span class=\"token keyword\">in</span> 也是一种数组的遍历方式<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"数组的迭代方法\"><a href=\"#数组的迭代方法\" class=\"headerlink\" title=\"数组的迭代方法\"></a>数组的迭代方法</h4><p>数组可以使用第三方的方式来遍历里面的元素（for或for…in）,同时也可以使用数组自带的方法来进行遍历</p>\n<ol>\n<li><p>forEach 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// item代表当前元素</span>\n    <span class=\"token comment\">// index代表当前索引 </span>\n    <span class=\"token comment\">// arr代表当前正在遍历的数组</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">1.</span>数组的forEach回调函数中写入执行代码段就可以\n<span class=\"token number\">2.</span>这里回调函数有三个参数，第一个 表示数组的每一个值，第二个表示下标，第三个表示当前数组\n<span class=\"token number\">3.</span>注意forEach 不能使用<span class=\"token keyword\">break</span>与<span class=\"token keyword\">continue</span>等方法终止遍历<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>map 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">map 会为数组的每一个值去执行代码块，对返回的结果组成一个数组，作为整个遍历返回的值\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> item<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 0.5, 1, 1.5, 2]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>filter 过滤方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">filter对数组中的每一项运行给定函数，返回该函数符合要求的项组成的数组\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 通过找到当前的index索引和item索引相同，就说明是同一个元素，如果不相同就是重复的元素</span>\n    <span class=\"token comment\">// index: 0 1 2 3 4</span>\n    <span class=\"token comment\">// arr.indexOf(item): 0 1 1 3 4 </span>\n    <span class=\"token comment\">//因为通过indexOf方法查询到了两个相同的元素3，这个时候返回第一个的位置 1</span>\n    <span class=\"token comment\">// filter直接过滤掉了我们重复索引的元素3，因此得到了一个去重的数组</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,3,4,5]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>some 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">这个遍布方法也有一个返回值，它的返回是布尔类型\n\nsome方法类似于 <span class=\"token operator\">||</span> 的逻辑语句判断，会为数组每一个值执行判断语句，只要有一个满足条件，整个遍历的返回值就为<span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">var</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr4 <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr4'</span><span class=\"token punctuation\">,</span> arr4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>every 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">该方法与上面的some方法相对，相当于执行了且的运算\n\nevery的遍历会对数组的每一个值执行回调函数中的语句，只有在每一个值都为<span class=\"token boolean\">true</span>时，整个遍历返回值为<span class=\"token boolean\">true</span>，否则为<span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">var</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr4 <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr4'</span><span class=\"token punctuation\">,</span> arr4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"归并方法-reduce\"><a href=\"#归并方法-reduce\" class=\"headerlink\" title=\"归并方法 reduce()\"></a>归并方法 reduce()</h4><p>归并方法<br>归并方法也是迭代方法的一种，但也不完全的迭代方法，它的回调方法里面有四个参数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\narr：表示原数组；\n\nprev：表示上一次调用回调时的返回值，或者初始值 init<span class=\"token punctuation\">;</span>\n\ncur：表示当前正在处理的数组元素；\n\nindex：表示当前正在处理的数组元素的索引，若提供 init 值，则索引为<span class=\"token number\">0</span>，否则索引为<span class=\"token number\">1</span>；\n\ninit：表示初始值。\n\n常用参数：prev 和 cur<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>实例：<br>先提供一个数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"求数组项之和\"><a href=\"#求数组项之和\" class=\"headerlink\" title=\"求数组项之和\"></a>求数组项之和</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 34</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于传入了初始值0，所以开始时prev的值为0，cur的值为数组的第一项，相加之后返回值为3，作为下一轮回调的prev值，然后再继续与下一个数组项相加，以此类推，直至完成所有数组项的和并返回。</p>\n<hr>\n<h4 id=\"排序方法-sort\"><a href=\"#排序方法-sort\" class=\"headerlink\" title=\"排序方法 sort()\"></a>排序方法 sort()</h4><p>sort() 方法能够根据一定条件对数组元素进行排序。</p>\n<p>如果调用 sort() 方法时没有传递参数，则按字母顺序对数组中的元素进行排序。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sortA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nsortA<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sortA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a','b','c','d']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>使用 sort() 方法时，应该注意下面几个问题。</p>\n<ol>\n<li><p>所谓的字母顺序，实际上是根据字母在字符编码表中的顺序进行排列的，每个字符在字符表中都有一个唯一的编号。</p>\n</li>\n<li><p>如果元素不是字符串，则 sort() 方法试图把数组元素都转换成字符串，以便进行比较。</p>\n</li>\n<li><p>sort() 方法将根据元素值进行逐位比较，而不是根据字符串的个数进行排序。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"aba\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"baa\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aab\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  定义数组\na<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//按字母顺序对元素进行排序</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//返回数组[aab,aba,baa]</span>\n\n<span class=\"token comment\">/* 在排序时，首先比较每个元素的第 1 个字符，在第 1 个字符相同的情况下，再比较第 2 个字符，以此类推。 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>在任何情况下，数组中 undefined 的元素都被排序在末尾。</p>\n</li>\n<li><p>sort() 方法是在原数组基础上进行排序操作的，不会创建新的数组。<br>sort() 方法不仅按字母顺序进行排序，还可以根据其他顺序执行操作。<br>如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p>\n<ul>\n<li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</li>\n<li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。</li>\n<li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</li>\n<li>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。<br>比较函数格式如下：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>           \n    <span class=\"token comment\">// 按某种排序标准进行比较, a 小于 b</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n要比较数字而非字符串，比较函数可以简单的以a-b，如下的函数将会将数组升序排列（由小大大）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">compareNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// a - b &lt; 0  顺序a b 说明a小 = 2 - 4 顺序 2 4</span>\n<span class=\"token comment\">// a - b > 0  顺序b a 说明b小 = 4 - 2 顺序 2 4</span>\n<span class=\"token comment\">// a - b 就是小的值在前，用来做升序排列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\nsort 方法可以使用函数表达式方便书写为：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4, 5]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n降序处理（由大到小）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">compareNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// b - a &lt; 0 顺序 a b 说明a大 = 2 - 4 顺序 4 2</span>\n<span class=\"token comment\">// b - a > 0 顺序 b a 说明b大 = 4 - 2 顺序 4 2</span>\n<span class=\"token comment\">// b - a 就是大的值在前，用来做降序排列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">冒泡排序：\n<span class=\"token keyword\">var</span> ltArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>ltArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>ltArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ltArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> ltArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            temp <span class=\"token operator\">=</span> ltArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            ltArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ltArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            ltArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">/* if(ltArr[i] &lt; ltArr[j])&#123;\n            temp = ltArr[i];\n            ltArr[i] = ltArr[j];\n            ltArr[j] = temp;\n        &#125; */</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ltArr'</span><span class=\"token punctuation\">,</span> ltArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><blockquote>\n<p>js在严格的意义上面来说是没有二维数组的概念，它只有多维数组概念</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name0<span class=\"token operator\">=</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> name1<span class=\"token operator\">=</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> name2<span class=\"token operator\">=</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> name3<span class=\"token operator\">=</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//现在我们有四人变量，这样写义很麻烦 ，所以我们可以通过数组的形式来定义，集中管理</span>\n<span class=\"token keyword\">var</span> names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n通过数组，我们可以将上面的变量数据做集中式管理\n\n<span class=\"token comment\">//----------------------------</span>\n\n<span class=\"token keyword\">var</span> age0<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age1<span class=\"token operator\">=</span><span class=\"token number\">19</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age2<span class=\"token operator\">=</span><span class=\"token number\">29</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age3<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//现在又有了四个变量，我们这样定也很麻烦 ，这个时候，又可能通过数组</span>\n<span class=\"token keyword\">var</span> ages<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span>\n\n当我们如果还需要将学生的性别，籍贯等信息也保存下来，做集中式管理的时候，又需要再次定义两个数组，\n但是我们都知道，这些数据在这里都是用于形容学生信息的，当变量名过多的时候，我们就不好管理\n\n<span class=\"token comment\">//----------------------------</span>\n\n<span class=\"token keyword\">var</span> stus<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>names<span class=\"token punctuation\">,</span>ages<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n现在我们将学生的姓名和年纪做了一次数组的组合，这个时候我们就可以通过数组名stus去管理这个班级的数据了\n\n<span class=\"token comment\">//上面的代码等同于</span>\n<span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"二维数组的定义\"><a href=\"#二维数组的定义\" class=\"headerlink\" title=\"二维数组的定义\"></a>二维数组的定义</h4><ol>\n<li><p>通过 <strong>Array</strong> 的方法来定义</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstus<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstus<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 上面的方式我们采用的是一步一步去定义的方式 ，先定义一维的普通的数组，然后里面的值又是一个数组</span>\n\n<span class=\"token comment\">//----------------------------</span>\n<span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//-----------------------------</span>\n<span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//-----------------------------</span>\n<span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//-----------------------------</span>\n<span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>通过 <strong>[ ]</strong> 来定义</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"二维数组的取值和赋值\"><a href=\"#二维数组的取值和赋值\" class=\"headerlink\" title=\"二维数组的取值和赋值\"></a>二维数组的取值和赋值</h4><p>在数组里面，我们的取值方式是通过数组名[索引]来取值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 如果我想取到里面的“李四”，以及 29 应该怎么取？</span>\n<span class=\"token keyword\">var</span> stus<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> names <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取到了stus里面的第一个值，也就是第一个数组</span>\n<span class=\"token keyword\">var</span> name1 <span class=\"token operator\">=</span> names<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 再通过数组取值的方式去取它里面的“李四”</span>\n\n<span class=\"token comment\">//----------------------------</span>\n二维数组的取值我们划分成了两部分\n\n<span class=\"token keyword\">var</span> name1 <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// “李四”</span>\n<span class=\"token keyword\">var</span> age1 <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 29</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以把取值与赋值看成一个表（先行后列）</p>\n<p>JS为什么会存在二维数组的概念是因为JS如果在内部要实现表的数据结构是通过二维数组来进行的，但是JS又不是一个完整意义上的表</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stus<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n在上面的数组里面，我们可以看到姓名在这里是四个元素，而年龄则是三个，\n在其它的编程语言这是不允许的，但是在<span class=\"token constant\">JS</span>里面，因为<span class=\"token constant\">JS</span>没有限定数组的长度，所以这是正常的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这种也是可以的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>JS没有严格意义上面的二维数组，它有只有多维</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> infos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"小李\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"老李\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 现在如果要取“小李”</span>\n<span class=\"token keyword\">var</span> names <span class=\"token operator\">=</span> info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// infos长度结果</span>\ninfos<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>思考？</strong><br>现有如下数组，请遍历出数组当中的所有元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> infos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张金\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张民龙\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"邓俊峰\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"方振锋\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"杨欢\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"杜金雪\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"陈昭文\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"兰砣\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"胡定超\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"甘才志\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">infos<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        item<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                item<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> \n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><blockquote>\n<p>什么是数组？通过字面的意义直面理解数组就是把数据组合在一起</p>\n</blockquote>\n<p>JavaScript里面的数定义:</p>\n<p><strong>数组是存放一系列数据的集合</strong></p>","more":"<hr>\n<h4 id=\"数组的定义\"><a href=\"#数组的定义\" class=\"headerlink\" title=\"数组的定义\"></a>数组的定义</h4><h5 id=\"第一种方式Array\"><a href=\"#第一种方式Array\" class=\"headerlink\" title=\"第一种方式Array\"></a>第一种方式Array</h5><p>这一种方式，我们可以直接使用JS的内置对象Array来进行</p>\n<p>在使用这一种方式的时候，它非常简单，如下所示就可以了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这样我们就创建了一个数组nums</span>\n\n在上面的代码里面，我们看到了一个关键字 <span class=\"token keyword\">new</span>\n我们在控制台打印出nums的时候，我们会看到有一个 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ，这是数组表示形式上的特点<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过上面的方式创建的数组，我们会发现它是一个空的数组，它是一个空的数组里面没有任何元素，所以，我们可以把这个数组的长度理解为0</p>\n<p><strong>小技巧：</strong> 一个数组如果要得到它的长度，我们可以使用一个属性<strong>数组.length</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这个时候会得到数字0，因为数组的长度为0，而length则代表这个数组的长度</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>在我们定义数组的时候，我们还可以直接就定义数组的长度</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 我们会得到一个长度为5的数组</span>\nnums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到结果为5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：</strong><br>创建数组如果要确定长度，那么你放进去的只可能是正整数，不能是小数，也不能是负数，并且只能有一个数字</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误的定义方式，会提示“非法的数组长度”</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误的定义方式，会提示“非法的数组长度”</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当我们在定义数组的时候，如果已经确定了数组里面的内容 ，我们可以直接的把数组内容放进去</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> f<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"哈密瓜\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"草莓\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"梨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 现在我们定义数组的时候，我就直接把里面放了5个水果</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>当我们去通过Array定义数组的时候，最常见的三种情况就是上面的三种情况：</p>\n<ol>\n<li>第一种直接定义一个空数组，这个空数组的长度为0，</li>\n<li>第二种定义了一个有长度的数组，但这个数组里面每个值都是空的，</li>\n<li>第三个则在定义数组的时候，就把需要放到数组里面的元素直接丢进去了<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"哈密瓜\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"草莓\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"梨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>细节注意：</strong><br>我们要确定一点，new Array(“值”)放一个值的时候，它首先会通过一次typeof 值的检测，如果这个值是number类型，再去判断这个值是否是正整数，如果是，则表示数组定义的长度，否则就是数组的值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//代表定义数组，直接把\"5\"放进去</span>\n<span class=\"token comment\">/*\n\ttypeof \"5\"  得到\"string\"  不是number类型 ，所以它代表数组里面的值\n*/</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//代表定义一个长度为5的数组</span>\n<span class=\"token comment\">/*\n\ttypeof 5 得到\"number\"类型 ，然后判断是否大于或等于0，第三步是否是整数\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h5 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式 []\"></a>第二种方式 []</h5><p>当我们通过第一种方式定义好数组以后，我们在控制打输出这个数组，我们会发现数组使用的是中括号 [] 来表示,通过这点我们在以后定义数组的时候可以直接使用中括号来定义</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nums<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> nums2<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 这一种方式就相当于定义了一个空的数组，上面的两行代码最终得到的结果是一样的 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们也可以像第一种一样，直接去定义数组里面的值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"哈密瓜\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"草莓\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"梨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"哈密瓜\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"草莓\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"梨\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n可以理解为：<span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>小细节注意：</strong></p>\n<p>在我们使用Array去定义数组的时候，我们可以直接定义数组的长度</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这代表定义了一个数组，它的长度为5</span>\na<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到的结果是5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>但是我们在通过[]去定义数组的时候，不能够直接定义数组的长度</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这不代表数组的长度。而代表数组里面有一个值，这个值是5</span>\nb<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//得到结果1  里面有个元素是5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>==<strong>解决方案：</strong>==</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">我们都知道数组的长度是使用length来表示的，现在我们就通过它来解决\n\n<span class=\"token comment\">//第一种定义的情况</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//如果转化成第二种定义情况</span>\n<span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//定义了一个长度为0的数组</span>\nb<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//重新设定数组的长度为5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"JS数组与其他变成语言的异同\"><a href=\"#JS数组与其他变成语言的异同\" class=\"headerlink\" title=\"JS数组与其他变成语言的异同\"></a>JS数组与其他变成语言的异同</h4><h5 id=\"数组的取值与赋值相同\"><a href=\"#数组的取值与赋值相同\" class=\"headerlink\" title=\"数组的取值与赋值相同\"></a>数组的取值与赋值相同</h5><ol>\n<li>JS数组的取值与赋值跟其它的编程言是一样的，它们都是通过下标取值与赋值（下标也叫索引，可以把它理解书本上面的页码，通过索引，可以快速的定位到数组里面的值）</li>\n<li>JS数组与其它编程语言数组一样，它的索引（下标）是从0开始的，它们的取值与赋值都是 <strong>数组[索引值]</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'苹果'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'香蕉'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'梨'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//苹果</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//香蕉</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//梨</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'哈密瓜'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//把值赋值到数组的第三个位置</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//得到['苹果', '香蕉', '哈密瓜'];</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"数据类型的区别\"><a href=\"#数据类型的区别\" class=\"headerlink\" title=\"数据类型的区别\"></a>数据类型的区别</h5>在其它的编程语言里面，数组里面的值使用的是同一个数组类型，<strong>而在JS的数组里面，里面的值的数据类型可以不相同</strong><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//现在上面的数组里面，放了多个值，这些值包含了我们JS里面的5种基本数据类型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n把上面的代码在控制台运行以后，没有报错，并且我们展开数组以后发现所有的值都存进去了，所以我们可以得出结论：<strong>JS数组里面值的数据类型 ，我们可以不相同</strong></li>\n</ol>\n<h5 id=\"数组长度与最大索引的区别\"><a href=\"#数组长度与最大索引的区别\" class=\"headerlink\" title=\"数组长度与最大索引的区别\"></a>数组长度与最大索引的区别</h5><p>在其它的编程语言里面，数组的长度决定了最大索引，例如如果在C/C++/Java等编程语言（强类型语言）里面，如果数组的长度为6，那么它最大的索引应该是5（长度决定最大索引）</p>\n<p><strong>在JavaScript里面的数组，最大索引决定了数组当前的长度</strong></p>\n<blockquote>\n<p>通过上面的相同点与不同点的结论，我们可以得出一个，JS数组不限定长度，也不限制数据类型!(正是因为这个特点，所以JS把数组也当成了集合)</p>\n</blockquote>\n<hr>\n<h4 id=\"数组类型的检测\"><a href=\"#数组类型的检测\" class=\"headerlink\" title=\"数组类型的检测\"></a>数组类型的检测</h4><p>我们可以通过typeof关键字来检测数据类型，typeof 只能检测了基本的数据类型与对象类型 ，而不能够具体的检测出数组</p>\n<p>如果判断这个变量是否是数组，我们还需要做一次检测</p>\n<h5 id=\"使用-instanceof-关键字\"><a href=\"#使用-instanceof-关键字\" class=\"headerlink\" title=\"使用 instanceof 关键字\"></a>使用 instanceof 关键字</h5><p>instanceof 主要的作用与 typeof 相似，typeof 主要用于检测基本数据类型，而instanceof主要用于检测对象类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnum <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断num是否是Array new出来的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果， <strong>变量 instanceof Array</strong> 得到的值为true，则代表它是一个数组，否则就不是一个数组</p>\n</blockquote>\n<h5 id=\"Array-isArray-检测\"><a href=\"#Array-isArray-检测\" class=\"headerlink\" title=\"Array.isArray() 检测\"></a>Array.isArray() 检测</h5><p>除了通过之前的instanceof关键字以外，我们还可以使用自带的方法去检测</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断num是否为数组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果上面的结果为true，则说明num是数组，如果得到false，则说明num不是数组</p>\n</blockquote>\n<p>当我们检测出一个变量为数组以后，我们就可以让这个数组来解决我们工作当中遇到的问题，例如将元素添加到数组，删除数组里面的值，遍历数组等方式</p>\n<hr>\n<h4 id=\"数组的取值与赋值\"><a href=\"#数组的取值与赋值\" class=\"headerlink\" title=\"数组的取值与赋值\"></a>数组的取值与赋值</h4><p>当我们创建一个数组以后，这个数组里面可以存放任意多个值，这些数组里面的值，我们叫“元素”</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在上面的stu数组里面，我们可以把\"张三，李四，王五\"这三个值叫元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>当一个数组好了以后，我们可以通过下标（索引）来进行赋值与赋值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">stu<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//取出了第一个元素的值  \"张三\"</span>\nstu<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"丁六\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//对数组的第一个元素进行赋值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//如果我现在想在刚刚的数组后面添加一个元素（”哈哈“）</span>\n<span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> length<span class=\"token operator\">=</span>stu<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//取到数组的长度 length = 3</span>\nstu<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"哈哈\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// stu[3] 就是第四个值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>++如果向前面添加元素，就会很麻烦 ，所以，我们除了使用数组的下标来取值或赋值以外，我们还需要使用一些特殊的技术来对数组的元素进行添加或删除等相关操作++</p>\n<blockquote>\n<p>数组提供了一系列的方法来进行操作，这些方法是提供给用户的使用的，可以提高我们操作数组的简便程度</p>\n</blockquote>\n<hr>\n<h4 id=\"数组的常用方法与属性\"><a href=\"#数组的常用方法与属性\" class=\"headerlink\" title=\"数组的常用方法与属性\"></a>数组的常用方法与属性</h4><blockquote>\n<p>方法：用于使用（调用）</p>\n</blockquote>\n<blockquote>\n<p>属性：用于描述一些事物的特征（特性）</p>\n</blockquote>\n<ol>\n<li><p>length 属性：用于获取或设置数组的长度</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnum<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>push() 方法：直接向当前的数组后面去追加新的元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'赵六'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把赵六添加到当前数组的最后面去</span>\n\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'哈哈'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'嘻嘻'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以同时添加多个元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>pop() 方法：移除当前数组的最后一个元素，并且可以得到这个元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 王五</span>\n<span class=\"token comment\">//上面的代码执行了两个过程</span>\n<span class=\"token comment\">//第一个过程是移除了stu数组的最后一个元素“王五”</span>\n<span class=\"token comment\">//第二个过程，把移出来的这个元素”李昊“赋值给了变量a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>unshift() 方法：在数组的最前面去添加元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">'老李'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在数组的最前面添加元素\"老李\"</span>\n\n<span class=\"token comment\">//unshift与push一样，都可以一次性添加多个元素</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小李\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>shift() 方法：在数组的前面移除一个元素，并且可以得到这个元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span>stu<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//张三</span>\n<span class=\"token comment\">//上面的代码也执行了两个过程 </span>\n<span class=\"token comment\">//第一个过程是把最前面的“张三”移出来</span>\n<span class=\"token comment\">//第二个过程则是把移出来的“张三”赋值给了变量a</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>reverse()方法：该方法会将当前数组里面的元素进行反转</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stu<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstu<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这个时候，里面的数组会进行反转</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>concat() 方法：将多个数组里面的元素进行合并，然后得到一个心得数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr3<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> _a<span class=\"token operator\">=</span>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//它将arr1与arr2进行相连，得到一个新的数组_a，不影响原来的数组</span>\n<span class=\"token keyword\">var</span> _b <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">,</span>arr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//它也可以同时连接多个数组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>toString() 方法：该方法讲数组转换成字符串，里面的原则用“逗号” <strong>,</strong> 来隔开</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"a,b,c\";   </span>\n<span class=\"token keyword\">var</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//\"1,2,3,4,5\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>join() 方法：将元素转换成字符串，然后按指定的符号隔开，如果未指定符号，则默认使用逗号 , 隔开</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"a#b#c\";</span>\n<span class=\"token keyword\">var</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//\"1,2,3,4,5\";  不添加符号，则默认使用逗号来进行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>splice() 方法：替换数组里面的元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bbb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [100, 'aaa', 'bbb', 400, 500]</span>\n<span class=\"token comment\">/*\n\t第一个1代表开始替换的索引\n\t第二个2代表替换元素的个数\n\t后面的\"aaa\",\"bbbb\"代表替换以后新的元素\n*/</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bbb'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ccc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [100, 'aaa', 'bbb', 'ccc', 500];</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>扩展第一种情况</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    在上面的代码里面，我们可以看从，第一个参数代表开始索引，第二个参数代表要替换的元素个数\n    这个时候，如果我们只是替换元素出来而不向里面添加元素，这个时候这个过程就相当于删除过程\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>扩展第二种情况</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[100,200]</span>\n<span class=\"token comment\">// 从索引2开始，后面的全部删掉</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>扩展第三种情况</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">向数组的特定位置添加元素\n\n<span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"曾七\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王八\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//现在请将\"王五\"，\"赵六\"插入到”李四“与”曾七“的中间</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n    索引2的位置，没有替换元素，而是添加了两个元素\n    原来索引2的“曾七”变成了添加的“王五”\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>indexOf() 方法：查询数组当中某个元素的索引的位置，默认从0的索引开始查询，一直查询到最后一个，如果找到多个，则返回第一个的位置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"曾七\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n如果找到这个元素就得到这个元素所在的索引值，如果没有找到则得到一个“<span class=\"token operator\">-</span><span class=\"token number\">1</span>”<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>slice() 方法：提取现有数组里面的元素，得到一个新的数组，它不会影响到原来的数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span>\n第一个参数代表起始索引\n第二个参数代表结束索引的前一个\n\n<span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 起始索引1 元素为\"b\"，结束索引4 元素为\"e\"，\"e\"的前一个为\"d\"</span>\n<span class=\"token comment\">// arr2的结束就是 [\"b\",\"c\",\"d\"]  </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">如果start是负数，那么规定从数组尾部开始算起。也就是说，<span class=\"token operator\">-</span><span class=\"token number\">1</span> 指最后一个元素，<span class=\"token operator\">-</span><span class=\"token number\">2</span> 指倒数第二个元素，以此类推。\n如果end是负数，那么规定的是从数组尾部开始算起的参数。\n\n<span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c d e f</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [] 得不到结果，在我开始之前了</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['c']</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"数组练习\"><a href=\"#数组练习\" class=\"headerlink\" title=\"数组练习\"></a>数组练习</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">给你一个数组<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>，请把这个数组变成手机号：<span class=\"token number\">18627994826</span>\n\n<span class=\"token keyword\">var</span> telArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> tel <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>telArr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我的手机号'</span><span class=\"token punctuation\">,</span> tel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"循环得到数组里面的每一个元素\"><a href=\"#循环得到数组里面的每一个元素\" class=\"headerlink\" title=\"循环得到数组里面的每一个元素\"></a>循环得到数组里面的每一个元素</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>首先经过学习我们已经知道数组元素的取值与赋值都是通过索引来进行，如果我们需要把数组里面的每个元素都取到，那么我们就要把里面的每个索引都拿一次</p>\n</blockquote>\n<blockquote>\n<p>我们也都知道索引是从0开始，到length-1结束，所以我们要在这个范围里面不停的去拿，这个地方我们做了一件重复的事情，就需要for循环了</p>\n</blockquote>\n<h5 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h5><p>经过分析，我们知道循环的起始条件就应该是数组的初始索引值为0，结束条件就是数组的最大索引length-1</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//循环生成，i是从0开始 到length-1  指的是数组的每一个索引值</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// i&lt;=arr.length-1可以换成i&lt;arr.length</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 0-4 </span>\n    <span class=\"token comment\">// i 代表数组里面的每一项索引</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1-5</span>\n<span class=\"token punctuation\">&#125;</span>\n\n上面的<span class=\"token keyword\">for</span><span class=\"token operator\">...</span><span class=\"token keyword\">in</span> 也是一种数组的遍历方式<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"数组的迭代方法\"><a href=\"#数组的迭代方法\" class=\"headerlink\" title=\"数组的迭代方法\"></a>数组的迭代方法</h4><p>数组可以使用第三方的方式来遍历里面的元素（for或for…in）,同时也可以使用数组自带的方法来进行遍历</p>\n<ol>\n<li><p>forEach 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// item代表当前元素</span>\n    <span class=\"token comment\">// index代表当前索引 </span>\n    <span class=\"token comment\">// arr代表当前正在遍历的数组</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">1.</span>数组的forEach回调函数中写入执行代码段就可以\n<span class=\"token number\">2.</span>这里回调函数有三个参数，第一个 表示数组的每一个值，第二个表示下标，第三个表示当前数组\n<span class=\"token number\">3.</span>注意forEach 不能使用<span class=\"token keyword\">break</span>与<span class=\"token keyword\">continue</span>等方法终止遍历<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>map 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">map 会为数组的每一个值去执行代码块，对返回的结果组成一个数组，作为整个遍历返回的值\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> item<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 0.5, 1, 1.5, 2]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>filter 过滤方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">filter对数组中的每一项运行给定函数，返回该函数符合要求的项组成的数组\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 通过找到当前的index索引和item索引相同，就说明是同一个元素，如果不相同就是重复的元素</span>\n    <span class=\"token comment\">// index: 0 1 2 3 4</span>\n    <span class=\"token comment\">// arr.indexOf(item): 0 1 1 3 4 </span>\n    <span class=\"token comment\">//因为通过indexOf方法查询到了两个相同的元素3，这个时候返回第一个的位置 1</span>\n    <span class=\"token comment\">// filter直接过滤掉了我们重复索引的元素3，因此得到了一个去重的数组</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,3,4,5]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>some 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">这个遍布方法也有一个返回值，它的返回是布尔类型\n\nsome方法类似于 <span class=\"token operator\">||</span> 的逻辑语句判断，会为数组每一个值执行判断语句，只要有一个满足条件，整个遍历的返回值就为<span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">var</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr4 <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr4'</span><span class=\"token punctuation\">,</span> arr4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>every 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">该方法与上面的some方法相对，相当于执行了且的运算\n\nevery的遍历会对数组的每一个值执行回调函数中的语句，只有在每一个值都为<span class=\"token boolean\">true</span>时，整个遍历返回值为<span class=\"token boolean\">true</span>，否则为<span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">var</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr4 <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr4'</span><span class=\"token punctuation\">,</span> arr4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"归并方法-reduce\"><a href=\"#归并方法-reduce\" class=\"headerlink\" title=\"归并方法 reduce()\"></a>归并方法 reduce()</h4><p>归并方法<br>归并方法也是迭代方法的一种，但也不完全的迭代方法，它的回调方法里面有四个参数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\narr：表示原数组；\n\nprev：表示上一次调用回调时的返回值，或者初始值 init<span class=\"token punctuation\">;</span>\n\ncur：表示当前正在处理的数组元素；\n\nindex：表示当前正在处理的数组元素的索引，若提供 init 值，则索引为<span class=\"token number\">0</span>，否则索引为<span class=\"token number\">1</span>；\n\ninit：表示初始值。\n\n常用参数：prev 和 cur<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>实例：<br>先提供一个数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"求数组项之和\"><a href=\"#求数组项之和\" class=\"headerlink\" title=\"求数组项之和\"></a>求数组项之和</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 34</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于传入了初始值0，所以开始时prev的值为0，cur的值为数组的第一项，相加之后返回值为3，作为下一轮回调的prev值，然后再继续与下一个数组项相加，以此类推，直至完成所有数组项的和并返回。</p>\n<hr>\n<h4 id=\"排序方法-sort\"><a href=\"#排序方法-sort\" class=\"headerlink\" title=\"排序方法 sort()\"></a>排序方法 sort()</h4><p>sort() 方法能够根据一定条件对数组元素进行排序。</p>\n<p>如果调用 sort() 方法时没有传递参数，则按字母顺序对数组中的元素进行排序。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sortA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nsortA<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sortA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a','b','c','d']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>使用 sort() 方法时，应该注意下面几个问题。</p>\n<ol>\n<li><p>所谓的字母顺序，实际上是根据字母在字符编码表中的顺序进行排列的，每个字符在字符表中都有一个唯一的编号。</p>\n</li>\n<li><p>如果元素不是字符串，则 sort() 方法试图把数组元素都转换成字符串，以便进行比较。</p>\n</li>\n<li><p>sort() 方法将根据元素值进行逐位比较，而不是根据字符串的个数进行排序。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"aba\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"baa\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aab\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  定义数组\na<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//按字母顺序对元素进行排序</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//返回数组[aab,aba,baa]</span>\n\n<span class=\"token comment\">/* 在排序时，首先比较每个元素的第 1 个字符，在第 1 个字符相同的情况下，再比较第 2 个字符，以此类推。 */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>在任何情况下，数组中 undefined 的元素都被排序在末尾。</p>\n</li>\n<li><p>sort() 方法是在原数组基础上进行排序操作的，不会创建新的数组。<br>sort() 方法不仅按字母顺序进行排序，还可以根据其他顺序执行操作。<br>如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p>\n<ul>\n<li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</li>\n<li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。</li>\n<li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</li>\n<li>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。<br>比较函数格式如下：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>           \n    <span class=\"token comment\">// 按某种排序标准进行比较, a 小于 b</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n要比较数字而非字符串，比较函数可以简单的以a-b，如下的函数将会将数组升序排列（由小大大）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">compareNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// a - b &lt; 0  顺序a b 说明a小 = 2 - 4 顺序 2 4</span>\n<span class=\"token comment\">// a - b > 0  顺序b a 说明b小 = 4 - 2 顺序 2 4</span>\n<span class=\"token comment\">// a - b 就是小的值在前，用来做升序排列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\nsort 方法可以使用函数表达式方便书写为：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4, 5]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n降序处理（由大到小）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">compareNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// b - a &lt; 0 顺序 a b 说明a大 = 2 - 4 顺序 4 2</span>\n<span class=\"token comment\">// b - a > 0 顺序 b a 说明b大 = 4 - 2 顺序 4 2</span>\n<span class=\"token comment\">// b - a 就是大的值在前，用来做降序排列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">冒泡排序：\n<span class=\"token keyword\">var</span> ltArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>ltArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>ltArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ltArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> ltArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            temp <span class=\"token operator\">=</span> ltArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            ltArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ltArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            ltArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">/* if(ltArr[i] &lt; ltArr[j])&#123;\n            temp = ltArr[i];\n            ltArr[i] = ltArr[j];\n            ltArr[j] = temp;\n        &#125; */</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ltArr'</span><span class=\"token punctuation\">,</span> ltArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><blockquote>\n<p>js在严格的意义上面来说是没有二维数组的概念，它只有多维数组概念</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name0<span class=\"token operator\">=</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> name1<span class=\"token operator\">=</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> name2<span class=\"token operator\">=</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> name3<span class=\"token operator\">=</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//现在我们有四人变量，这样写义很麻烦 ，所以我们可以通过数组的形式来定义，集中管理</span>\n<span class=\"token keyword\">var</span> names<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n通过数组，我们可以将上面的变量数据做集中式管理\n\n<span class=\"token comment\">//----------------------------</span>\n\n<span class=\"token keyword\">var</span> age0<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age1<span class=\"token operator\">=</span><span class=\"token number\">19</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age2<span class=\"token operator\">=</span><span class=\"token number\">29</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age3<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//现在又有了四个变量，我们这样定也很麻烦 ，这个时候，又可能通过数组</span>\n<span class=\"token keyword\">var</span> ages<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span>\n\n当我们如果还需要将学生的性别，籍贯等信息也保存下来，做集中式管理的时候，又需要再次定义两个数组，\n但是我们都知道，这些数据在这里都是用于形容学生信息的，当变量名过多的时候，我们就不好管理\n\n<span class=\"token comment\">//----------------------------</span>\n\n<span class=\"token keyword\">var</span> stus<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>names<span class=\"token punctuation\">,</span>ages<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n现在我们将学生的姓名和年纪做了一次数组的组合，这个时候我们就可以通过数组名stus去管理这个班级的数据了\n\n<span class=\"token comment\">//上面的代码等同于</span>\n<span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"二维数组的定义\"><a href=\"#二维数组的定义\" class=\"headerlink\" title=\"二维数组的定义\"></a>二维数组的定义</h4><ol>\n<li><p>通过 <strong>Array</strong> 的方法来定义</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstus<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstus<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 上面的方式我们采用的是一步一步去定义的方式 ，先定义一维的普通的数组，然后里面的值又是一个数组</span>\n\n<span class=\"token comment\">//----------------------------</span>\n<span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//-----------------------------</span>\n<span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//-----------------------------</span>\n<span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//-----------------------------</span>\n<span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>通过 <strong>[ ]</strong> 来定义</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"二维数组的取值和赋值\"><a href=\"#二维数组的取值和赋值\" class=\"headerlink\" title=\"二维数组的取值和赋值\"></a>二维数组的取值和赋值</h4><p>在数组里面，我们的取值方式是通过数组名[索引]来取值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 如果我想取到里面的“李四”，以及 29 应该怎么取？</span>\n<span class=\"token keyword\">var</span> stus<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> names <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取到了stus里面的第一个值，也就是第一个数组</span>\n<span class=\"token keyword\">var</span> name1 <span class=\"token operator\">=</span> names<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 再通过数组取值的方式去取它里面的“李四”</span>\n\n<span class=\"token comment\">//----------------------------</span>\n二维数组的取值我们划分成了两部分\n\n<span class=\"token keyword\">var</span> name1 <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// “李四”</span>\n<span class=\"token keyword\">var</span> age1 <span class=\"token operator\">=</span> stus<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 29</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以把取值与赋值看成一个表（先行后列）</p>\n<p>JS为什么会存在二维数组的概念是因为JS如果在内部要实现表的数据结构是通过二维数组来进行的，但是JS又不是一个完整意义上的表</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stus<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n在上面的数组里面，我们可以看到姓名在这里是四个元素，而年龄则是三个，\n在其它的编程语言这是不允许的，但是在<span class=\"token constant\">JS</span>里面，因为<span class=\"token constant\">JS</span>没有限定数组的长度，所以这是正常的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> stus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这种也是可以的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>JS没有严格意义上面的二维数组，它有只有多维</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> infos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"小李\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"老李\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 现在如果要取“小李”</span>\n<span class=\"token keyword\">var</span> names <span class=\"token operator\">=</span> info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// infos长度结果</span>\ninfos<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>思考？</strong><br>现有如下数组，请遍历出数组当中的所有元素</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> infos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"张金\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张民龙\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"邓俊峰\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"方振锋\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"杨欢\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"杜金雪\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"陈昭文\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"兰砣\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"胡定超\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"甘才志\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">infos<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        item<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                item<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> \n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl4zbylde0000d3x6fdxqe2zo","category_id":"cl4zd66ag0003d3x64anyftru","_id":"cl4zd66ag0004d3x68sm4761y"},{"post_id":"cl4zbhpq200016px63fd98rei","category_id":"cl4zd66ag0003d3x64anyftru","_id":"cl4zd7o130007d3x6g1637ts2"},{"post_id":"cl4zab0jq0000mcx6auliambz","category_id":"cl4zd66ag0003d3x64anyftru","_id":"cl4zd7u670009d3x62vaj7gl5"},{"post_id":"cl4zab0k10001mcx6f84fco83","category_id":"cl4zd66ag0003d3x64anyftru","_id":"cl4zd8057000cd3x6f0524w2l"},{"post_id":"cl4zdmdq8000gd3x66pgvatgy","category_id":"cl4zd66ag0003d3x64anyftru","_id":"cl4zdn56u000id3x6075uddtf"}],"PostTag":[{"post_id":"cl4zbylde0000d3x6fdxqe2zo","tag_id":"cl4zd715u0005d3x6c8nn58m9","_id":"cl4zd715v0006d3x6942hbmac"},{"post_id":"cl4zab0jq0000mcx6auliambz","tag_id":"cl4zd7u670008d3x636eb0nrs","_id":"cl4zd7u68000ad3x6750y9bc8"},{"post_id":"cl4zab0k10001mcx6f84fco83","tag_id":"cl4zd8056000bd3x6769h0zlj","_id":"cl4zd8057000dd3x64ad6bpno"},{"post_id":"cl4zdmdq8000gd3x66pgvatgy","tag_id":"cl4zdn56t000hd3x6fjmt37pw","_id":"cl4zdn56u000jd3x6cvzs0r5r"}],"Tag":[{"name":"aa","_id":"cl4zcy7wy0001d3x6300g0xxz"},{"name":"基础语法","_id":"cl4zd715u0005d3x6c8nn58m9"},{"name":"函数","_id":"cl4zd7u670008d3x636eb0nrs"},{"name":"条件语句","_id":"cl4zd8056000bd3x6769h0zlj"},{"name":"数组","_id":"cl4zdn56t000hd3x6fjmt37pw"}]}}