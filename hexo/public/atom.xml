<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tiantian&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-29T10:00:00.300Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>tiantian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript - 面向对象</title>
    <link href="http://example.com/2022/06/29/obj/"/>
    <id>http://example.com/2022/06/29/obj/</id>
    <published>2022-06-29T09:52:48.917Z</published>
    <updated>2022-06-29T10:00:00.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h2><p>在程序员眼中，在日常的工作与生活当中，那些能够看得见，摸得着，想象得出来的，就都是对象。只要是物体它就是一个对象。</p><p>如果它是一个对象，那么它必然会具备以下几个特点</p><ol><li><p>对象具备属性</p><p>属性是用于描述对象的特征的</p></li><li><p>对象具备方法</p><p>这些方法可以提供给我们去调用</p></li><li><p>对象应该可以继承</p><p>父级对象的某些方法与属性可以在子级对象里面去继承</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//请同学们将班上学生的信息记录下来</span><span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">var</span> sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token comment">//-----------上面的三个变量都是属于张三的--------------------</span><span class="token keyword">var</span> userName1 <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span><span class="token keyword">var</span> age1 <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span><span class="token keyword">var</span> sex1 <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token comment">//----------上面的三个变量又同于是属于李四-----------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>如果没有对象，那么上面的东西就很难实现归类，并且对数据的管理会非常麻烦，我们迫切需要一个集中式的数据管理方法</p><span id="more"></span><hr><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>对象的创建过程 ，我也可以理解成对象封装过程</p><h4 id="使用键值对创建"><a href="#使用键值对创建" class="headerlink" title="使用键值对创建"></a>使用键值对创建</h4><p>他用键值对来创建对象，是 JS 里面最简单一种对象创建方式，它的语法格式如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 对象名 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>属性名<span class="token number">1</span><span class="token operator">:</span> 属性值<span class="token number">1</span><span class="token punctuation">,</span>属性名<span class="token number">2</span><span class="token operator">:</span> 属性值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上面的创建方式里面， 我们为什么叫键值对创建呢？</p><p>通常情况下，我们会把对象的属性名叫”键(key)”,把对象的属性值叫”值(value)”</p></blockquote><p>我们试着用对象的形式去解决刚刚数据不能集中化管理的问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上面的代码里面，我们可以看到定义了两个变量分别就 stu1 与 stu2，在每个变量里面，我们又给它定义了三个属性分别是 userName,age,sex，这三个东西都是用于描述当前 stu1 或 stu2 这个变量的相当特征</p></blockquote><p>对象除了具备属性以外，它还应该具备方法，所以怎么样在对象当中去创建方法呢</p><p><em>在变量里面，我们变量的数据类型不由前面的 var 来决定，而通过后面赋的值来决定，这句话我同样要应用到对象 的属性上面</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token comment">//把后面的方法赋值给前面的sayHello属性</span><span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好啊，我是一个对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的案例，我们可以看到，对象里面即有属性，也有方法，这个 sayHello 它就是我们的方法</p><p>我如果现在希望这个方法里面打印一句放在，“我叫 userName,我的性别是 sex,我的年龄是 age”(userName,sex,与 age 要换成当前具体的值)</p><p><strong>第一个版本</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好，我叫"</span> <span class="token operator">+</span>stu<span class="token punctuation">.</span>userName <span class="token operator">+</span><span class="token string">",我的性别是"</span> <span class="token operator">+</span>stu<span class="token punctuation">.</span>sex <span class="token operator">+</span><span class="token string">",我的年龄是"</span> <span class="token operator">+</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上面的代码当中，我们已经实现了最基本的要求，但是有没有什么需要注意的地方呢</p><p>如果用户把对象名 stu 换成了 stu1，会有什么结果</p></blockquote><p>当我们把 stu 这个对象名换成 stu1 以后，后面方法 sayHello 里面所有使用了 stu 的地方都需要进行改变。如果我们更改了变量名（对象名）以后，后面所有使用了对象名的地方全部都要同步的进行改变，这个时候，怎么办呢？</p><p><strong>第二个版本</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//我们在这里无非就是要取到【当前对象】下对面的userName等属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好，我叫"</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">+</span><span class="token string">",我的性别是"</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">+</span><span class="token string">",我的年龄是"</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上面的代码当中，我们使用了<strong>this</strong>关键字，在这个对象的花括号时面，这个关键字在这里它指向了<strong>当前的这一个对象</strong></p><p>这个时候，你无论怎么去改变变量名，这个 this 都指向当前这个对象</p></blockquote><p>this 可以看成是一个指针，它指向了谁就是谁，而在上面的代码里面，this 指向了当前对象，所以上面的代码当中的 this 指代的就是当前对象</p><p><em>this 它可以看成指针，那么它就可以指向任何地方，所以 this 的值它是不固定的</em></p><h4 id="对象属性的调用"><a href="#对象属性的调用" class="headerlink" title="对象属性的调用"></a>对象属性的调用</h4><ol><li><p>通过<code>.</code>点调用<br> <code>对象名.属性名</code>这种方式来调用对象里面的属性以获取属性值或调用方法，例如<code>stu.sex</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">stu<span class="token punctuation">.</span>userName<span class="token punctuation">;</span>stu<span class="token punctuation">.</span>sex<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种方式是一种最常见的调用方式，请各位同学注意，它有一个弊端，<strong>如果一个属性是数字或以数字开头的</strong>，那么则不能使用点来调用</p><pre class="line-numbers language-none"><code class="language-none">var stu&#x3D;&#123;    0:&#39;我是第一个&#39;,    1:&#39;我是第二个&#39;,    2:&#39;我是第三个&#39;&#125;stu.0 &#x2F;&#x2F;不可以<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用中括号去调用索引<br> <code>对象名[属性名]</code>这种方式去获取属性里面的值，如<code>stu[&quot;userName&quot;]</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">stu<span class="token punctuation">[</span><span class="token string">"userName"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stu<span class="token punctuation">[</span><span class="token string">"sex"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 这一种方式的调用没有限制，它可以调普通属性，也可以调以数字开头或纯数字的属性</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token operator">:</span> <span class="token string">"我是第一个"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span> <span class="token string">"我是第二个"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">:</span> <span class="token string">"我是第三个"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 我是第一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="对象方法的调用"><a href="#对象方法的调用" class="headerlink" title="对象方法的调用"></a>对象方法的调用</h4><p>对象属性的调用与方法的调用保持一致，只需要在后面添加一个小括号就可以了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token operator">:</span> <span class="token string">"我是第一个"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span> <span class="token string">"我是第二个"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">:</span> <span class="token string">"我是第三个"</span><span class="token punctuation">,</span><span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 这两种都可以</span>stu<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu<span class="token punctuation">[</span><span class="token string">"sayHello"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="使用-Object-来创建对象"><a href="#使用-Object-来创建对象" class="headerlink" title="使用 Object 来创建对象"></a>使用 Object 来创建对象</h3><blockquote><p>Object 是所有对象的祖宗，所有的对象都是由 Object 衍生下来的</p></blockquote><h4 id="直接使用-Object-来创建对象"><a href="#直接使用-Object-来创建对象" class="headerlink" title="直接使用 Object 来创建对象"></a>直接使用 Object 来创建对象</h4><p>在 JavaScript 的内部，有一个内置的对象叫 Object,它主要的作用都是用来创建对象的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的方法是创建数组，现在看下面的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建了一个空对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//这也创建了一下对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在上面的两段代码里面，我们看到了<code>new</code>关键字，<u>new 的本意是指调用当前方法的构造方法去创建一个对象，Object 的构造方法是创建一个空的对象，而 Array 的构造方法就是创建一个空的数组，构造方法执行以后最终返回的都是一个对象</u></p><p>所以上一个方法定义的对象我们可以使用 Object 重新来一次</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//------------------------------------这是之前的方式--------------------------------</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//我们在这里无非就是要取到【当前对象】下对面的userName等属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好，我叫"</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">+</span><span class="token string">",我的性别是"</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">+</span><span class="token string">",我的年龄是"</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//------------------------------------这是现在的方式--------------------------------</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个空对象</span>stu1<span class="token punctuation">.</span>userName <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>stu1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>stu1<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>stu1<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好，我叫"</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">+</span><span class="token string">",我的性别是"</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">+</span><span class="token string">",我的年龄是"</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>stu1<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用stu1的sayHello() 方法</span><span class="token comment">// 这个里面的this也指向你当前跟着的这个属性的对象stu1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-Object-定义对象的特殊属性"><a href="#使用-Object-定义对象的特殊属性" class="headerlink" title="使用 Object 定义对象的特殊属性"></a>使用 Object 定义对象的特殊属性</h4><p>在使用<code>&#123;&#125;</code> 或<code>Object</code>创建对象的时候，我们可以直接添加属性，也可以在后边追加属性，但是这些属性都是最基本的，它没有相关的配置信息（特性），如果想定义这些属性的详细情况，那么则必须要使用更高级别的方式来定义对象的属性了</p><h5 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu1<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span> <span class="token comment">//定义了一个普通的属性sex</span><span class="token comment">//如果我想定义一个学号sid,它不可更改，默认就为H19040001</span><span class="token comment">//defineProperty定义属性，定义哪一个对象的哪一个属性</span><span class="token comment">//数据属性有4个特性，它们又是一个整体对象</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>stu1<span class="token punctuation">,</span> <span class="token string">"sid"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"H19040001"</span><span class="token punctuation">,</span> <span class="token comment">//代表当前属性的默认值</span><span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否可以写  是否可以更改</span><span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//当前这个属性是否可以被delete</span><span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//代表当前属性是否可以被遍历</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// H19040001</span>stu1<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">2222</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>value：代表属性的默认值</li><li>writable：代表当前属性值是否可以修改</li><li>configurable：代表当前属性是否可以被 delete 删除</li><li>enumerable：代表当前属性是否可以被 for…in 去遍历</li></ul><p>上面的四个东西，我们叫做数据属性当中的四个特性</p><h5 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h5><p>所谓的访问器属性其实就是两个方法，分别是 get()与 set()方法，get 代表取值方法，set 代表赋值方法，这两个方法分别是在对属性进行取值与赋值的时候自动调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu2<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">"李"</span><span class="token punctuation">;</span>stu2<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">"天"</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>stu2<span class="token punctuation">,</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我自己在执行取值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我在执行赋值操作"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get</span>stu2<span class="token punctuation">.</span>userName <span class="token operator">=</span> <span class="token string">"小"</span><span class="token punctuation">;</span> <span class="token comment">// set</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>get 方法是用于取值操作的，而 set 方法在这里是用于赋值操作，它们在操作的过程当中，这两个方法会自动执行,如果没有 get 方法说明这个方法不能取值（即使取到了，它了是 undefined）, 如果没有 set 方法，那么它就不能赋值</li><li>访问器属性本身不存储任何值（也不能够进行任何值的存储）</li></ol></blockquote><p>下面请看以下个案例 （ 用于根据年龄来判断字是否成年与未成年 ）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>stu3<span class="token punctuation">,</span> <span class="token string">"isAge"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token comment">// 一个人是否成年通过年龄来判断</span><span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当我们对这个属性取值的时候</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"成年"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"未成年"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"未出生"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu3<span class="token punctuation">.</span>isAge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断一个人是否成年应该是通过年龄来决定，不能够说我直接成年了或未成年</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们通过 Object 去定义数据属性与访问器属性的时候都需要经过<code>Object.defineProperty</code>来进行，但是，如果我们要同时定义多个属性的时候，怎么办呢？</p><h5 id="通过-Object-定义多个特殊属性"><a href="#通过-Object-定义多个特殊属性" class="headerlink" title="通过 Object 定义多个特殊属性"></a>通过 Object 定义多个特殊属性</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>stu1<span class="token punctuation">,</span> <span class="token string">"sid"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"H19040001"</span><span class="token punctuation">,</span><span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>stu1<span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码里面，我们可以看到我通过 <code>Object.defineProperty</code>定义了<code>sex</code>与<code>sid</code>这两个属性,我们现在已经感觉到它非常麻烦 ，每定义一次都要去调用方法。现在它有一个方法与它非常相似</p><p>现在通过这个新的属性以后，我们把上面可以写成如下的方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//同时定义多个特性属性</span>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>stu1<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">sid</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"H19040001"</span><span class="token punctuation">,</span><span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>：</p><p>单个定义数据属性的语法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>对象<span class="token punctuation">,</span> 属性名<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可删</span><span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可写</span><span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可遍历</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">//默认值</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时定义多个数据属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>对象<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>属性名<span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//四个特性</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>属性名<span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//四个特性</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义访问器属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>对象<span class="token punctuation">,</span> <span class="token string">"属性名"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//此处代表取值，返回一个有效值</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//此处的参数v是一个形参，你赋值的时候是什么值，它就是什么值</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//它不能够定义value与writable,一定要记得，访问器属性不包含任何值</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时定义多个访问器属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>对象<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    属性名<span class="token number">1</span>：<span class="token punctuation">&#123;</span>        <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    属性名<span class="token number">2</span>：<span class="token punctuation">&#123;</span>        <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取对象属性的特性"><a href="#获取对象属性的特性" class="headerlink" title="获取对象属性的特性"></a>获取对象属性的特性</h4><blockquote><p>用来描述对象属性特征的我们叫特性</p></blockquote><p>我们可以通过 Object 对象里面的一个内置方法<code>Object.getOwnPropertyDescriptor</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>stu1<span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1111</span><span class="token punctuation">,</span><span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>stu1<span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>stu2<span class="token punctuation">,</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我自己在执行取值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我在执行赋值操作"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>stu2<span class="token punctuation">,</span> <span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"o1"</span><span class="token punctuation">,</span> o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用点</strong>：主要用于检测某一个对象某一些属性里面的特性，例如这个属性是否可以遍历，是否可以删除等相关信息</p><hr><h3 id="工厂模式创建对象"><a href="#工厂模式创建对象" class="headerlink" title="工厂模式创建对象"></a>工厂模式创建对象</h3><p>思考：如果现在我们希望将 10 个人的信息保存下来，每个人在这里都有姓名，性别，年龄三个属性，这怎么办呢</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu1<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">userName</span><span class="token operator">:</span><span class="token string">"学生1"</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> stu2<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">userName</span><span class="token operator">:</span><span class="token string">"学生2"</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> stu3<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">userName</span><span class="token operator">:</span><span class="token string">"学生3"</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单例模式解决了分组的问题，让每个对象有了自己独立的命名空间，但是不能批量生产，每一个新的对象都要重新写一份一模一样的代码。</p><p>我们之前在学习方法的时候，已经知道方法是可以任意多次的调用执行，我调用一次，就执行一次，那么，现在我如果希望得到 5 个对象，我可以调用 5 次，所以针对这个思路 ，我们可以把代码写成如下情况</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token parameter">userName<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//var obj = new Object();</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">userName</span><span class="token operator">:</span> userName<span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span> sex<span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token string">"天天"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token string">"学生2"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的方式 ，我们可以快速的创建两个对象，这样就可以很方便的使用对象将班上学生的信息统一集中管理，这种设计模式，我们叫工厂模式</p><p>即：把实现同一事情的相同代码，放到一个函数中，以后如果再想实现这个功能，就不需要重新编写这些代码了，只要执行当前的函数即可， 这就是函数的封装，体现了高内聚、低耦合的思想：减少页面的中的冗余代码，提高代码的重复利用率。</p><p>缺点： 工厂模式无法实别对象类型（即怎样知道一个对象的类型）</p><hr><h3 id="使用构造函数创建对象"><a href="#使用构造函数创建对象" class="headerlink" title="使用构造函数创建对象"></a>使用构造函数创建对象</h3><p>构造函数其实也是一个普通的函数，只是它的调用方法不一样而已，它需要通过关键字<code>new</code>去调用</p><p>当一个函数通过 new 去调用执行以后，它会返回一个对象类型给我们</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我去执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//常规方式调用</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//new关键字调用，返回一个对象赋值给了a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>new 一个 function 会得到一个对象</p></blockquote><h4 id="什么是构造函数"><a href="#什么是构造函数" class="headerlink" title="什么是构造函数"></a>什么是构造函数</h4><p>构造函数就是一个普通函数，当这个函数如果<strong>常规调用</strong>的方式或 call/apply 的调用方式去执行的时候，我们就把它当成是普通函数</p><p>但是如果我们通过 new 去调用，那么我们就把这个函数当在是<strong>构造函数</strong>（函数还是那个函数，只是根据调用方式不同我们来叫不同的名字）</p><h4 id="构造函数的执行过程"><a href="#构造函数的执行过程" class="headerlink" title="构造函数的执行过程"></a>构造函数的执行过程</h4><p>当一个函数创建好以后，我们并不知道它是不是构造函数，即使像上面的例子一样，函数名为大写，我们也不能确定。只有当一个函数以 <code>new</code> 关键字来调用的时候，我们才能说它是一个构造函数。</p><p>执行的过程，也就是 new 关键字来调用的情况。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时执行过程为：</p><ol><li><p>当以 new 关键字调用时，会创建一个新的内存空间，标记为 Person 的实例。</p><p>例如：创建新的内存空间：#f1，标记为 Person 的实例</p></li><li><p>函数体内部的 this 指向该内存，也就是 Person 的实例。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// 通过以上两步，我们就可以得出这样的结论。</span><span class="token class-name"><span class="token keyword">var</span></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span>'刘红'<span class="token punctuation">,</span> <span class="token char">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个新的内存 #f2</span><span class="token class-name"><span class="token keyword">var</span></span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span>'杜金雪'<span class="token punctuation">,</span> <span class="token char">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个新的内存 #f3</span><span class="token comment">/*每当创建一个实例的时候，就会创建一个新的内存空间(#f2, #f3)，创建 #f2 的时候，函数体内部的 this 指向 #f2, 创建 #f3 的时候，函数体内部的 this 指向 #f3。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行函数体内的代码，给 this 添加属性，就相当于给实例添加属性。</p></li><li><p>默认返回 this。</p><p>由于函数体内部的 this 指向新创建的内存空间，默认返回 this，就相当于默认返回了该内存空间#f1。此时，内存空间被变量 p1 所接收。也就是说 p1 这个变量，保存的内存空间就是#f1，同时被标记为 Person 实例。</p></li></ol><h4 id="构造函数的返回值"><a href="#构造函数的返回值" class="headerlink" title="构造函数的返回值"></a>构造函数的返回值</h4><p>构造函数执行过程的最后一步是默认返回 <code>this</code> 。言外之意，构造函数的返回值还有其它情况。</p><ol><li><p><strong>没有手动添加返回值，默认返回 <code>this</code> 。</strong></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Person1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*首先，当用 new 关键字调用时，产生一个新的内存空间 #f11，并标记为 Person1 的实例；接着，函数体内部的 this 指向该内存空间 #f11；执行函数体内部的代码；由于函数体内部的 this 指向该内存空间，而该内存空间又被变量 p1 所接收，所以 p1 中就会有一个 name 属性，属性值为 '张三'。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>手动添加一个基本数据类型的返回值，最终还是返回 <code>this</code>。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>手动添加一个复杂数据类型(对象)的返回值，最终返回该对象</strong> 。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">"180"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'a'</span><span class="token comment">// 再来一个例子</span><span class="token keyword">function</span> <span class="token function">Person4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"中性"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p4<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '中性'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="构造函数与普通函数的区别"><a href="#构造函数与普通函数的区别" class="headerlink" title="构造函数与普通函数的区别"></a>构造函数与普通函数的区别</h4><ol><li><p>返回值不一样</p><p>普通的函数（常规调用的函数）它可以返回一个具体的值，即使我们没有明确的指定 <code>return</code>，它也会返回一个<code>undefined</code></p><p>构造函数一般情况下不指定返回类型，它会自动返回一个新建的对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我去执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Person &#123;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>this 的指针发生了偏移</p><p>当这个方法做为普通方法去执行的时候，它内部的 this 指向了<code>window</code>全局对象</p><p>当这个方法被当成构造方法<code>new</code>去执行时候，它内部的<code>this</code>指向了当前对象，正是因为有了一个像这样的特点，所以，我们会大量使用这种方式去创建对象</p></li><li><p>调用的时候是否要加括号</p><p>普通方法是需要通过方法名 ()来进行调用的</p><p>当这个方法被当成构造函数去执行的时候，如果没有参数，这个括号是可以省略</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//常规调用</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>   <span class="token comment">//我没有参数，所以，我可以把括号省略掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  同理，下面的代码也是正确的</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><pre><code>#### 构造函数生成对象 我们已经知道一个构造函数通过new去执行的时候，内部的this指向当前对象（返回给用户的那个对象），所以我们可以根据这个特点来创建对象 **案例**：如果假设我们希望所班上所有学生的姓名，性别，年龄封装成对象存储起来</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">userName<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//我现在要在当前对象上面添加 userName，sex,age三个属性</span>    <span class="token comment">//而构造函数在new的时候，this指向了当前对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1.</span> 新建内存空间，标记为student的实例<span class="token number">2.</span> <span class="token keyword">this</span>指向内存空间（student的实例）<span class="token number">3.</span> 执行函数体内的代码，把属性或者方法添加到<span class="token keyword">this</span>，添加到内存空间（student实例）上去<span class="token number">4.</span> （默认）返回<span class="token keyword">this</span>，也就是返回内存空间（student的实例）<span class="token punctuation">,</span>用一个变量来接收这个返回值（<span class="token keyword">this</span><span class="token operator">/</span>内存空间），所以变量上就能拥有返回值上的所有属性和方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span> <span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span> <span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"litian"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 现在我们已经可以得到这三个对象，并且对象里面的属性各不相同，根是根据参数的不同来决定它的属性值的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="构造函数创建对象的识别"><a href="#构造函数创建对象的识别" class="headerlink" title="构造函数创建对象的识别"></a>构造函数创建对象的识别</h3><p>为什么说构造函数解决了工厂模式无法实别对象的问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token parameter">userName<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//var obj = new Object();</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">userName</span><span class="token operator">:</span> userName<span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span> sex<span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码里面，我们会看到无论调用<code>createStudent</code>还是去调用<code>createPerson</code>在这里它的内部都是通过<code>new Object()</code>来实现，它们既然都是 Object 来创建的，那么在根本上面就无法实别它们到底是什么类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//学生的构造函数</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义了老师的构造函数</span><span class="token keyword">function</span> <span class="token function">Teacher</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"天天"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按照正常的理解，s1与s2应该是属于学生对象，而t1则属于老师对象</span>s1 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token comment">//true;</span>s2 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token comment">//true;</span>s1 <span class="token keyword">instanceof</span> <span class="token class-name">Teacher</span><span class="token punctuation">;</span> <span class="token comment">//false;</span>t1 <span class="token keyword">instanceof</span> <span class="token class-name">Teacher</span><span class="token punctuation">;</span> <span class="token comment">//true;</span>t1 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span class="token comment">//通过上面的方法，我们可以实现对象的实别</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的方式已经可以实别出对象类型了，但是仍然要记得一点，在 JS 里面，所有的对象都是由 Object 衍生出来，所以会出现以下的情况 ：</p><ol><li><p>在以前的时候，我们理解<code>instanceof</code>是 ，<code>s1</code>是否是由<code>Student</code>这个方法<code>new</code>出来<br>现在理解为<code>Student</code>方法是否衍生出了<code>s1</code>这个对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">s1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">//true</span>s2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">//true</span>t1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token comment">//因为所有对象的祖宗都是Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p> 在每个对象里面都有一个属性<code>constructor</code>，这个属性它是指构造函数，指向了当前创建这个对象的构造函数，所以 s1 与 s2 对象它们的<code>constructor</code>都指向了 Student 这个构造函数，而 t1 的<code>constructor</code>则指向了 Teacher 这个构造函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">s1<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Student<span class="token punctuation">;</span> <span class="token comment">//true;</span>s1<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">;</span> <span class="token comment">//false</span>s1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token comment">// 通过上面的第二行代码与第三行代码，我们可以得出`constructor`的检测比`instanceof`的检测更为严格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;面向对象程序设计&quot;&gt;&lt;a href=&quot;#面向对象程序设计&quot; class=&quot;headerlink&quot; title=&quot;面向对象程序设计&quot;&gt;&lt;/a&gt;面向对象程序设计&lt;/h2&gt;&lt;p&gt;在程序员眼中，在日常的工作与生活当中，那些能够看得见，摸得着，想象得出来的，就都是对象。只要是物体它就是一个对象。&lt;/p&gt;
&lt;p&gt;如果它是一个对象，那么它必然会具备以下几个特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对象具备属性&lt;/p&gt;
&lt;p&gt;属性是用于描述对象的特征的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象具备方法&lt;/p&gt;
&lt;p&gt;这些方法可以提供给我们去调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象应该可以继承&lt;/p&gt;
&lt;p&gt;父级对象的某些方法与属性可以在子级对象里面去继承&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//请同学们将班上学生的信息记录下来&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; userName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;张三&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;男&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//-----------上面的三个变量都是属于张三的--------------------&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; userName1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;李四&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; age1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sex1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;男&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//----------上面的三个变量又同于是属于李四-----------------&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果没有对象，那么上面的东西就很难实现归类，并且对数据的管理会非常麻烦，我们迫切需要一个集中式的数据管理方法&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="面向对象" scheme="http://example.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 变量提升</title>
    <link href="http://example.com/2022/06/29/var/"/>
    <id>http://example.com/2022/06/29/var/</id>
    <published>2022-06-29T09:49:44.086Z</published>
    <updated>2022-06-29T09:51:16.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><strong>基础知识</strong></h5><p><strong>在顶级的区域内声明的变量为 window级别的变量。 也就是说var a=100 等价于 window.a=100;</strong> </p><p> <strong>全局作用域和局部作用域</strong> </p><p>​    全局作用域：整个JS执行环境</p><p>​    局部作用域：通过创建一个函数就开辟出了一个局部作用域</p><span id="more"></span><p> <strong>全局变量和局部变量</strong> </p><p>​    全局变量：在全局作用域都可以访问的变量</p><p>​    局部变量：只能在当前局部作用域访问的</p><p> <strong>变量声明提升：</strong> </p><p>​    如果变量声明在函数里面，则将变量声明提升到函数的开头</p><p>​    如果变量声明是一个全局变量，则将变量声明提升到全局作用域的开头</p><p> <strong>变量运行（搜索）机制：</strong> </p><p>​    首先看，有没有局部作用域</p><p>​    如果有，查找是不是这个局部作用域定义的变量</p><p>​    如果不是，寻找上一级作用域，直到找到全局作用域</p><p>​    如果全局作用域也找不到这个变量，这个变量就是未定义的 undefined</p><hr><h5 id="1-在JS中只有两种作用域"><a href="#1-在JS中只有两种作用域" class="headerlink" title="1.在JS中只有两种作用域"></a>1.在JS中只有两种作用域</h5><p>a：全局作用域</p><p>b：函数作用域</p><p>什么是没有块级作用域？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'李天'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 变量a是声明在if的&#123;&#125;里面，但在js里面，因为没有块级作用域，所以此时的变量a的作用域是全局作用域。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="2-什么是变量提升？"><a href="#2-什么是变量提升？" class="headerlink" title="2.什么是变量提升？"></a>2.什么是变量提升？</h5><p>在我们js中，代码执行时,分两步走：</p><p>解析、执行。</p><p>例如：我们习惯将 var a=2; 看做是一个声明，而实际上js引擎并不这么认为。它将var a（变量声明） 和 a = 2（初始化）看做事两个单独的声明，第一个是编译的任务，而第二个则是执行阶段的任务。</p><blockquote><p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理，可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的最顶端，这个过程被称为提升。</p><p>也就是该变量不管是在作用域的哪个地方声明的，都会提升到作用域的最顶上去。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 变量提升</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span><span class="token comment">//---- 上面等价于 -----</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//------ 实际执行顺序 -----</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 继续</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量b</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//值为3</span><span class="token punctuation">&#125;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 任何通过附加在window上的变量都相当于声明一个全局变量，或者是给全局变量赋值</span><span class="token comment">// 再继续 根据变量声明提升和变量搜索机制：</span>c<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> c<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 分析 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>c<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//声明一个全局变量c </span><span class="token keyword">function</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> c<span class="token punctuation">;</span><span class="token comment">//变量声明提升，声明一个局部变量</span>    window<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//改变全局变量c的值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//由于此时的c是一个局部变量c，并且没有被赋值 c就是undefined    </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时的c就是一个全局变量c，也就是值为3</span><span class="token punctuation">&#125;</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面看一道经典面试题：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> v1<span class="token punctuation">;</span> <span class="token comment">// 全局变量提升</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ? undefined</span>v1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> v1<span class="token punctuation">;</span> <span class="token comment">// 局部变量提升</span>cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ? undefined</span>v1 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ? 200</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ? 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上面的例子稍微改动一下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 前提 - 没有 var 声明就找上级作用域</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ccc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">ddd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ddd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">ccc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--------- 改动之后 --------</span><span class="token comment">/* foo函数里面没有变量声明，所以foo里面的变量v1，其实都是访问的全局变量v1 */</span><span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>v1 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment">// 等于给全局变量v1重新赋值为200</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 200</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看一个例子：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var a &#x3D; 1;if(true)&#123;console.log(a); &#x2F;&#x2F;1var a &#x3D; 2;console.log(a); &#x2F;&#x2F; 2&#125;console.log(a); &#x2F;&#x2F; 2&#x2F;&#x2F; 在js里面没有块级作用域，所以此处是在全局作用域重复声明了两次，那么第二次声明会被忽略，仅用于赋值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="3-什么是函数提升？"><a href="#3-什么是函数提升？" class="headerlink" title="3.什么是函数提升？"></a>3.什么是函数提升？</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数声明式</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 函数表达式（函数字面量式）</span><span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="函数声明式会被提升"><a href="#函数声明式会被提升" class="headerlink" title="函数声明式会被提升"></a>函数声明式会被提升</h6><blockquote><p> 函数字面量式的声明和变量提升的结果是一样的，函数只是一个具体的值； </p></blockquote><p>但是函数声明式的提升现象和变量提升略有不同</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*打印结果：ƒ bar () &#123;  console.log(1);&#125;*/</span>执行顺序相当于：<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>函数声明式提升，会将函数的整个代码块一起提升到作用域的最顶上去</p></blockquote><h6 id="出现同名的函数声明，变量声明的时候，-函数声明会被优先提升，变量声明会被忽略"><a href="#出现同名的函数声明，变量声明的时候，-函数声明会被优先提升，变量声明会被忽略" class="headerlink" title="出现同名的函数声明，变量声明的时候， 函数声明会被优先提升，变量声明会被忽略"></a><strong>出现同名的函数声明，变量声明的时候， 函数声明会被优先提升，变量声明会被忽略</strong></h6><p>如果函数声明和变量声明使用的是同一个变量名称，函数声明的优先级高于变量声明的优先级。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*结果：function fn()&#123;&#125;hello*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>总结：</p><ol><li>所有的声明都会提升到作用域的最顶上去。</li><li>同一个变量只会声明一次，其他的会被忽略掉。</li><li>函数声明的优先级高于变量声明的优先级，并且函数声明和函数定义的部分是一起被提升的。</li></ol><hr><p>练习：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//?</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//?</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> <span class="token function-variable function">b</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//?</span><span class="token comment">// 2.</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;变量提升&quot;&gt;&lt;a href=&quot;#变量提升&quot; class=&quot;headerlink&quot; title=&quot;变量提升&quot;&gt;&lt;/a&gt;变量提升&lt;/h2&gt;&lt;h5 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;&lt;strong&gt;基础知识&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;在顶级的区域内声明的变量为 window级别的变量。 也就是说var a=100 等价于 window.a=100;&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt; &lt;strong&gt;全局作用域和局部作用域&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;​    全局作用域：整个JS执行环境&lt;/p&gt;
&lt;p&gt;​    局部作用域：通过创建一个函数就开辟出了一个局部作用域&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="变量提升" scheme="http://example.com/tags/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 数组</title>
    <link href="http://example.com/2022/06/29/array/"/>
    <id>http://example.com/2022/06/29/array/</id>
    <published>2022-06-29T09:09:02.238Z</published>
    <updated>2022-06-29T09:50:47.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>什么是数组？通过字面的意义直面理解数组就是把数据组合在一起</p></blockquote><p>JavaScript里面的数定义:</p><p><strong>数组是存放一系列数据的集合</strong></p><span id="more"></span><hr><h4 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h4><h5 id="第一种方式Array"><a href="#第一种方式Array" class="headerlink" title="第一种方式Array"></a>第一种方式Array</h5><p>这一种方式，我们可以直接使用JS的内置对象Array来进行</p><p>在使用这一种方式的时候，它非常简单，如下所示就可以了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这样我们就创建了一个数组nums</span>在上面的代码里面，我们看到了一个关键字 <span class="token keyword">new</span>我们在控制台打印出nums的时候，我们会看到有一个 <span class="token punctuation">[</span><span class="token punctuation">]</span> ，这是数组表示形式上的特点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的方式创建的数组，我们会发现它是一个空的数组，它是一个空的数组里面没有任何元素，所以，我们可以把这个数组的长度理解为0</p><p><strong>小技巧：</strong> 一个数组如果要得到它的长度，我们可以使用一个属性<strong>数组.length</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 这个时候会得到数字0，因为数组的长度为0，而length则代表这个数组的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在我们定义数组的时候，我们还可以直接就定义数组的长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我们会得到一个长度为5的数组</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 得到结果为5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong><br>创建数组如果要确定长度，那么你放进去的只可能是正整数，不能是小数，也不能是负数，并且只能有一个数字</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误的定义方式，会提示“非法的数组长度”</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误的定义方式，会提示“非法的数组长度”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们在定义数组的时候，如果已经确定了数组里面的内容 ，我们可以直接的把数组内容放进去</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> f<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"香蕉"</span><span class="token punctuation">,</span><span class="token string">"苹果"</span><span class="token punctuation">,</span><span class="token string">"哈密瓜"</span><span class="token punctuation">,</span><span class="token string">"草莓"</span><span class="token punctuation">,</span><span class="token string">"梨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 现在我们定义数组的时候，我就直接把里面放了5个水果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们去通过Array定义数组的时候，最常见的三种情况就是上面的三种情况：</p><ol><li>第一种直接定义一个空数组，这个空数组的长度为0，</li><li>第二种定义了一个有长度的数组，但这个数组里面每个值都是空的，</li><li>第三个则在定义数组的时候，就把需要放到数组里面的元素直接丢进去了<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"香蕉"</span><span class="token punctuation">,</span><span class="token string">"苹果"</span><span class="token punctuation">,</span><span class="token string">"哈密瓜"</span><span class="token punctuation">,</span><span class="token string">"草莓"</span><span class="token punctuation">,</span><span class="token string">"梨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>细节注意：</strong><br>我们要确定一点，new Array(“值”)放一个值的时候，它首先会通过一次typeof 值的检测，如果这个值是number类型，再去判断这个值是否是正整数，如果是，则表示数组定义的长度，否则就是数组的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//代表定义数组，直接把"5"放进去</span><span class="token comment">/*typeof "5"  得到"string"  不是number类型 ，所以它代表数组里面的值*/</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//代表定义一个长度为5的数组</span><span class="token comment">/*typeof 5 得到"number"类型 ，然后判断是否大于或等于0，第三步是否是整数*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式 []"></a>第二种方式 []</h5><p>当我们通过第一种方式定义好数组以后，我们在控制打输出这个数组，我们会发现数组使用的是中括号 [] 来表示,通过这点我们在以后定义数组的时候可以直接使用中括号来定义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> nums<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> nums2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* 这一种方式就相当于定义了一个空的数组，上面的两行代码最终得到的结果是一样的 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以像第一种一样，直接去定义数组里面的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"香蕉"</span><span class="token punctuation">,</span><span class="token string">"苹果"</span><span class="token punctuation">,</span><span class="token string">"哈密瓜"</span><span class="token punctuation">,</span><span class="token string">"草莓"</span><span class="token punctuation">,</span><span class="token string">"梨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"香蕉"</span><span class="token punctuation">,</span><span class="token string">"苹果"</span><span class="token punctuation">,</span><span class="token string">"哈密瓜"</span><span class="token punctuation">,</span><span class="token string">"草莓"</span><span class="token punctuation">,</span><span class="token string">"梨"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>可以理解为：<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小细节注意：</strong></p><p>在我们使用Array去定义数组的时候，我们可以直接定义数组的长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这代表定义了一个数组，它的长度为5</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment">//得到的结果是5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是我们在通过[]去定义数组的时候，不能够直接定义数组的长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这不代表数组的长度。而代表数组里面有一个值，这个值是5</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment">//得到结果1  里面有个元素是5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>==<strong>解决方案：</strong>==</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">我们都知道数组的长度是使用length来表示的，现在我们就通过它来解决<span class="token comment">//第一种定义的情况</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果转化成第二种定义情况</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//定义了一个长度为0的数组</span>b<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">//重新设定数组的长度为5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="JS数组与其他变成语言的异同"><a href="#JS数组与其他变成语言的异同" class="headerlink" title="JS数组与其他变成语言的异同"></a>JS数组与其他变成语言的异同</h4><h5 id="数组的取值与赋值相同"><a href="#数组的取值与赋值相同" class="headerlink" title="数组的取值与赋值相同"></a>数组的取值与赋值相同</h5><ol><li>JS数组的取值与赋值跟其它的编程言是一样的，它们都是通过下标取值与赋值（下标也叫索引，可以把它理解书本上面的页码，通过索引，可以快速的定位到数组里面的值）</li><li>JS数组与其它编程语言数组一样，它的索引（下标）是从0开始的，它们的取值与赋值都是 <strong>数组[索引值]</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'香蕉'</span><span class="token punctuation">,</span> <span class="token string">'梨'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//苹果</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//香蕉</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//梨</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'哈密瓜'</span><span class="token punctuation">;</span> <span class="token comment">//把值赋值到数组的第三个位置</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到['苹果', '香蕉', '哈密瓜'];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="数据类型的区别"><a href="#数据类型的区别" class="headerlink" title="数据类型的区别"></a>数据类型的区别</h5>在其它的编程语言里面，数组里面的值使用的是同一个数组类型，<strong>而在JS的数组里面，里面的值的数据类型可以不相同</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//现在上面的数组里面，放了多个值，这些值包含了我们JS里面的5种基本数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>把上面的代码在控制台运行以后，没有报错，并且我们展开数组以后发现所有的值都存进去了，所以我们可以得出结论：<strong>JS数组里面值的数据类型 ，我们可以不相同</strong></li></ol><h5 id="数组长度与最大索引的区别"><a href="#数组长度与最大索引的区别" class="headerlink" title="数组长度与最大索引的区别"></a>数组长度与最大索引的区别</h5><p>在其它的编程语言里面，数组的长度决定了最大索引，例如如果在C/C++/Java等编程语言（强类型语言）里面，如果数组的长度为6，那么它最大的索引应该是5（长度决定最大索引）</p><p><strong>在JavaScript里面的数组，最大索引决定了数组当前的长度</strong></p><blockquote><p>通过上面的相同点与不同点的结论，我们可以得出一个，JS数组不限定长度，也不限制数据类型!(正是因为这个特点，所以JS把数组也当成了集合)</p></blockquote><hr><h4 id="数组类型的检测"><a href="#数组类型的检测" class="headerlink" title="数组类型的检测"></a>数组类型的检测</h4><p>我们可以通过typeof关键字来检测数据类型，typeof 只能检测了基本的数据类型与对象类型 ，而不能够具体的检测出数组</p><p>如果判断这个变量是否是数组，我们还需要做一次检测</p><h5 id="使用-instanceof-关键字"><a href="#使用-instanceof-关键字" class="headerlink" title="使用 instanceof 关键字"></a>使用 instanceof 关键字</h5><p>instanceof 主要的作用与 typeof 相似，typeof 主要用于检测基本数据类型，而instanceof主要用于检测对象类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment">// 判断num是否是Array new出来的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果， <strong>变量 instanceof Array</strong> 得到的值为true，则代表它是一个数组，否则就不是一个数组</p></blockquote><h5 id="Array-isArray-检测"><a href="#Array-isArray-检测" class="headerlink" title="Array.isArray() 检测"></a>Array.isArray() 检测</h5><p>除了通过之前的instanceof关键字以外，我们还可以使用自带的方法去检测</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断num是否为数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果上面的结果为true，则说明num是数组，如果得到false，则说明num不是数组</p></blockquote><p>当我们检测出一个变量为数组以后，我们就可以让这个数组来解决我们工作当中遇到的问题，例如将元素添加到数组，删除数组里面的值，遍历数组等方式</p><hr><h4 id="数组的取值与赋值"><a href="#数组的取值与赋值" class="headerlink" title="数组的取值与赋值"></a>数组的取值与赋值</h4><p>当我们创建一个数组以后，这个数组里面可以存放任意多个值，这些数组里面的值，我们叫“元素”</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 在上面的stu数组里面，我们可以把"张三，李四，王五"这三个值叫元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当一个数组好了以后，我们可以通过下标（索引）来进行赋值与赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//取出了第一个元素的值  "张三"</span>stu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"丁六"</span><span class="token punctuation">;</span>   <span class="token comment">//对数组的第一个元素进行赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//如果我现在想在刚刚的数组后面添加一个元素（”哈哈“）</span><span class="token keyword">var</span> stu<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> length<span class="token operator">=</span>stu<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">//取到数组的长度 length = 3</span>stu<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"哈哈"</span><span class="token punctuation">;</span> <span class="token comment">// stu[3] 就是第四个值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>++如果向前面添加元素，就会很麻烦 ，所以，我们除了使用数组的下标来取值或赋值以外，我们还需要使用一些特殊的技术来对数组的元素进行添加或删除等相关操作++</p><blockquote><p>数组提供了一系列的方法来进行操作，这些方法是提供给用户的使用的，可以提高我们操作数组的简便程度</p></blockquote><hr><h4 id="数组的常用方法与属性"><a href="#数组的常用方法与属性" class="headerlink" title="数组的常用方法与属性"></a>数组的常用方法与属性</h4><blockquote><p>方法：用于使用（调用）</p></blockquote><blockquote><p>属性：用于描述一些事物的特征（特性）</p></blockquote><ol><li><p>length 属性：用于获取或设置数组的长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>push() 方法：直接向当前的数组后面去追加新的元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'赵六'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把赵六添加到当前数组的最后面去</span>stu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'哈哈'</span><span class="token punctuation">,</span> <span class="token string">'嘻嘻'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以同时添加多个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>pop() 方法：移除当前数组的最后一个元素，并且可以得到这个元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 王五</span><span class="token comment">//上面的代码执行了两个过程</span><span class="token comment">//第一个过程是移除了stu数组的最后一个元素“王五”</span><span class="token comment">//第二个过程，把移出来的这个元素”李昊“赋值给了变量a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>unshift() 方法：在数组的最前面去添加元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'老李'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在数组的最前面添加元素"老李"</span><span class="token comment">//unshift与push一样，都可以一次性添加多个元素</span>stu<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">,</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>shift() 方法：在数组的前面移除一个元素，并且可以得到这个元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span>stu<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//张三</span><span class="token comment">//上面的代码也执行了两个过程 </span><span class="token comment">//第一个过程是把最前面的“张三”移出来</span><span class="token comment">//第二个过程则是把移出来的“张三”赋值给了变量a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>reverse()方法：该方法会将当前数组里面的元素进行反转</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stu<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这个时候，里面的数组会进行反转</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>concat() 方法：将多个数组里面的元素进行合并，然后得到一个心得数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> _a<span class="token operator">=</span>arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//它将arr1与arr2进行相连，得到一个新的数组_a，不影响原来的数组</span><span class="token keyword">var</span> _b <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//它也可以同时连接多个数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>toString() 方法：该方法讲数组转换成字符串，里面的原则用“逗号” <strong>,</strong> 来隔开</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//"a,b,c";   </span><span class="token keyword">var</span> arr1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"1,2,3,4,5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>join() 方法：将元素转换成字符串，然后按指定的符号隔开，如果未指定符号，则默认使用逗号 , 隔开</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//"a#b#c";</span><span class="token keyword">var</span> arr1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//"1,2,3,4,5";  不添加符号，则默认使用逗号来进行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>splice() 方法：替换数组里面的元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [100, 'aaa', 'bbb', 400, 500]</span><span class="token comment">/*第一个1代表开始替换的索引第二个2代表替换元素的个数后面的"aaa","bbbb"代表替换以后新的元素*/</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">,</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [100, 'aaa', 'bbb', 'ccc', 500];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展第一种情况</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    在上面的代码里面，我们可以看从，第一个参数代表开始索引，第二个参数代表要替换的元素个数    这个时候，如果我们只是替换元素出来而不向里面添加元素，这个时候这个过程就相当于删除过程*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展第二种情况</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[100,200]</span><span class="token comment">// 从索引2开始，后面的全部删掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>扩展第三种情况</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">向数组的特定位置添加元素<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"曾七"</span><span class="token punctuation">,</span><span class="token string">"王八"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//现在请将"王五"，"赵六"插入到”李四“与”曾七“的中间</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    索引2的位置，没有替换元素，而是添加了两个元素    原来索引2的“曾七”变成了添加的“王五”*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>indexOf() 方法：查询数组当中某个元素的索引的位置，默认从0的索引开始查询，一直查询到最后一个，如果找到多个，则返回第一个的位置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"曾七"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>如果找到这个元素就得到这个元素所在的索引值，如果没有找到则得到一个“<span class="token operator">-</span><span class="token number">1</span>”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>slice() 方法：提取现有数组里面的元素，得到一个新的数组，它不会影响到原来的数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>第一个参数代表起始索引第二个参数代表结束索引的前一个<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 起始索引1 元素为"b"，结束索引4 元素为"e"，"e"的前一个为"d"</span><span class="token comment">// arr2的结束就是 ["b","c","d"]  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">如果start是负数，那么规定从数组尾部开始算起。也就是说，<span class="token operator">-</span><span class="token number">1</span> 指最后一个元素，<span class="token operator">-</span><span class="token number">2</span> 指倒数第二个元素，以此类推。如果end是负数，那么规定的是从数组尾部开始算起的参数。<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// f</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c d e f</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [] 得不到结果，在我开始之前了</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['c']</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="数组练习"><a href="#数组练习" class="headerlink" title="数组练习"></a>数组练习</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">给你一个数组<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>，请把这个数组变成手机号：<span class="token number">18627994826</span><span class="token keyword">var</span> telArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> tel <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>telArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我的手机号'</span><span class="token punctuation">,</span> tel<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="循环得到数组里面的每一个元素"><a href="#循环得到数组里面的每一个元素" class="headerlink" title="循环得到数组里面的每一个元素"></a>循环得到数组里面的每一个元素</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>首先经过学习我们已经知道数组元素的取值与赋值都是通过索引来进行，如果我们需要把数组里面的每个元素都取到，那么我们就要把里面的每个索引都拿一次</p></blockquote><blockquote><p>我们也都知道索引是从0开始，到length-1结束，所以我们要在这个范围里面不停的去拿，这个地方我们做了一件重复的事情，就需要for循环了</p></blockquote><h5 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h5><p>经过分析，我们知道循环的起始条件就应该是数组的初始索引值为0，结束条件就是数组的最大索引length-1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//循环生成，i是从0开始 到length-1  指的是数组的每一个索引值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// i&lt;=arr.length-1可以换成i&lt;arr.length</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0-4 </span>    <span class="token comment">// i 代表数组里面的每一项索引</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1-5</span><span class="token punctuation">&#125;</span>上面的<span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">in</span> 也是一种数组的遍历方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="数组的迭代方法"><a href="#数组的迭代方法" class="headerlink" title="数组的迭代方法"></a>数组的迭代方法</h4><p>数组可以使用第三方的方式来遍历里面的元素（for或for…in）,同时也可以使用数组自带的方法来进行遍历</p><ol><li><p>forEach 方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// item代表当前元素</span>    <span class="token comment">// index代表当前索引 </span>    <span class="token comment">// arr代表当前正在遍历的数组</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1.</span>数组的forEach回调函数中写入执行代码段就可以<span class="token number">2.</span>这里回调函数有三个参数，第一个 表示数组的每一个值，第二个表示下标，第三个表示当前数组<span class="token number">3.</span>注意forEach 不能使用<span class="token keyword">break</span>与<span class="token keyword">continue</span>等方法终止遍历<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>map 方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">map 会为数组的每一个值去执行代码块，对返回的结果组成一个数组，作为整个遍历返回的值<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> item<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 0.5, 1, 1.5, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>filter 过滤方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">filter对数组中的每一项运行给定函数，返回该函数符合要求的项组成的数组<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 通过找到当前的index索引和item索引相同，就说明是同一个元素，如果不相同就是重复的元素</span>    <span class="token comment">// index: 0 1 2 3 4</span>    <span class="token comment">// arr.indexOf(item): 0 1 1 3 4 </span>    <span class="token comment">//因为通过indexOf方法查询到了两个相同的元素3，这个时候返回第一个的位置 1</span>    <span class="token comment">// filter直接过滤掉了我们重复索引的元素3，因此得到了一个去重的数组</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>some 方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">这个遍布方法也有一个返回值，它的返回是布尔类型some方法类似于 <span class="token operator">||</span> 的逻辑语句判断，会为数组每一个值执行判断语句，只要有一个满足条件，整个遍历的返回值就为<span class="token boolean">true</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr4 <span class="token operator">=</span> arr3<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr4'</span><span class="token punctuation">,</span> arr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>every 方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">该方法与上面的some方法相对，相当于执行了且的运算every的遍历会对数组的每一个值执行回调函数中的语句，只有在每一个值都为<span class="token boolean">true</span>时，整个遍历返回值为<span class="token boolean">true</span>，否则为<span class="token boolean">false</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr4 <span class="token operator">=</span> arr3<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr4'</span><span class="token punctuation">,</span> arr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="归并方法-reduce"><a href="#归并方法-reduce" class="headerlink" title="归并方法 reduce()"></a>归并方法 reduce()</h4><p>归并方法<br>归并方法也是迭代方法的一种，但也不完全的迭代方法，它的回调方法里面有四个参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>arr：表示原数组；prev：表示上一次调用回调时的返回值，或者初始值 init<span class="token punctuation">;</span>cur：表示当前正在处理的数组元素；index：表示当前正在处理的数组元素的索引，若提供 init 值，则索引为<span class="token number">0</span>，否则索引为<span class="token number">1</span>；init：表示初始值。常用参数：prev 和 cur<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例：<br>先提供一个数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="求数组项之和"><a href="#求数组项之和" class="headerlink" title="求数组项之和"></a>求数组项之和</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum'</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 34</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于传入了初始值0，所以开始时prev的值为0，cur的值为数组的第一项，相加之后返回值为3，作为下一轮回调的prev值，然后再继续与下一个数组项相加，以此类推，直至完成所有数组项的和并返回。</p><hr><h4 id="排序方法-sort"><a href="#排序方法-sort" class="headerlink" title="排序方法 sort()"></a>排序方法 sort()</h4><p>sort() 方法能够根据一定条件对数组元素进行排序。</p><p>如果调用 sort() 方法时没有传递参数，则按字母顺序对数组中的元素进行排序。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> sortA <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>sortA<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['a','b','c','d']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 sort() 方法时，应该注意下面几个问题。</p><ol><li><p>所谓的字母顺序，实际上是根据字母在字符编码表中的顺序进行排列的，每个字符在字符表中都有一个唯一的编号。</p></li><li><p>如果元素不是字符串，则 sort() 方法试图把数组元素都转换成字符串，以便进行比较。</p></li><li><p>sort() 方法将根据元素值进行逐位比较，而不是根据字符串的个数进行排序。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"aba"</span><span class="token punctuation">,</span><span class="token string">"baa"</span><span class="token punctuation">,</span><span class="token string">"aab"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  定义数组a<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//按字母顺序对元素进行排序</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回数组[aab,aba,baa]</span><span class="token comment">/* 在排序时，首先比较每个元素的第 1 个字符，在第 1 个字符相同的情况下，再比较第 2 个字符，以此类推。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在任何情况下，数组中 undefined 的元素都被排序在末尾。</p></li><li><p>sort() 方法是在原数组基础上进行排序操作的，不会创建新的数组。<br>sort() 方法不仅按字母顺序进行排序，还可以根据其他顺序执行操作。<br>如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p><ul><li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</li><li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。</li><li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</li><li>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。<br>比较函数格式如下：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// 按某种排序标准进行比较, a 小于 b</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>要比较数字而非字符串，比较函数可以简单的以a-b，如下的函数将会将数组升序排列（由小大大）<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compareNumbers</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// a - b &lt; 0  顺序a b 说明a小 = 2 - 4 顺序 2 4</span><span class="token comment">// a - b > 0  顺序b a 说明b小 = 4 - 2 顺序 2 4</span><span class="token comment">// a - b 就是小的值在前，用来做升序排列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>sort 方法可以使用函数表达式方便书写为：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>降序处理（由大到小）<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compareNumbers</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// b - a &lt; 0 顺序 a b 说明a大 = 2 - 4 顺序 4 2</span><span class="token comment">// b - a > 0 顺序 b a 说明b大 = 4 - 2 顺序 4 2</span><span class="token comment">// b - a 就是大的值在前，用来做降序排列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">冒泡排序：<span class="token keyword">var</span> ltArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ltArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span> j<span class="token operator">&lt;</span>ltArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ltArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> ltArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> ltArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            ltArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ltArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            ltArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* if(ltArr[i] &lt; ltArr[j])&#123;            temp = ltArr[i];            ltArr[i] = ltArr[j];            ltArr[j] = temp;        &#125; */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ltArr'</span><span class="token punctuation">,</span> ltArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><blockquote><p>js在严格的意义上面来说是没有二维数组的概念，它只有多维数组概念</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name0<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token keyword">var</span> name1<span class="token operator">=</span><span class="token string">"李四"</span><span class="token punctuation">;</span><span class="token keyword">var</span> name2<span class="token operator">=</span><span class="token string">"王五"</span><span class="token punctuation">;</span><span class="token keyword">var</span> name3<span class="token operator">=</span><span class="token string">"赵六"</span><span class="token punctuation">;</span><span class="token comment">//现在我们有四人变量，这样写义很麻烦 ，所以我们可以通过数组的形式来定义，集中管理</span><span class="token keyword">var</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>通过数组，我们可以将上面的变量数据做集中式管理<span class="token comment">//----------------------------</span><span class="token keyword">var</span> age0<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">var</span> age1<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">;</span><span class="token keyword">var</span> age2<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">;</span><span class="token keyword">var</span> age3<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span><span class="token comment">//现在又有了四个变量，我们这样定也很麻烦 ，这个时候，又可能通过数组</span><span class="token keyword">var</span> ages<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span>当我们如果还需要将学生的性别，籍贯等信息也保存下来，做集中式管理的时候，又需要再次定义两个数组，但是我们都知道，这些数据在这里都是用于形容学生信息的，当变量名过多的时候，我们就不好管理<span class="token comment">//----------------------------</span><span class="token keyword">var</span> stus<span class="token operator">=</span><span class="token punctuation">[</span>names<span class="token punctuation">,</span>ages<span class="token punctuation">]</span><span class="token punctuation">;</span> 现在我们将学生的姓名和年纪做了一次数组的组合，这个时候我们就可以通过数组名stus去管理这个班级的数据了<span class="token comment">//上面的代码等同于</span><span class="token keyword">var</span> stus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="二维数组的定义"><a href="#二维数组的定义" class="headerlink" title="二维数组的定义"></a>二维数组的定义</h4><ol><li><p>通过 <strong>Array</strong> 的方法来定义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 上面的方式我们采用的是一步一步去定义的方式 ，先定义一维的普通的数组，然后里面的值又是一个数组</span><span class="token comment">//----------------------------</span><span class="token keyword">var</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-----------------------------</span><span class="token keyword">var</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-----------------------------</span><span class="token keyword">var</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-----------------------------</span><span class="token keyword">var</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过 <strong>[ ]</strong> 来定义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h4 id="二维数组的取值和赋值"><a href="#二维数组的取值和赋值" class="headerlink" title="二维数组的取值和赋值"></a>二维数组的取值和赋值</h4><p>在数组里面，我们的取值方式是通过数组名[索引]来取值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 如果我想取到里面的“李四”，以及 29 应该怎么取？</span><span class="token keyword">var</span> stus<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> names <span class="token operator">=</span> stus<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 取到了stus里面的第一个值，也就是第一个数组</span><span class="token keyword">var</span> name1 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 再通过数组取值的方式去取它里面的“李四”</span><span class="token comment">//----------------------------</span>二维数组的取值我们划分成了两部分<span class="token keyword">var</span> name1 <span class="token operator">=</span> stus<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// “李四”</span><span class="token keyword">var</span> age1 <span class="token operator">=</span> stus<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 29</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以把取值与赋值看成一个表（先行后列）</p><p>JS为什么会存在二维数组的概念是因为JS如果在内部要实现表的数据结构是通过二维数组来进行的，但是JS又不是一个完整意义上的表</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stus<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>在上面的数组里面，我们可以看到姓名在这里是四个元素，而年龄则是三个，在其它的编程语言这是不允许的，但是在<span class="token constant">JS</span>里面，因为<span class="token constant">JS</span>没有限定数组的长度，所以这是正常的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 这种也是可以的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>JS没有严格意义上面的二维数组，它有只有多维</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> infos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"小李"</span><span class="token punctuation">,</span><span class="token string">"老李"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 现在如果要取“小李”</span><span class="token keyword">var</span> names <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// infos长度结果</span>infos<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考？</strong><br>现有如下数组，请遍历出数组当中的所有元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> infos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"张金"</span><span class="token punctuation">,</span><span class="token string">"张民龙"</span><span class="token punctuation">,</span><span class="token string">"邓俊峰"</span><span class="token punctuation">,</span><span class="token string">"方振锋"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"杨欢"</span><span class="token punctuation">,</span><span class="token string">"杜金雪"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"陈昭文"</span><span class="token punctuation">,</span><span class="token string">"兰砣"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"胡定超"</span><span class="token punctuation">,</span><span class="token string">"甘才志"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">infos<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        item<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;什么是数组？通过字面的意义直面理解数组就是把数据组合在一起&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript里面的数定义:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组是存放一系列数据的集合&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 基础语法</title>
    <link href="http://example.com/2022/06/29/js-base/"/>
    <id>http://example.com/2022/06/29/js-base/</id>
    <published>2022-06-29T08:20:23.165Z</published>
    <updated>2022-06-29T09:50:38.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ol><li>JavaScript是区分大小写的（HTML和CSS不区分大小写）</li><li>JavaScript必须写在&lt;==script==&gt;标签里面，并且制定正确的类型（type）<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><span id="more"></span></li><li>JavaScript如果语法出现了错误，那么会在页面上的控制台（console）报错</li><li>JavaScript里面，一句代码写完了以后，请加上分号结束 “ ; ” ，不加理论上市可以的，但是不推荐</li></ol><hr><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>用来标明某一些对象或事物的特征，主要应用于<strong>关键字</strong>与<strong>变量名</strong></p><blockquote><p>标识符一般是指变量名，方法名，关键字或保留字</p></blockquote><blockquote><p>变量名相当于人的姓名，它可以变，关键字则是系统自己使用的</p></blockquote><blockquote><p>if,else,for,while等这些都是系统关键字，而我们用户在写代码的过程当中，自己取得名字我们叫变量名</p></blockquote><p><strong>注意：</strong></p><ol><li>标识符的开头必须是字母、_下划线、$开头，不能以数字开头，后面的则没有要求，可以使用任何字符<ul><li>一般我们建议把 - 换成 _ 下划线</li><li>不要使用中文做变量名，如：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">性别 <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span>年龄 <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li>标识符应该遵循<strong>见名知意</strong>的原则，JavaScript默认以<strong>驼峰命名</strong>为原则：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">userName <span class="token operator">=</span> <span class="token string">'tiantian'</span><span class="token punctuation">;</span> <span class="token comment">// 账号</span>userNickName <span class="token operator">=</span> <span class="token string">'天天'</span><span class="token punctuation">;</span> <span class="token comment">// 昵称</span>passWord <span class="token operator">=</span> <span class="token string">'123456'</span><span class="token punctuation">;</span> <span class="token comment">// 密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明</strong>：上面的代码就很好的说明了驼峰命名的原则 ，首字母小写，后面的每个英文单词字母大写<br>以下情况请注意：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 如果在定义的时候，我们的标识符是一个单词，那么首字母大写</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">addUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> liuserAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">// l: local 局部的</span><span class="token comment">// i: int 整数</span><span class="token comment">// userAge: 变量名</span><span class="token keyword">var</span> _gstrPwd <span class="token operator">=</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment">// _代表临时变量</span><span class="token comment">// g: global 全局的</span><span class="token comment">// str: 字符串string</span><span class="token comment">// pwd：密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>不能以<strong>关键字</strong>或<strong>保留字</strong>为标识符<br>最常见的关键字，我们现在只学到了 <strong>==var==</strong> 定义变量</li></ol><p>我们不能以关键字做变量名，如 var，do，while等，也不能以保留字作标识符，如 const，’import’等(参考ECMA-262)</p><hr><h4 id="变量标识符"><a href="#变量标识符" class="headerlink" title="变量标识符"></a>变量标识符</h4><p>什么是变量：变量就是在描述事情特征（属性）当中，可以变化的数据，我们叫做变量</p><blockquote><p>使用关键字 var 来定义的标识符，我们叫变量标识符，变量标识符用于存放一定的数据在代码当中</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token string">'天天'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法格式如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名<span class="token number">1</span> <span class="token operator">=</span> 变量值<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> 变量名<span class="token number">2</span> <span class="token operator">=</span> 变量值<span class="token number">2</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong> 在上面的代码中，var 是定义变量的<strong>关键字</strong>，userName 是变量标识符（变量名），“天天”则是这个变量标识符的值（变量值）；<br>所有的变量都是像上面定义的，但是，有一种情况是像下面这种方式（多个变量一起定义的时候）</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> userName<span class="token operator">=</span><span class="token string">"天天"</span><span class="token punctuation">;</span><span class="token keyword">var</span> userAge<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">var</span> userSex<span class="token operator">=</span><span class="token string">"女"</span><span class="token punctuation">;</span><span class="token comment">/* 上面的代码当中，我们定义了三个变量，这是可以的 */</span><span class="token operator">></span> 注意：在JavaScript当中，所有的语句如果写完以后要使用分号 <span class="token punctuation">;</span> 结束还可以使用如下的语法格式：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js<span class="token keyword">var</span> 变量名<span class="token operator">=</span>变量<span class="token number">1</span><span class="token punctuation">,</span>变量名<span class="token operator">=</span>变量<span class="token number">2.</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>，变量名n<span class="token operator">=</span>变量值n<span class="token punctuation">;</span><span class="token comment">/* 上面这种方式就把之前的var进行了省略，然后中间使用了逗号进行隔开 */</span><span class="token comment">/* 当我们定义多个变量的时候，我们就会使用这一种方式 */</span><span class="token keyword">var</span> userName<span class="token operator">=</span><span class="token string">"天天"</span><span class="token punctuation">,</span>userSex<span class="token operator">=</span><span class="token string">"女"</span><span class="token punctuation">,</span>userAge<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>c<span class="token punctuation">;</span>   <span class="token comment">//这个比较特殊，a,c都没有赋值，b直接赋值了</span><span class="token keyword">var</span> nickName<span class="token operator">=</span><span class="token string">"Lucy"</span><span class="token punctuation">;</span><span class="token keyword">var</span> isTeacher<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> money<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">//赋空值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明</strong>：上面的代码当中，我们在定义多个变量的时候，我们使用逗号隔开，每个变量在定义的时候可以赋值，也可以不赋值，如果赋值则使用=进行赋值</p></blockquote><blockquote><p>=是赋值的意思，把=等号右边的东西赋值给左边</p></blockquote><blockquote><p>目前阶段，所有变量的定义，我们都通过 var 来进行</p></blockquote><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>当我们定义变量以后，再向变量赋值的过程当中，会存以几种情况的值，例如姓名是汉字，年龄又是数字等</p><p>汉字：一二三四五六七八九</p><p>数字：123456789</p><p>变量后面接的值的数据类型主要有以下几种</p><ol><li>字符串（String）<br>指的是汉字，英文等其他的字符<br>当定义变量赋值字符串值的时候，我们一定要加上引号 （单引号与双引号都是用来形容字符串）<br>加了引号了数字不是数字类型，是字符串类型<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token string">'天天'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>数字（Number）<br>指的是0~9之间的数组成的数字（可以是整数，也可以是小数，还有负数）<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> userAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>布尔类型（Boolean）<br>它只有两个值true/false;<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>空值（Null）<br>当我们在定义一个变量的时候，我们如果不想给它赋值可以直接给一个null的空值<br>注意它通过typeof检测出来的结果是object<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>未定义（Undefined）<br>当一个变量在定义的时候，没有赋值，那么，它就是会出现undefined<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>上面的五个数据类型是JavaScript当中的<strong>基本数据类型</strong></p></blockquote></li></ol><p><strong>总结：</strong></p><p>变量有5种基本的数据类型，1种复杂的数据类型</p><hr><h4 id="JavaScript数据类型检测"><a href="#JavaScript数据类型检测" class="headerlink" title="JavaScript数据类型检测"></a>JavaScript数据类型检测</h4><p>在JS当中，我们有五种基本数据类型 ，后期我们还会根据这五种基本数据类型去完成<strong>复杂的数据类型</strong>（对象，数组【它是属于对象的一种】，方法）</p><p>在JS里在，当我们定义了一个变量标识符以后，我们这个变量就存在了，但是有时候，如果我们需要去检测一下这个变量的类型就需要使用我们的typeof去检测</p><hr><h5 id="typeof-关键字"><a href="#typeof-关键字" class="headerlink" title="typeof 关键字"></a>typeof 关键字</h5><p>这个关键字是用于检测JS当中的变量数据类型，它的语法格式如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> 变量名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>上面的代码运行以后就会得出我们的数据类型</p></blockquote><p>通过typeof我们可以检测出如下的几种数据类型</p><ol><li>number 数字类型</li><li>string 字符串类型</li><li>boolean 布尔类型</li><li>undefined 未定义类型</li><li>object 对象类型（null，数组，对象，正则表达式）</li><li>function 方法类型</li></ol><blockquote><p><strong>说明</strong>：typeof可以检测出任何数据类型，不管是基本的数据类型，还是复杂的数据类型</p></blockquote><blockquote><p><strong>注意</strong>：关于对象的数据类型检测，我们后面有其它的方法进一步检测(instanceof,isArray等）</p></blockquote><hr><h5 id="JavaScript数据类型的可变性"><a href="#JavaScript数据类型的可变性" class="headerlink" title="JavaScript数据类型的可变性"></a>JavaScript数据类型的可变性</h5><p>JS的数据类型并不是一定不变的，它的数据类型是由后面的值来决定的，你进行什么类型的赋值，这个变量就是一个什么数据类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> a<span class="token punctuation">;</span><span class="token comment">//得到的是number数据类型</span>a<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment">//得到的是string数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：在其它的C/Java/C++/C#等编程语言里面，数据类型是不可变的，定义变量标识符必须在变量的前面先指定变量的数型如（int,string,boolean等）,可是在JS里面，所以的变量定义都是使用var来进行的，这个时候，变量的数据类型就不由前面的关键var决定了，而是由后面的值来决定的，后面接什么值就指定了它是什么类型。</p><p>通过这一种区别，我们可以把JS语言和其它的语言做一个区分</p><p>如果在定义变量的时候，变量的类型由前面的关键字决定的，我们把这种编程语言叫<strong>强类型编程语言</strong></p><p>如果变量的数据类型是由后面的值来决定的，这种编程语言我们叫<strong>弱类型编程语言</strong></p><hr><h4 id="JavaScript-数据类型转换"><a href="#JavaScript-数据类型转换" class="headerlink" title="JavaScript 数据类型转换"></a>JavaScript 数据类型转换</h4><h5 id="字符串string转数字number"><a href="#字符串string转数字number" class="headerlink" title="字符串string转数字number"></a>字符串string转数字number</h5><ol><li>使用Number这个方法来进行<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">'123.45'</span><span class="token punctuation">;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.45</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token string">'123.45.67'</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token string">'项目1'</span><span class="token punctuation">;</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token string">'1号教室'</span><span class="token punctuation">;</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'j'</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>NaN：全称 Not a Number(不是一个数字)，当一个运算经过计算本来应该得到一个Number数的时候结果报错了，就会出现NaN, typeof NaN得到的结果是”number”</p></blockquote></li></ol><p><strong>Number在进行转换的时候，必须是一个合法的数字字符串，不然就会报NaN</strong></p><ol start="2"><li>使用 parseInt() / parseFloat() 方法来进行转换<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">'123.45'</span><span class="token punctuation">;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _d <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'_d'</span><span class="token punctuation">,</span> _d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.45</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token string">'123.45.67'</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _f <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'_f'</span><span class="token punctuation">,</span> _f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.45 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token string">'项目1'</span><span class="token punctuation">;</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token string">'1号教室'</span><span class="token punctuation">;</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'j'</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>parseInt是直接去掉小数，不做四舍五入的处理<br>parseInt或parseFloat只要前面是字符串的数字，都可以尝试去转，转换到非数字的地方就结束</p></blockquote></li></ol><hr><h5 id="其它类型转字符串（string）类型"><a href="#其它类型转字符串（string）类型" class="headerlink" title="其它类型转字符串（string）类型"></a>其它类型转字符串（string）类型</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要将上面的a转换成字符串有以下几种方法</p><ol><li><p>将任何类型的数据转换成字符串，有一个最简便的方法就是直接加上一个空的字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment">//结果为字符串"101"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过调用String方法来进行转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 数字转字符串</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串 101</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span><span class="token comment">// null类型转字符串</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span><span class="token comment">// 布尔值转字符串</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串 true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span><span class="token comment">// undefined类型转字符串</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一种方式与第一种方式计算结果一样，只是方法不一样而已</p></li><li><p>调用toString()方法来进行转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//结果为"10"</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//结果为字符串的“true”</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> d<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>注意</strong>：null与undefined 没有 toString()的方法</p><hr><h5 id="数字与布尔Boolean类型的转换"><a href="#数字与布尔Boolean类型的转换" class="headerlink" title="数字与布尔Boolean类型的转换"></a>数字与布尔Boolean类型的转换</h5><ol><li><p>数字的0与1转换成boolean类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token function">Boolean</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//得到布尔类型false</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token function">Boolean</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//得到布尔类型true</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">var</span> f<span class="token operator">=</span><span class="token function">Boolean</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//得到布尔类型true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>数字转Boolean的时候，如果这个数是明确的0，那么就是false,否则一律是true</p></blockquote></li><li><p>字符串数字的”0”与”1”转boolean类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token function">Boolean</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//得到布尔true</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token function">Boolean</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//得到布尔类型true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>针对上面的情况，我们需要将字符串的”0”与’1’先转换成数字的0和1，再进行操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">;</span><span class="token keyword">var</span> _a<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//先转换成数字0</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token function">Boolean</span><span class="token punctuation">(</span>_a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//得到结果false</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span><span class="token keyword">var</span> _c<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先转在数字1</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token function">Boolean</span><span class="token punctuation">(</span>_c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//再转换成布尔true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>布尔类型转成数字 0 或 1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//得到数字1</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//得到数字0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串的”true” 与 “false”能否转换成 true/false 或 0/1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">"true"</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token string">"false"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="变量的区域性（作用域）"><a href="#变量的区域性（作用域）" class="headerlink" title="变量的区域性（作用域）"></a>变量的区域性（作用域）</h4><ol><li><p>使用 var 定义的变量<strong>没有块级作用域</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 没有块级作用域指的是如果用花括号&#123;&#125;包裹起来，形成不了作用域（function里面的花括号除外） */</span><span class="token comment">/* JS里面的花括号形成不了变量的封闭环境 */</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment">//var定义的变量没有块级作用域</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//这是不会报错的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>花括号形成不了封闭环境，所以你在前面无论加上什么如我们后期的if/else/for/while等都不会形成封闭环境<br>但是加上function以后就会有封闭环境</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment">//当var定义在function的花括号里面，就会有作用域了</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错 a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>script标签形成不了作用域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 在一个页面里面，可以有多个script标签，但是它们仍然不具备封闭环境 */</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>变量区域性<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个时候的代码不会报错，因为script形成不了封闭的环境，页面最终还是会将之个 script的代码合并在一起执行</p></blockquote></li></ol><hr><h4 id="JavaScript-中的操作符"><a href="#JavaScript-中的操作符" class="headerlink" title="JavaScript 中的操作符"></a>JavaScript 中的操作符</h4><h5 id="加法操作符"><a href="#加法操作符" class="headerlink" title="加法操作符 +"></a>加法操作符 +</h5><ol><li><p>数字与数字相加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// c = 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在数值与数值相加的情况下，以下特殊情况需要单独处理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">NaN</span><span class="token operator">+</span><span class="token number">NaN</span><span class="token punctuation">;</span>   <span class="token comment">//结果还是NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>NaN在五种基本数据类里面，除了String字符串以外，其它的都是NaN<br>在JS里面，Infinity代表了无穷大正数，-Infinity代表了无穷大的负数，当它们进行运算的时候，要特别注意</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token operator">+</span><span class="token number">Infinity</span><span class="token punctuation">;</span>   <span class="token comment">//得到的结果仍然是无穷大</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 得到也是 Infinity</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>字符串与数字相加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 字符串与数字相加，结果是字符串，它会把数字先转成字符串，然后连接在一起</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token operator">+</span><span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment">//结果"hello123"</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"456"</span><span class="token operator">+</span><span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment">//结果"456123"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>字符串与字符串相加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//指的就是字符串的拼接</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token operator">+</span><span class="token string">"world"</span><span class="token punctuation">;</span>   <span class="token comment">//结果"hello world"</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token operator">+</span><span class="token string">"520"</span><span class="token punctuation">;</span>       <span class="token comment">//结果 "你好520"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>其他类型数据相加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//得到结果1</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">//NaN</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//结果为1</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//结果为2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以把false与null看成是0,undefined会报NaN,true可以看成是1<br>五种基本数据类型里面，只有string字符串与undefined相加不为NaN</p></blockquote></li></ol><h5 id="减法操作符"><a href="#减法操作符" class="headerlink" title="减法操作符 -"></a>减法操作符 -</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//9</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">-</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//20</span><span class="token keyword">var</span> _b <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">-</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//19</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">-</span><span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">//15</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">11</span><span class="token operator">-</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>   <span class="token comment">//NaN</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">-</span><span class="token number">NaN</span><span class="token punctuation">;</span>    <span class="token comment">//NaN</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//NaN</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">-</span><span class="token string">"b"</span><span class="token punctuation">;</span>    <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="乘法操作符"><a href="#乘法操作符" class="headerlink" title="乘法操作符 *"></a>乘法操作符 *</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//10</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">*</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//   0</span><span class="token keyword">var</span> _b <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">*</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//  20</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">*</span><span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">//  0</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">11</span><span class="token operator">*</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>   <span class="token comment">//NaN</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">*</span><span class="token number">NaN</span><span class="token punctuation">;</span>    <span class="token comment">//NaN</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//NaN</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token string">"b"</span><span class="token punctuation">;</span>    <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="除法操作符"><a href="#除法操作符" class="headerlink" title="除法操作符 /"></a>除法操作符 /</h5><p>除法与乘法保持一致，唯独多了一个0的处理问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//结果NaN</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span>   <span class="token comment">//Infinity</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="取余操作符"><a href="#取余操作符" class="headerlink" title="取余操作符 %"></a>取余操作符 %</h5><p>一个整数操作另外一个整数的时候，取它的余数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">//结果1</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span><span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">//NaN</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span><span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">//NaN</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//结果为0</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span><span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符 =="></a>相等操作符 ==</h5><p>在JavaScript当中，我们的相等是使用等号==来进行的，如果要判断两个变量（对象）是否相等，这个时候，我们就要使用相等操作符<br>相等操作符与赋值操作符非常相像，都是使用等号，但是赋值操作符使用一个等号=，而相等操作符使用两个等号==</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">==</span>b<span class="token punctuation">;</span>  <span class="token comment">//这句话是成立的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意以下代码</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>a<span class="token operator">==</span>b<span class="token punctuation">;</span> <span class="token comment">//true</span>b<span class="token operator">==</span>c<span class="token punctuation">;</span> <span class="token comment">//true</span>a<span class="token operator">==</span>c<span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>重点说明</strong>：使用相等操作符去判断两个变量（对象）是否相等的时候，我们如果只有两个等号 == 去操作，这个时候，它会把两个等号 == 左右两边的值做类型转换（这个过程系统自动转换）以后再去执行判断操作</p></blockquote><h5 id="严格相等操作符"><a href="#严格相等操作符" class="headerlink" title="严格相等操作符 ==="></a>严格相等操作符 ===</h5><p>在JavaScript当中，当我们使用相等操作符==去操作的时候，这会自动的进行数据类型的转换，但是有时候，我们又不希望它进行数据类型转换 ，这个时候，我们就需要使用严格相等操作符 ===</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>a<span class="token operator">===</span>b<span class="token punctuation">;</span> <span class="token comment">//false;</span>b<span class="token operator">===</span>c<span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>普通相等 == 与严格相等 === 对比，普通相等 == 只判断变量的值是否相等，而不判断变量的类型是否相等，而 ===，即要判断值相等，也要判断类型相等</p></blockquote><p><strong>注意：</strong>NaN不与任何东西作比较，只要一比较就是false</p><blockquote><p>上面的东西如果有严格相等，全都不成立 ，都是false</p></blockquote><p>== 与 === 都是判断相等操作，还有一个不等的操作符 != , !== ,它跟等号反着判断就行了</p><h5 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h5><p>只能操作一个值的操作符，我们叫一元操 作符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>a<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//控制台会输出11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的代码如果转换成自加或自减的一元操作符以后，会变成如下代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这个时候控制台会输出11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意事项</strong>：当我们在进行自加运算或自减运算的时候，我们可以把这个符号放在前面，也可以放在后面</p><ul><li>如果自加运算符在后面，则代表先使用自己，使用完以后再+1</li><li>如果自加运算符在前面，则代表前把自己+1，然后再使用自己<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>说明：上面的代码执行完毕以后，控制台打印出来的结果是<span class="token number">10</span>，但是最终a的值为<span class="token number">11</span>a先使用自己（这个时候的a还是<span class="token number">10</span>），使用完成以后（控制台打印完毕以后）自已再<span class="token operator">+</span><span class="token number">1</span>，这个时候最终的值为<span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>说明：上面的代码执行完毕以后，控制台打印出来的结果为<span class="token number">11</span>，a的最终值也为<span class="token number">11</span>a在使用之前就要把自己<span class="token operator">+</span><span class="token number">1</span>（<span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">11</span>），然后再去使用自己（控制台去打印），这个时候控制台的值为<span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>根据一元操作符的特点，我们可以演变成如下的操作<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>a<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">//a+=2;</span>a<span class="token operator">=</span>a<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">//a-=5;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>a<span class="token operator">+=</span>b<span class="token punctuation">;</span>    <span class="token comment">//a=a+b;</span>a<span class="token operator">-=</span>b<span class="token punctuation">;</span>    <span class="token comment">//a=a-b;</span>a<span class="token operator">*=</span>b<span class="token punctuation">;</span>    <span class="token comment">//a=a*b;</span>a<span class="token operator">/=</span>b<span class="token punctuation">;</span>    <span class="token comment">//a=a/b;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h5><p>在JavaScript当中，常用的逻辑操作符有三种，“与”，“或”，“非”</p><ol><li>与的操作符是&amp;&amp;</li><li>或的操作符是||</li><li>非的操作符!</li></ol><h6 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h6><ul><li>当运算的符号相同的时候<ul><li>与的操作，一假一假</li><li>或的操作，一真即真</li><li>非的操作，非真即假，非假即真</li><li>必须遵守<strong>短路原则</strong>，当一个表达式的前面部分已经能够得到结果，就停止计算，返回结果，如果得不到结果，就继续计算，直到最后一个</li><li>处理特殊值 NaN 或 null 与 undefined 或 “” 字符串的时候，可以把它看成是false（但本质上并不是false）   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 逻辑运算符支持短路原则： (表达式1）&amp;&amp;(表达式2) 如果表达式1为假，则表达式2不会进行运算，即表达式2“被短路” (表达式1）||(表达式2) 如果表达式1为真，则表达式2不会进行运算，即表达式2“被短路” */</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>a<span class="token operator">||</span>b<span class="token operator">||</span>c<span class="token punctuation">;</span>   <span class="token comment">// true</span><span class="token boolean">false</span><span class="token operator">||</span>b<span class="token operator">||</span>c<span class="token punctuation">;</span>  <span class="token comment">//null  因为已经计算到最后一个</span><span class="token boolean">false</span><span class="token operator">||</span>b<span class="token operator">||</span><span class="token boolean">true</span><span class="token operator">||</span>c<span class="token punctuation">;</span>   <span class="token comment">//true  计算到第3步就已经结束了</span><span class="token comment">//---------------------------------</span>a<span class="token operator">&amp;&amp;</span>b<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>    <span class="token comment">//false  </span>a<span class="token operator">&amp;&amp;</span>c<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">;</span>    <span class="token comment">//null</span>d<span class="token operator">&amp;&amp;</span>c<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">;</span>    <span class="token comment">//undefined</span><span class="token comment">/* 总结：a&amp;&amp; b :如果执行a后返回true，则执行b并返回b的值；如果执行a后返回false，则整个表达式返回a的值，b不执行；a || b :如果执行a后返回true，则整个表达式返回a的值，b不执行；如果执行a后返回false，则执行b并返回b的值； */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>当运算的符号不相同的时候<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">从左往右根据优先级来计算 <span class="token operator">!</span><span class="token operator">></span><span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token operator">||</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token boolean">true</span><span class="token operator">||</span>b<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>   <span class="token comment">//true</span><span class="token boolean">false</span><span class="token operator">||</span>c<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">;</span>   <span class="token comment">//null</span><span class="token boolean">false</span><span class="token operator">||</span>d<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>   <span class="token comment">//undefined</span><span class="token operator">!</span>b<span class="token operator">||</span>c<span class="token operator">||</span>d<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>a   <span class="token comment">//true||c||d&amp;&amp;false    得到结果true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>特殊情况特殊对待<br>我们在计算过程当中，可以把 0当成 false，把1当成true(不是真的是true/false)<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">第一种情况<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">||</span>b<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>     <span class="token comment">//1</span><span class="token number">0</span><span class="token operator">||</span>b<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>     <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">第二种情况，非<span class="token number">0</span>或<span class="token number">1</span>的情况<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token string">""</span><span class="token operator">||</span>b<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>    <span class="token comment">//假设""也是false    false</span><span class="token string">""</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>    <span class="token comment">//得到 ""</span><span class="token string">""</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">||</span>c<span class="token punctuation">;</span>    <span class="token comment">//得到null</span><span class="token operator">!</span><span class="token string">""</span><span class="token operator">||</span>b<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>   <span class="token comment">//不要想太复杂 !""结果为true    最后结果肯定是true</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token operator">||</span>b<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>   <span class="token comment">//true</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token operator">||</span>b<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>  <span class="token comment">//true</span><span class="token comment">//---------------------------------------------</span><span class="token string">"a"</span><span class="token operator">||</span>b<span class="token operator">&amp;&amp;</span>c<span class="token punctuation">;</span>   <span class="token comment">//"a"</span><span class="token number">123</span><span class="token operator">||</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>   <span class="token comment">//123   Boolean(123)得到true</span><span class="token keyword">null</span><span class="token operator">||</span><span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token comment">//hello;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>心得：</strong></p><blockquote><p>在上面的两种情况下面，我们可以把这些值做一次Boolean转换，然后得到true或false以后再去计算（只是把这个值看成是true或false并不是真正的true或false）</p></blockquote><blockquote><p>以下内容会被当成false处理：”” , false , 0 , null , undefined , NaN</p></blockquote><h5 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h5><p>条件运算符是根据某一个条件来得出某一个结果，它有固定的书写格式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> 判断条件<span class="token operator">?</span>第一个值<span class="token operator">:</span>第二个值<span class="token punctuation">;</span><span class="token comment">/* 在上面的格式上当，如果判断条件成立，则返回第一个值，否则返回第二个值 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token operator">=</span>a<span class="token operator">></span>b<span class="token operator">?</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>案例1：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token punctuation">;</span><span class="token comment">//要求，请将a与b作对比以后然后将其中大的一个值赋值给变量C</span>通过条件运算符，我们可以很好的去判断上面的问题<span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token comment">/* a小于b，所以c取值b */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例2：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">var</span> d<span class="token punctuation">;</span><span class="token comment">//请将a,b,c中最大的一个值赋值给d</span><span class="token comment">//-------------------</span>思路：首先完成第一次比较，将a与b作比较，返回a与b中大的哪一个数，我们可以定义一个变量temp，然后再拿这个temp去和<span class="token constant">C</span>做比较（第二次对比），然后再通过条件运算符去返回其中大的一个数<span class="token keyword">var</span> temp <span class="token operator">=</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token keyword">var</span> max <span class="token operator">=</span> temp<span class="token operator">></span>c<span class="token operator">?</span>temp<span class="token operator">:</span>c<span class="token punctuation">;</span><span class="token comment">/* max现在就是最大的值 */</span><span class="token comment">//-------------------</span>现在要求把上面的两行代码换成一行代码去完成<span class="token keyword">var</span> d <span class="token operator">=</span> a<span class="token operator">></span>b<span class="token operator">?</span><span class="token punctuation">(</span>a<span class="token operator">></span>c<span class="token operator">?</span>a<span class="token operator">:</span>c<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>b<span class="token operator">></span>c<span class="token operator">?</span>b<span class="token operator">:</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* a 和 b作比较，如果 a 大，取 a 和 c 作比较；如果 b 大，取 b 和 c 作比较 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例3：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// Boolean(undefined) 为false 取值2</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token string">"123"</span><span class="token operator">?</span><span class="token string">"hello"</span><span class="token operator">:</span><span class="token string">"world"</span><span class="token punctuation">;</span><span class="token comment">// Boolean("123") 为true 取值"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>undefined，NaN可以得到false，所以条件不成立，而”123”不可以得到false,所以条件成立</p></blockquote><blockquote><p>把前面这里的值做一次Boolean()操作，得到true就代表成立，得到false就代表不成立</p></blockquote><h5 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h5><p>在JavaScript当中，关系操作符包含大于（&gt;）小于（&lt;），大于等于(&gt;=)，小于等 于（&lt;=）</p><p>在强类型的编程语言里面，关系操作符只是对数字类型（Number类型）做比较，但是在JavaScript当中，它不仅仅可以对数字做对比，也可以做其它的类型做对比</p><ol><li>数字和数字对比<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 得到false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>数字和字符串对比<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"3"</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 得到true</span><span class="token comment">/* 说明：数字型的字符串与数字作对比，那么另一个会自动转换成我么的数字 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>特殊数字NaN和其他做对比<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result1 <span class="token operator">=</span> <span class="token number">NaN</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> result2 <span class="token operator">=</span> <span class="token number">NaN</span><span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">/* 说明：这里结果都是false， 任何数与NaN做对比得到都是false*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>字符串数字和数字符数字作对比<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token string">"78"</span><span class="token operator">></span><span class="token string">"9"</span><span class="token punctuation">;</span>  <span class="token comment">//false 字符串9的ASCII值是57 值越小越大</span><span class="token comment">/* 注意：如果对比的两边都是字符串，则需要去判断它们的字符串编码 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>字符串编码指是在计算当中，所有的数字，特殊符号，英文字母都有一个特殊的数字编码，这个编码我们叫Acsll编码</p></blockquote></li></ol><p>ASCII对照表：<a href="https://tool.oschina.net/commons?type=4">https://tool.oschina.net/commons?type=4</a></p><ol start="5"><li>对象与对象比较<br>如果这个对象有valueOf()的方法，则用valueOf()的值作对比，如果没有，则用toString()的方法做对比</li></ol><p><strong>思考</strong>：如果null，undefined,””与其它的数做对比的时候，结果如何？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">></span><span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">//true;</span><span class="token number">1</span><span class="token operator">></span><span class="token keyword">undefined</span><span class="token punctuation">;</span>   <span class="token comment">//false;</span><span class="token number">1</span><span class="token operator">></span><span class="token string">""</span><span class="token punctuation">;</span>       <span class="token comment">//true;</span><span class="token keyword">null</span><span class="token operator">></span><span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">//false</span><span class="token string">"A"</span><span class="token operator">&lt;</span><span class="token string">"b"</span><span class="token punctuation">;</span>     <span class="token comment">//65&lt;98   true</span><span class="token comment">//最复杂的是中文</span><span class="token string">"我"</span><span class="token operator">></span><span class="token string">"你"</span><span class="token punctuation">;</span>    <span class="token comment">//中文字符串对比的是unicode码</span><span class="token comment">//25105 对比 20320  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项：</strong></p><blockquote><p>null==undefined，同时1&gt;null成立，所以很多人理所当然就认为1&gt;undefined，但结果不是</p></blockquote><blockquote><p>中文当中var a=”我” a.chatCodeAt(0)得到unicode码，然后再去对比</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;JavaScript是区分大小写的（HTML和CSS不区分大小写）&lt;/li&gt;
&lt;li&gt;JavaScript必须写在&amp;lt;==script==&amp;gt;标签里面，并且制定正确的类型（type）&lt;pre class=&quot;line-numbers language-markup&quot; data-language=&quot;markup&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/javascript&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="基础语法" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 什么是JavaScript？</title>
    <link href="http://example.com/2022/06/29/js/"/>
    <id>http://example.com/2022/06/29/js/</id>
    <published>2022-06-29T08:09:47.465Z</published>
    <updated>2022-06-29T09:50:35.980Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JavaScript历史"><a href="#JavaScript历史" class="headerlink" title="JavaScript历史"></a>JavaScript历史</h4><p>在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p><p>由于网景公司希望能在静态HTML页面上添加一些<strong>动态效果</strong>，于是叫<strong>Brendan Eich</strong>这哥们在两周之内设计出了<strong>JavaScript</strong>语言。</p><p>为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p><hr><span id="more"></span><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h4><p>因为网景开发了JavaScript，一年后<strong>微软</strong>又模仿JavaScript开发了<strong>JScript</strong>，为了让JavaScript成为<strong>全球标准</strong>，几个公司联合<strong>ECMA</strong>（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为<strong>ECMAScript标准</strong>。</p><blockquote><p>简单来说，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。</p></blockquote><p>如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。</p><hr><h4 id="JavaScript版本"><a href="#JavaScript版本" class="headerlink" title="JavaScript版本"></a>JavaScript版本</h4><p>由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称<strong>ES6</strong>）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。</p><blockquote><p>由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。</p></blockquote><hr><h4 id="JavaScript到底是什么"><a href="#JavaScript到底是什么" class="headerlink" title="JavaScript到底是什么"></a>JavaScript到底是什么</h4><p>它是一种脚本语言，提供页面与用户的交互途径，主要包含三个方面的东西：</p><ul><li>ECMSScript（ES）：它主要用来定义JavaScript的语法规范，现在主流的版本是5.1。</li><li>DOM(document object model:文档对象模型)</li><li>BOM(bowser object model:浏览器对象模型)</li></ul><hr><h4 id="JavaScript运行在什么地方"><a href="#JavaScript运行在什么地方" class="headerlink" title="JavaScript运行在什么地方"></a>JavaScript运行在什么地方</h4><p>在设计JavaScript这门语言的时候，我们当初的设计者是要让这一门语言运行在浏览器里面的，所以，我们的JavaScript与CSS一样都是运行在页面当中。但是它也有一个特殊的标签进行包裹</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>JS代码与CSS代码有很多的相似之处，主要体现的代码的位置，CSS的代码主要在三个位置，JS代码也就是行内代码，和Script代码，以及我们的外部JS文件</p></blockquote><ol><li><p>写在标签里面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>上面的 alert(‘hello world’) 就是我们的JS代码，它直接和HTML代码写在了一起与我们的CSS是一样的，我们的CSS代码是写在了style这个属性里面</p></blockquote></li><li><p>写在特定的标签里面，与CSS内部样式块相同</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">div</span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面的代码 alert(‘你好’) 也是JS代码，但是它写在了我们的script的标签里面</p></blockquote></li><li><p>写在外部文件当中<br>我们的CSS样式如果过多以后，我们会把这些CSS样式单独写在一个文件里面，这个文件以.css结尾，同理，如果一个页面的JS代码过多，我们也可以单独的写在一个文件里面，这个文件以.js结尾</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p><strong>特别注意：</strong><br>一个script标签如果加了src属性连接到另一个JS文件里面， 这个script标签里面就不能加东西了</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/javascript.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div1<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">"改下你"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>==以上写法是错误的==</strong></p><hr><h4 id="JavaScript的注释"><a href="#JavaScript的注释" class="headerlink" title="JavaScript的注释"></a>JavaScript的注释</h4><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F;单行注释 &#x2F;*多行注释*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;JavaScript历史&quot;&gt;&lt;a href=&quot;#JavaScript历史&quot; class=&quot;headerlink&quot; title=&quot;JavaScript历史&quot;&gt;&lt;/a&gt;JavaScript历史&lt;/h4&gt;&lt;p&gt;在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。&lt;/p&gt;
&lt;p&gt;由于网景公司希望能在静态HTML页面上添加一些&lt;strong&gt;动态效果&lt;/strong&gt;，于是叫&lt;strong&gt;Brendan Eich&lt;/strong&gt;这哥们在两周之内设计出了&lt;strong&gt;JavaScript&lt;/strong&gt;语言。&lt;/p&gt;
&lt;p&gt;为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript -函数</title>
    <link href="http://example.com/2022/06/28/function/"/>
    <id>http://example.com/2022/06/28/function/</id>
    <published>2022-06-28T14:25:30.261Z</published>
    <updated>2022-06-29T09:50:43.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>概念</strong>：</p><p>将任意多条代码组装在一起，可以在任何地方经过任意多次的<strong>调用执行</strong>，多次组装在一起的代码需要通过 关键字<strong>function</strong>来定义</p><span id="more"></span><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span> 变量是通过 <span class="token keyword">var</span> 来定义的<span class="token operator">-</span> 函数是通过 <span class="token keyword">function</span> 拉定义的程序是通过一行一行的语句来组成的，语句是组成代码最基本的单位，同时这些基本单位，我们也可以把它组合在一起分成一个一个的小模块，将这些语句分成一个一个小模块的功能，我们叫方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h4 id="定义函数的方式"><a href="#定义函数的方式" class="headerlink" title="定义函数的方式"></a>定义函数的方式</h4><h5 id="通过关键字-function-定义"><a href="#通过关键字-function-定义" class="headerlink" title="通过关键字 function 定义"></a>通过关键字 function 定义</h5><p>函数定义需要通过关键字 function，定义的语法格式如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">方法名</span><span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span>，参数<span class="token number">2.</span><span class="token operator">...</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 代码体</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span>，参数<span class="token number">2</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 代码体</span><span class="token punctuation">&#125;</span><span class="token comment">//----------------------</span>通过上面的语法格式，我们可以自己尝试着去定义一个方法<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'世界，你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">typeof</span> sayHello<span class="token punctuation">;</span> <span class="token comment">// 类型结果为“function”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分析：</p><ol><li>function 是定义方法的关键字</li><li>sayHello 则是这个方法的名字</li><li>a 和 b 是方法的参数</li><li>花括号里面的东西就是代码体</li></ol><h5 id="通过函数表达式来定义"><a href="#通过函数表达式来定义" class="headerlink" title="通过函数表达式来定义"></a>通过函数表达式来定义</h5><p>我们知道所有变量的定义都使用关键字 var 来进行， var 定义的变量后面跟什么数据，这个变量就是什么数据类型，比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>   <span class="token comment">//string类型</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment">//number类型</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment">//Boolean</span><span class="token keyword">var</span> d<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment">//object</span><span class="token keyword">var</span> f<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//undefined;</span><span class="token comment">//我们给什么样的值，它就是一个什么类型</span><span class="token comment">//---------------------------</span>如果给一个变量赋值成一个<span class="token keyword">function</span>，是什么样子？<span class="token keyword">var</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 代码体</span><span class="token punctuation">&#125;</span><span class="token keyword">typeof</span> sayHello<span class="token punctuation">;</span> <span class="token comment">// function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分析：</p><ol><li>所有变量的定义，我们都可以使用 var 来进行，变量后面跟什么数据 ，它就是什么类型</li><li>sayHello 后面根的是一个 function，所以 sayHello 它应该是一个 方法</li></ol><h5 id="通过-Function-来进行定义"><a href="#通过-Function-来进行定义" class="headerlink" title="通过 Function 来进行定义"></a>通过 Function 来进行定义</h5><blockquote><p>小写的 function 是关键字，大字的 Function 是系统自已定义了方法</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> sayHello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> sayHello<span class="token punctuation">;</span>   <span class="token comment">//function</span><span class="token comment">// 这一种方式不建议大家去使用，它的使用场景是在后期方法动态创建里面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>三种定义函数的方式我们都要接触了解，但是在日常工作当中，你们所经常使用的方式就是第一种与第二种情况</em></p><p><strong>思考</strong>：既然我们在工作当中经常会使用到第一种与第二种的情况，那么请各位同学注意，第一种情况的定义与第二种情况的定义有啥区别？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">sayHello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这一句代码它不会报</span><span class="token function">sayHello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这一句代码会报错</span><span class="token keyword">var</span> <span class="token function-variable function">sayHello1</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">sayHello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"吃了没，世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">1</span><span class="token punctuation">.</span>function 关键字定义的方法可以在调用之前调用（任何地方，前后都行）<span class="token number">2</span><span class="token punctuation">.</span>var 定义的方法只能在定义的代码之后去调用（执行上下文）<span class="token comment">// 建议大家前期先用第一种，也就是function定义的方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="函数的代码体，会形成作用域"><a href="#函数的代码体，会形成作用域" class="headerlink" title="函数的代码体，会形成作用域"></a>函数的代码体，会形成作用域</h4><p>用 var 定义的变量没有作用域，但是定义在 function 的花括号里面的代码，它是有作用域的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// userName定义到了方法里面，所以它是有作用域的</span>    <span class="token comment">// 它的作用域是方法的花括号开始 ，到方法的花括号结束</span>    <span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token string">"天天"</span><span class="token punctuation">;</span>    <span class="token comment">//在作用域的范围里面，我们可以随意的调用变量，但是一旦出了这个花括号 ，就不行了</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，提示 userName 没有被定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>：方法体里面定义的东西在方法体外边是不能够被使用的，如果真的要使用，可以使用后面我们学习的一另一个关键字 return</p><p><strong>终上所述</strong>：如果你希望变量既能够在方法里面使用，也能够在方法外边使用，那么你就定义到方法的外边，如果你仅仅只是希望这个变量在方法里面使用，而不希望它在方法外边使用，则把它定义在方法的里面</p><p>我们一般把定义在方法里面的变量叫<strong>局部变量</strong></p><p>把定义在方法外边的变量叫<strong>全局变量</strong></p><hr><h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><p>方法（函数）通过上面的三种方式定义好了以后，你不调用它，它就不会执行，因为方法是调用执行的</p><p>那么方法到底应该怎么调用呢？？？</p><blockquote><p>方法的调用其实指的就是把之前写在 function 花括号里面的代码执行一次</p></blockquote><h5 id="常规调用"><a href="#常规调用" class="headerlink" title="常规调用"></a>常规调用</h5><p>这一种方式是最基本的调用方式，当一个方法定义好了以后就会存在一个方法名，我们的常规调用就是通过这一个方法名来进行调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">方法名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//它的调用方式就是方法名加()</span><span class="token comment">//-------------------------</span>在这种方式里面，我们的调用是需要通过方法名来进行的（ 在调用方法的时候，我们可以给方法的参数赋值，这个赋值过程 ，我们叫传参）<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好才是真的好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//现在我们已经在上面的代码时面定义了一个方法，如果我们不去调用它，那么它就永远不会执行，现在我们通过普通的方式去调用它</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用方法，直接执行方法里面的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h5><p>在某些时间，如果我们希望定义好了这些方法以后立即的执行一次，怎么办呢，这个时候，我们可以使用到立即执行函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义方法</span><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用方法执行</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>在上面的代码里面， 我们可以看到之前已经定义好了一个方法，它的名子叫sayHello，然后我们又马上调用了它像这样一种情况，在后期工作的时候如果碰到了，我们可以使用立即执行函数<span class="token comment">//------------------------</span><span class="token operator">+</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码分析</strong>：</p><p>上面的代码通过 function 关键字定义好了 sayHello 方法以后，它在这个地方前面加了一个 + , 后面又添加上了一个()这个时候，碰到这种情况，大家要知道，这是一个立即执行函数，它定义好以方法以后，会立即执行一次</p><h5 id="函数表达式执行"><a href="#函数表达式执行" class="headerlink" title="函数表达式执行"></a>函数表达式执行</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">sayHello</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 上面的代码同步与下面的代码</span><span class="token keyword">var</span> <span class="token function-variable function">sayHello</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们把上面的三种情况的调用归为第一大类情况，他们的调用最终都是需要去加括号的</strong></p><hr><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//我们在使用function定义方法的时候，除了定义方法名，还可以使用参数</span><span class="token keyword">function</span> <span class="token function">方法名</span><span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2.</span><span class="token operator">...</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//代码体</span><span class="token punctuation">&#125;</span><span class="token function">方法名</span><span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2.</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定义方法的参数，可以理解成变量</li><li>定义参数的时候，我们可以把它当成是一个变量，但是，我们不能够再去使用 var 关键字了<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">userName</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>代码分析：    在上面的代码里面，我们通过<span class="token keyword">function</span>关键字定义了一个方法名为sayHello的方法，    同时我们也看到后面的括号里面有userName<span class="token punctuation">,</span>我们叫参数，    你可以理解为，它就相当于在<span class="token keyword">function</span>里面定义的变量    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined ，因为我们在调用方法的时候，如果方法需要参数，我们在调用的过程中给他参数</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">'天天'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//-----------------------------------</span>    上面的调用过程首先是先调用了方法sayHello，然后在调用的时候，还给之前定义的参数userName赋值为“天天”    在调用方法的时候，值会赋值给参数，这个赋值的过程我们叫传参<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="a-形式参数"><a href="#a-形式参数" class="headerlink" title="a.形式参数"></a>a.形式参数</h5><p>形式参数简称“形参”,指的是方法在定义的过程当中所使用（所出现）的参数</p><p>形参默认是没有值的，它的值默认情况下是 undefined</p><p>形参可以理解成变量，它的作用域只能在方法里面，不能在方法外边</p><h5 id="b-实际参数"><a href="#b-实际参数" class="headerlink" title="b.实际参数"></a>b.实际参数</h5><p>实际参数简称“实参”，指的是方法调用的时候里面的的真实参数（真实数据）</p><p><strong>重要</strong>：值是由实参赋值给形参（也可以理解为值是由实参传递给形参）</p><h5 id="c-实参与形参的对应关系"><a href="#c-实参与形参的对应关系" class="headerlink" title="c.实参与形参的对应关系"></a>c.实参与形参的对应关系</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在上面的代码里面，我们在定义方法的时候，定义了两个形参，在调用方法的时候，我们给了两个实参</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h5><p>​现在有如下三种情况，请同学们判断如何进行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>当实参与形参个数相同的时候<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当实参与形参相同的时候，它们可以实现一一对应的关系，这个时候的a为10,b为20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li> 当实参小于形参个数的时候<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当实参个数小于形参个数的时候，前面的值实现一一对应，后面多出来的形参的值为undefined;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li> 当实参个数大于形参个数的时候<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前面的值实参与形参可以实现一一对应的效果，多出来的值如果需要获取 ，可以找arguments, 因为当前方法所接收到的所有实参的值都在arguments这个类数组里面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><hr><h4 id="arguments-参数集合"><a href="#arguments-参数集合" class="headerlink" title="arguments 参数集合"></a>arguments 参数集合</h4><p>在所有的 function 里面，有一个隐藏的内置的对象 ，这个对象是<strong>当前方法所接收到的参数集合，也就是实参的集合</strong>，它就是<strong>arguments</strong></p><p>arguments 仅仅只作用在方法的内部 ，出了方法以后就不能使用</p><p>arguments 它是一个<strong>类数组</strong></p><p><strong>类数组</strong>：<br>具备数组特性（通过索引取值，通过 length 确定长度），但不具备数组的方法的集合，Array.isArray(类数组) 得到的结果为 false</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在每个方法方法的内部 ，它都有一个隐藏的内置对象 arguments，它包含了当前方法所接收到的参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码里面，我们通过<strong>add(10,20)</strong> 这种方式来调用了方法，并向方向里面传递了两个参数。这个时候 a 代表的就是 10，b 代表的就是 20</p><p>同时，我们也可以看到在方法内部 的 arguments 对象里面，它也保存了此次传递进去的 2 个实参</p><p><strong>小案例</strong>：请编写一个方法，实现多个数的相加，然后打印输出结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//arguments代表所接收到的所有实参</span>    <span class="token comment">//现在只需要将这些实参一个一个的加起来就可以了</span>    <span class="token comment">//arguments它是一个类数组，它具备数组的特性，索引取值，length代表长度</span>    <span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//sum=sum+arguments[i];</span>        sum<span class="token operator">+=</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="方法的返回值"><a href="#方法的返回值" class="headerlink" title="方法的返回值"></a>方法的返回值</h4><p>一个方法经过调用执行完毕以后，它可以通过关键字 return 向外部返回一个值，这个值，我们可以通过变量把它接收到</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我在吃饭'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我在超市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'寻找商品'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"糖果"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined "糖果"</span><span class="token comment">// 调用eat的时候，方法没有返回值，所以a得到的是 undefined</span><span class="token comment">// 调用buy的时候，return了一个“糖果”，所以b接受到的值就是“糖果”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="所有的方法都有返回值"><a href="#所有的方法都有返回值" class="headerlink" title="所有的方法都有返回值"></a>所有的方法都有返回值</h5><ol><li>JS 无需指定函数的返回值，因为 JS 可以在函数内部的任何地方返回任何类型的值</li><li>如果 JS 没有通过 return 语句返回值 ，那么默认返回的就是 undefined;<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span>    x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//2</span><span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined;</span><span class="token keyword">var</span> str2<span class="token operator">=</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1</span><span class="token comment">//--------------------------</span>方法在调用的过程当中，如果我们需要接收方法的返回值（ 也就是<span class="token keyword">return</span>的值），可以使用一个变量去接收<span class="token keyword">var</span> 变量名<span class="token operator">=</span><span class="token function">方法名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这样整个方法调用结束以后，方法内部return出来的值就会赋值给变量名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="方法返回值的用处"><a href="#方法返回值的用处" class="headerlink" title="方法返回值的用处"></a>方法返回值的用处</h5><ol><li><p>结束方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">当一个方法的内部发现了<span class="token keyword">return</span>的关键字以后，那么，整个方法就直接结束了，后面的代码始终都不会执行<span class="token keyword">function</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始买面了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"热干面"</span><span class="token punctuation">;</span>     <span class="token comment">//因为看到了return关键字，所以方法直接 返回一个值以后，结束运行</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"鸡蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//后面的这一行代码因为在return后面，所以不会执行了</span><span class="token punctuation">&#125;</span><span class="token comment">//-------------------------------</span>如果仅仅只是想结束方法，而不是去返回值 ，可以直接给一个<span class="token keyword">return</span>关键字<span class="token keyword">function</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>   <span class="token comment">//直接return 结束代码</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更容易的实现模块化（低耦合）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//取arr最大值</span><span class="token keyword">function</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> max<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//现在max就是我们的最大值</span>    <span class="token comment">//我一定要告诉外边的人，你要我求的最大值是多少</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//排序</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> newArr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//新建一个新的数组，用这个新的数组保存排序以后的结果</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//求arr数组里面最大的值</span>        <span class="token comment">//在新的数组里面添加</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把当前最大值在arr里面删除</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> arr1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> resultArr<span class="token operator">=</span><span class="token function">sort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resultArr'</span><span class="token punctuation">,</span> resultArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9-0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>代码分析：</strong></p><p>本题在这里可以把它分为两个部分，第一部分是求当前数组里面最大的一个值，第二个部分就是把得到的这个最大值重新放到一个新的数组里面去，这每个方法只做一件事情就 OK 了</p><hr><h4 id="方法的调用者与方法的引用"><a href="#方法的调用者与方法的引用" class="headerlink" title="方法的调用者与方法的引用"></a>方法的调用者与方法的引用</h4><h5 id="方法的调用控制"><a href="#方法的调用控制" class="headerlink" title="方法的调用控制"></a>方法的调用控制</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">如果在某一段程序在调用方法的过程当中，我们希望某一个方法a只能被某另一个方法b调用，怎么办<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是方法a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是方法b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是c方法"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---------------------------</span>在上面，我们定义了两个方法，在定义的两个方法里面，我们a和b是同时存在，我们可以在任何地方调用a，我也可以在任何地方调用b<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//----------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，怎么样让 a 方法只能被 b 方法调用呢，而不能被 c 调用呢?</p><ol><li><p>通过作用域的方式来实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">方法的花括号会形成一个作用域 ，定义在方法里面的东西，不能被外部使用，所以我们可以把上面的代码做一些小小的改变<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是方法b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//现在，我把a方法定义在了方法b里面</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是方法a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在这里可以调用，因为a定义在了方法b里面</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是c方法"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//-------------</span>代码分析：当我们把方法a定义到了方法b以后，因为b是一个封闭的作用域 ，所以外边的任何东西都访问不到a<span class="token punctuation">,</span>只有b能够访问到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过方法内部属性 caller 来判断</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">在方法的内部除了一个arguments的隐藏对象以外，还有一个属性caller也是方法内部的隐藏属性通过caller这个属性，我们可以判断出是谁调用了这个方法如果是全局调用，那么这个caller就是空值<span class="token keyword">null</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>caller<span class="token operator">!=</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//如果当前方法不是b在调用，直接结束方法</span>   <span class="token punctuation">&#125;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是方法a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是方法b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是c方法"</span><span class="token punctuation">)</span>   <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="方法的引用"><a href="#方法的引用" class="headerlink" title="方法的引用"></a>方法的引用</h5><p>在方法的内部的隐藏对象里面，有一个属性叫 callee，这一个属性指向了当前的方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//本意是指当前方法参数的集合</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token operator">===</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//--------------</span>代码分析：在上面的代码里面，callee指向了当前的方法，当前的方法是a，所以callee就是a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>什么是重载：在编程语言里面，方法名相同，但是方法的参数类型或个数不相同，这个时候，同名的方法都会同时存在，这个情况，我们叫方法的重载 。</p><p>下面是 java 代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span>   <span class="token comment">//第一个方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是第一次出现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//第二个方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是第二次出现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//第三个方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是第三次出现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//相当于调用了第一个方法</span>   <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//相当于调用了第二个方法</span>   <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//相当于调用了第三个方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的一段 java 代码里面，我们可以看到三个同名的方法，它们的方法名相同</p><p>第一个方法与第二个方法的参数类型相同(都是 int 类型),但是它们的个数不相同</p><p>第一个方法与第三个方法的参数个数相同，但是它们的类型不相同(一个是 int,一个是 String)类型</p><p>针对上面的情况，在 Java 里面是允许，这样它们会构成一个东西叫<strong>方法的重载</strong></p><hr><h4 id="JS-方法没有重载"><a href="#JS-方法没有重载" class="headerlink" title="JS 方法没有重载"></a>JS 方法没有重载</h4><p>当在 JS 里面出现了重名的方法以后，我们如何处理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*    1.方法名相同    2.参数个数不相同*/</span><span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**************/</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是第一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是第二次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为 JS 的方法没有重载，所以它不可能像其它的编程语言那样，同名的方法同时存在，这个时候，后面的同名方法肯定会赋盖掉之前的方法，所以这个时候，当我们去掉用 add 的方法的时候，其实就是以后最一次定义的 add 方法为主</p><hr><h4 id="为什么-JS-没有重载"><a href="#为什么-JS-没有重载" class="headerlink" title="为什么 JS 没有重载"></a>为什么 JS 没有重载</h4><p>重载是根据<strong>参数的类型</strong>与<strong>参数的个数来</strong>区别出重名的方法的</p><ul><li><p>它不能确定参数类型</p><p>重载是根据参数的类型与参数的个数来区别出重名的方法的，但是因为 JS 在这里是一个弱类型语言，它所有的变量定义都使用 var,它并不能决定变量的类型，它的类型是由它具体的值来决定的</p></li><li><p>它不能确定参数的个数</p><p>我们在定义方法的时候，实参与形参是不需要实现一一对应关系 ，这样我们也确定不了参数的个数</p><p>现在我们既不能确定参数的类型 ，也不能确定参数的个数，所以在 JS 里面的方法是没有重载的，正是因为没有重载，所以当出现同名的方法的时候，后面的方法会覆盖掉之前的方法</p></li></ul><hr><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>方法内部如果又调用了当前方法，这样就形成了一个递归</p><p>递归的本质可以把它理解成我们之前的循环，所以如果递归没有处理好（没有判断条件），也很容易形成死循环</p><p><strong>案例 1：请输出 0~9 之间的每一个数</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//-------上面是for循环写法------------</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例 2：求 1~150 之间偶数的和，不允许使用循环</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sumA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sum2<span class="token operator">+=</span>i<span class="token punctuation">;</span> <span class="token comment">// sum2=sum2+i;</span>    i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">sumA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">sumA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//练习：求5的阶乘</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> num <span class="token operator">=</span><span class="token number">5</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">return</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1</span> num <span class="token operator">=</span><span class="token number">4</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1</span> num <span class="token operator">=</span><span class="token number">3</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">return</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1</span> num <span class="token operator">=</span><span class="token number">2</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">1</span> num <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">return</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>匿名函数也可以匿名方法，从名词上面理解就是这个方法没有名字</p><blockquote><p>方法如果有了名子以后，我们可以通过方法名去调用执行这个方法，如果没有名子，我们将无法调用</p></blockquote><h5 id="a-第一种情况"><a href="#a-第一种情况" class="headerlink" title="a.第一种情况"></a>a.第一种情况</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---------------------</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 像上面的函数，它没有名字，同时也立即执行了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-第二种情况"><a href="#b-第二种情况" class="headerlink" title="b.第二种情况"></a>b.第二种情况</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">+</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//------------------</span> <span class="token operator">+</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 上面的立即执行函数它也没有名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="匿名函数的参数"><a href="#匿名函数的参数" class="headerlink" title="匿名函数的参数"></a>匿名函数的参数</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p><strong>一个函数被作为参数传递给另一个函数（在这里我们把另一个函数叫做“otherFunction”），回调函数在 otherFunction 中被调用。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token string">'天天'</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token comment">//这个就是回调函数 a(name);</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我很好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'，你还好吗？'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 上面的代码，有两个方法，a和b，我们执行了b方法，并把a当做参数传给了b，那么这个时候a就是回调函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;概念&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;将任意多条代码组装在一起，可以在任何地方经过任意多次的&lt;strong&gt;调用执行&lt;/strong&gt;，多次组装在一起的代码需要通过 关键字&lt;strong&gt;function&lt;/strong&gt;来定义&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="函数" scheme="http://example.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 条件语句</title>
    <link href="http://example.com/2022/06/28/term-statement/"/>
    <id>http://example.com/2022/06/28/term-statement/</id>
    <published>2022-06-28T09:50:18.526Z</published>
    <updated>2022-06-29T09:50:29.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>条件语句某些其它的编程里面它也属于分支语句，它是根据一些条件来选择不同的代码去执行</p><p>条件语句在编程里面当作是 if…else…语句</p><span id="more"></span><p>语法格式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 只做一次的条件判断</span><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 执行代码</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 执行</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// a是正数还是负数</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a是正数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a是负数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上面的例子里面，我们把 if…else 这种情写法当成条件语句，它是根据某一个判断条件来执行的，这个判断条件返回一个 Boolean 类型的值（这个地方的 Boolean 不一定真的是 Boolean 类型）</p></blockquote><p>针对 if 后面的条件，我们看一下下面的问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// 如果a不为null，undefined，“”，我们就赋值给b，否则就给b一个默认值520</span><span class="token keyword">var</span> b<span class="token operator">=</span>a<span class="token operator">||</span><span class="token number">520</span><span class="token punctuation">;</span> <span class="token comment">// a 为true返回a，否则返回520</span><span class="token comment">// Boolean(8) true 返回第一个a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的写法里面，我们是根据的逻辑运算符来进行的（要当于这个地方的 a 也做了一次 Boolean(a)的转换）</p><p>上面的写法，可以转换成如下写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">// Boolean(a); 得到true</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> b<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">520</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>这一个时候的a放进去的不是一个布尔类型，但是我们可以通过Boolean去转换一次，得到Boolean类型的值，把这个值看成是它的结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>条件语句是代码应该根据不同的条件去进行执行，当有多个条件的时候，我们应该怎么办呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//代码1</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//代码2</span><span class="token punctuation">&#125;</span><span class="token comment">//.......后面还可以有很多很多</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//最后条件都不成立的结果</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不为空'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tel <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">// username tel都有值</span><span class="token comment">// ajax</span><span class="token punctuation">&#125;</span>条件语句可以进行多个条件的叠加<span class="token keyword">else</span>是可以省略的花括号可以省略，但是只是在条件语句执行的代码块里面只有一行代码的时候才可以<span class="token keyword">if</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：<br>现有全班学生的分数，我们希望通过这些分数做一次统计对比，划分层次，100 ~ 90 算优秀，89 ~ 80 算良好,79 ~ 70 算中等,69 ~ 60 算及格,60 分以下算不及格</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> score<span class="token operator">=</span><span class="token number">88</span><span class="token punctuation">;</span><span class="token keyword">var</span> leave<span class="token punctuation">;</span>   <span class="token comment">//等级</span><span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">90</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    leave<span class="token operator">=</span><span class="token string">" 优秀"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">80</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">&lt;=</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    leave<span class="token operator">=</span><span class="token string">"良好"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">70</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">&lt;=</span><span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    leave<span class="token operator">=</span><span class="token string">"中等"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">60</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">&lt;=</span><span class="token number">69</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    leave<span class="token operator">=</span><span class="token string">"及格"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    leave<span class="token operator">=</span><span class="token string">"不及格"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在条件限制完整的情况之下，我们是可以更改if的顺序的，但else必须放在最后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面的代码就是一个多条件的 if 语句执行，它根据不同的条件去做了一次判断</p></blockquote><p><strong>思考：</strong>上在的代码是否可以简化掉</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> score<span class="token operator">=</span><span class="token number">88</span><span class="token punctuation">;</span><span class="token keyword">var</span> levae<span class="token punctuation">;</span>   <span class="token comment">//等级</span><span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">90</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    leave<span class="token operator">=</span><span class="token string">"优秀"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    leave<span class="token operator">=</span><span class="token string">"良好"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    leave<span class="token operator">=</span><span class="token string">"中等"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    leave<span class="token operator">=</span><span class="token string">"及格"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    leave<span class="token operator">=</span><span class="token string">"不及格"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们把上面的代码的 if 条件转一下顺序，结果就会有影响了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span><span class="token keyword">var</span> leave<span class="token punctuation">;</span> <span class="token comment">//等级</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">90</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   leave <span class="token operator">=</span> <span class="token string">"优秀"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   leave <span class="token operator">=</span> <span class="token string">"中等"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   leave <span class="token operator">=</span> <span class="token string">"良好"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   leave <span class="token operator">=</span> <span class="token string">"及格"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>   leave <span class="token operator">=</span> <span class="token string">"不及格"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//正确的结果应该是”良好“，结果确是'中等'</span>上面的代码就不准确了，时候显示的结果就出错了这个时候 条件的顺序是不能够去进行顺序切换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>条件语句也叫分支语句，最终他们的代码都 会从上向下顺序执行，但是有一种语句它却是循环执行的</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 重复去执行一段代码（重复的去干某一些事情，如搬水等）为什么需要循环语句？问题：现在一楼有100桶水，每次只能够搬一桶水，现问要搬要搬多少次，怎么搬？？？上面的搬水的事情，一次干不完，所以它要干100次，同样，在代码里面，如果某些代码一次干不完，我们循环多次去干 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>for 循环是编程语言里面最常见的一种循环方法，它使用关键字 for 来进行，在里面限定它的开始条件与结束条件，但给一个自变量，就完成了</p><p>语法格式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>开始条件<span class="token punctuation">;</span>结束条件<span class="token punctuation">;</span>自变量<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//要执行的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在我们试着把搬水的方法完成掉</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*搬水问题分析1.它要搬多少桶    1002.从第几桶开始搬   13.每次搬几桶      1*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"搬到了第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"桶水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 开始条件：var i=1;</span><span class="token comment">// 结束条件：i&lt;=100; 只要这个条件是成立的，我都要执行循环</span><span class="token comment">// 自变量：i=i+1;</span>上面的代码就是一个最简单的循环语句，它从第<span class="token number">1</span>次开始，到<span class="token number">100</span>次结果，每次的自变量都是<span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="循环语句循环执行的到底是哪些代码？"><a href="#循环语句循环执行的到底是哪些代码？" class="headerlink" title="循环语句循环执行的到底是哪些代码？"></a>循环语句循环执行的到底是哪些代码？</h5><p>循环语句循环的是三部分：</p><ol><li>判断条件</li><li>代码体</li><li>自变量执行</li></ol><p>上面的循环语句，我们试着去做一些规范化的处理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"搬到了第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"桶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当循环省略开始条件的时候</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 代码段</span><span class="token punctuation">&#125;</span>上面的代码，我们把开始条件省略掉，放在外面，这也是可行的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当循环省略结束条件的时候</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 代码段</span><span class="token punctuation">&#125;</span>这个时候，在这里他没有循环结束条件，所以它会构成一个死循环如果不想构成死循环，后期我们会使用 <span class="token keyword">break</span> 关键字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当循环省略自变量的时候</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//代码段</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'搬到了第'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'桶水'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for 循环语句里面的三个条件我们都可以省略掉，所以当我们看到如下的语句的时候，不要认为他错了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//它会执行一次死循环（无限次的循环）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="for-循环练习"><a href="#for-循环练习" class="headerlink" title="for 循环练习"></a>for 循环练习</h6><ol><li><p>请计算出 1~1000 的求和</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//把求和的结果，放在这个sum里面</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 我要把上一次的计算结果，保存在sum里面，然后在下一次去调用</span>    sum<span class="token operator">+=</span>i<span class="token punctuation">;</span> <span class="token comment">//sum=sum+i;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum'</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>请计算出 1~50 里面能被 3 整除的和</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/* 第一种 */</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//在这里，相当于把每一个数都走了一次</span>    <span class="token comment">//看一下这个数能被除3整除 能被整除取余值是0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum2<span class="token operator">+=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum2'</span><span class="token punctuation">,</span> sum2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 第二种 */</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 直接把3的倍数循环出来相加</span>    sum2<span class="token operator">+=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum2'</span><span class="token punctuation">,</span> sum2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在页面打印九九乘法表</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">'打印九九乘法表'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><p>语法格式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//代码体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>while 循环跟着的是条件表达式，如果这个条件表达式为真，那么，就执行代码体，执行完代码体以后，再继续判断现在的条件是否还是成立的，如果成立，是继续执行，一直偈这样去重复</p></blockquote><p><strong>问题：</strong>现有 100 块砖需要从砖厂搬过来，一次只能搬一块，现在怎么样通过计算机的编程实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"杨欢搬到第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"块砖了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//上面的代码就是通过for循环执行 100 次的搬砖效果，现在我们怎么样通过while循环来开始</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>把上面的代码转换 while 循环以后</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*  1.从第几块砖开始搬   1  2.一次搬多少块        1  3.一共要搬多少块      100*/</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"搬到第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"块砖了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span>循环与<span class="token keyword">for</span>循环是可以相互转换的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在之前的时候， 我们是可以进行一个 for 循环的嵌套的，那么 while 也可以嵌套在一起，现在，可以试着把刚刚的乘法口诀使用 while 来一次</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'打印九九乘法表'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">'&lt;br>'</span><span class="token punctuation">)</span>    j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h4><p>while 与 do…while 的使用方式很相近，都是一个循环，只是有一点不一样，<strong>while 是先判断循环条件，如果成立则执行循环，而 do…while 在这里是先执行再去判断条件是否成立</strong></p><p>do…while 在这里的语法格式为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>   <span class="token comment">//代码段</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>循环条件判断<span class="token punctuation">)</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//------------------</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    n<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 建议在 do/while 结构的尾部使用分号表示语句结束，避免意外情况发生。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它们在使用的过程当中，99%都是相同的，循环的方式也相同，唯一的不同点</p><ul><li>while 是先判断循环条件是否成立，再去执行循环</li><li>do…while 是先执行循环体代码，再去判断循环条件</li></ul><p><strong>总结：</strong></p><ol><li>当循环的初始条件成立的时候，它们执行的循环次数是一样的</li><li>当循环的初始条件不成立的时候，do…while 会执行一次，而 while 不会执行，也就是，<strong>do…while 先执行循环中的语句,然后再判断表达式是否为真,如果为真则继续循环；如果为假,则终止循环。因此,do-while 循环至少要执行一次循环语句。</strong></li></ol><hr><h5 id="continue-关键字"><a href="#continue-关键字" class="headerlink" title="continue 关键字"></a>continue 关键字</h5><p>continue 关键字属于配合循环语句一起使用的一个关键字，它主要的作用就是用于跳过当前循环，再次执行下一次循环</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//假设在搬第15块砖的时候，接了电脑，它要出去接电话</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"在接电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"在搬第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"块砖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>在上面的代码里面它跳过了第<span class="token number">15</span>次的循环，而继续进行后面的循环，一直到循环结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="break-关键字"><a href="#break-关键字" class="headerlink" title="break 关键字"></a>break 关键字</h5><p>这个关键字也与循环语句结合起来一起使用，然后它主要的作用主就相当于中断当前循环（结束循环），后面的循环次数都不做了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接到老爸电话，回家继承一个亿'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//continue; 相当于拒绝继承一个亿，继续搬砖</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 中断循环，后面没有完成的循环也不做了。相当于同意回家继承一个亿</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="label-关键字"><a href="#label-关键字" class="headerlink" title="label 关键字"></a>label 关键字</h5><p>默认情况之下，break 与 continue 都是针对于当前循环，但是，我们也可以让它针对指定的循环，这个时候，我们就需要配置另一个语句来一起使用</p><p>label 语句用于标明某一段代码的入口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们在后面加了一个 break.这个 break 默认针对的就是当前的这个 for 循环</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">out</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span> out<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们分别在外边的循环上面添加了一个 out,在里面的循环上面，我们添加了一个 inner</p><p>后面当我们需要中断某个循环的时候，我们可以在 break 关键字的后边加上刚刚添加的 label（out 与 inner）</p><p>我们刚刚是在 break 的后面添加了 label ，我们可以在 continue 的后面添加 label</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">continue</span> label1<span class="token punctuation">;</span><span class="token keyword">break</span> label2<span class="token punctuation">;</span><span class="token comment">//上面的两种情况都是正常的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h3><p>选择语句指的是 switch…case 语句，主要的语法格式如下</p><p>if 语句与它的关系最为密切</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>值<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> 值<span class="token number">1</span>：        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 值<span class="token number">2</span>：        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//把switch后面的值与case后面的值做严格相等，如果相等，那么我就选择你</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们已经知道 if 语句与 switch 非常相近，那么，我们现在就试着把下面的 if 语句转为 switch 语句</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> weather<span class="token operator">=</span><span class="token string">"sun"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>weather<span class="token operator">==</span><span class="token string">"rain"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我们去看电影"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>weather<span class="token operator">==</span><span class="token string">"sun"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我们去森林公园"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>weather<span class="token operator">==</span><span class="token string">"wind"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我们去放风筝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我们回家睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//上面的条件语句指的就是根据某一个条件选择某一段代码去执行</span><span class="token comment">//-----------------------------</span><span class="token keyword">var</span> weather <span class="token operator">=</span> <span class="token string">"sun"</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>weather<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">"rain"</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我们去看电影"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"sun"</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我们去森林公园"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"wind"</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我们去放风筝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我们回家睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>switch 选择的时候，是从第一个 case 开始找，一直找到匹配，如果找不到就去 default 里面找</li><li>如果 switch 找到了 case 以后，那么会执行 case 下面的代码，执行完毕以后，它会看一下，你是否有 break 关键字，如果有，那么，后面的就不选了，如果没有 break，就从你当前选择的这个地方开始，后面每个 case 我都执行一次,直到遇到 break 或代码结束</li></ol><h6 id="switch-练习"><a href="#switch-练习" class="headerlink" title="switch 练习"></a>switch 练习</h6><ol><li><p>我们现在都知道一年有 12 个月，现在，我们要做一个判断 ，11，12，1，2 这四个月为冬天，3，4，为春天，5,6,7,8,为夏天，9，10 为秋天</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">设计一个程序：现在给一个变量month，根据 month的值输出一句话，判断这个month是在那个季节里面<span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">default</span><span class="token operator">:</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"month的值不对"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>现有全班学生的分数，我们希望通过这些分数 score 做一次统计对比，划分层次 leave，100 ~ 90 算优秀，89 ~ 80 算良好,79 ~ 70 算中等,69 ~ 60 算级格,60 分以下算不级格（使用 switch 来实现）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个整数只有可能 是0,1,2,3,4,5,6,7,8,9,10</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"中等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"分数错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//----------------</span><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> score<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">>=</span><span class="token number">90</span><span class="token operator">:</span>       <span class="token comment">//false</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> score<span class="token operator">&lt;=</span><span class="token number">89</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">>=</span><span class="token number">80</span><span class="token operator">:</span>        <span class="token comment">//false</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> score<span class="token operator">&lt;=</span><span class="token number">79</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">>=</span><span class="token number">70</span><span class="token operator">:</span>        <span class="token comment">//true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"中等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> score<span class="token operator">&lt;=</span><span class="token number">69</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">>=</span><span class="token number">60</span><span class="token operator">:</span>        <span class="token comment">//false</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> score<span class="token operator">&lt;=</span><span class="token number">59</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">:</span>         <span class="token comment">//false</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"分数不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;条件语句&quot;&gt;&lt;a href=&quot;#条件语句&quot; class=&quot;headerlink&quot; title=&quot;条件语句&quot;&gt;&lt;/a&gt;条件语句&lt;/h3&gt;&lt;p&gt;条件语句某些其它的编程里面它也属于分支语句，它是根据一些条件来选择不同的代码去执行&lt;/p&gt;
&lt;p&gt;条件语句在编程里面当作是 if…else…语句&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="条件语句" scheme="http://example.com/tags/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
</feed>
